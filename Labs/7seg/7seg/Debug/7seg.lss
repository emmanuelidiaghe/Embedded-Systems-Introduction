
7seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000146  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000067e  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ea  00000000  00000000  00000852  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000024e  00000000  00000000  00000e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000108c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037e  00000000  00000000  000010c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000005b  00000000  00000000  0000143e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001499  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define F_CPU 12000000
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	64 97       	sbiw	r28, 0x14	; 20
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
    /* initialize ports and pins */
	int segment[10] = {0b01111111, 0b00000110,0b01011011,0b01001111,0b00100111,0b01101101};
  80:	fe 01       	movw	r30, r28
  82:	31 96       	adiw	r30, 0x01	; 1
  84:	84 e1       	ldi	r24, 0x14	; 20
  86:	df 01       	movw	r26, r30
  88:	1d 92       	st	X+, r1
  8a:	8a 95       	dec	r24
  8c:	e9 f7       	brne	.-6      	; 0x88 <main+0x1c>
  8e:	8f e7       	ldi	r24, 0x7F	; 127
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	9a 83       	std	Y+2, r25	; 0x02
  94:	89 83       	std	Y+1, r24	; 0x01
  96:	86 e0       	ldi	r24, 0x06	; 6
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	9c 83       	std	Y+4, r25	; 0x04
  9c:	8b 83       	std	Y+3, r24	; 0x03
  9e:	8b e5       	ldi	r24, 0x5B	; 91
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	9e 83       	std	Y+6, r25	; 0x06
  a4:	8d 83       	std	Y+5, r24	; 0x05
  a6:	8f e4       	ldi	r24, 0x4F	; 79
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	98 87       	std	Y+8, r25	; 0x08
  ac:	8f 83       	std	Y+7, r24	; 0x07
  ae:	87 e2       	ldi	r24, 0x27	; 39
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	9a 87       	std	Y+10, r25	; 0x0a
  b4:	89 87       	std	Y+9, r24	; 0x09
  b6:	8d e6       	ldi	r24, 0x6D	; 109
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	9c 87       	std	Y+12, r25	; 0x0c
  bc:	8b 87       	std	Y+11, r24	; 0x0b
	DDRA = 0b11111111;
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0b00000000;
  c2:	1b ba       	out	0x1b, r1	; 27
  c4:	9e 01       	movw	r18, r28
  c6:	23 5f       	subi	r18, 0xF3	; 243
  c8:	3f 4f       	sbci	r19, 0xFF	; 255
  ca:	fe 01       	movw	r30, r28
  cc:	31 96       	adiw	r30, 0x01	; 1
	
    while (1) 
    {
	for(i=0; i<6; i++)
	{
		PORTA = segment[i];
  ce:	80 81       	ld	r24, Z
  d0:	32 96       	adiw	r30, 0x02	; 2
  d2:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	bf ef       	ldi	r27, 0xFF	; 255
  d6:	4e e9       	ldi	r20, 0x9E	; 158
  d8:	84 e2       	ldi	r24, 0x24	; 36
  da:	b1 50       	subi	r27, 0x01	; 1
  dc:	40 40       	sbci	r20, 0x00	; 0
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x6e>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x78>
  e4:	00 00       	nop
	int i;
	
	
    while (1) 
    {
	for(i=0; i<6; i++)
  e6:	e2 17       	cp	r30, r18
  e8:	f3 07       	cpc	r31, r19
  ea:	89 f7       	brne	.-30     	; 0xce <main+0x62>
  ec:	ee cf       	rjmp	.-36     	; 0xca <main+0x5e>

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
