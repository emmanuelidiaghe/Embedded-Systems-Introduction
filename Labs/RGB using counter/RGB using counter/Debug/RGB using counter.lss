
RGB using counter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005bf  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000541  00000000  00000000  00000757  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001b6  00000000  00000000  00000c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000355  00000000  00000000  00000e74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000030  00000000  00000000  000011c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000011f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>


int main(void)
{
	DDRC=0xE0;  // set for output
  6c:	80 ee       	ldi	r24, 0xE0	; 224
  6e:	84 bb       	out	0x14, r24	; 20
	PORTC=0x00; // initialized to off
  70:	15 ba       	out	0x15, r1	; 21
	int repeatCount=0;
	
	TCCR1B |= (1<<CS10);  // no pre_scaler
  72:	8e b5       	in	r24, 0x2e	; 46
  74:	81 60       	ori	r24, 0x01	; 1
  76:	8e bd       	out	0x2e, r24	; 46
#define  F_CPU 12000000 // External clock source
#include <avr/io.h>


int main(void)
{
  78:	e0 e0       	ldi	r30, 0x00	; 0
  7a:	70 e0       	ldi	r23, 0x00	; 0
			
			repeatCount++;
			TCNT1=0;
			if (repeatCount>=60)
			{
				PORTC=0x80;   //red led turns on and delays for 3/10-a-second
  7c:	50 e8       	ldi	r21, 0x80	; 128
			}
		    if (repeatCount>=120)
		    {
				PORTC=0x40;   //green led turns on and delays for 3/10-a-second
  7e:	40 e4       	ldi	r20, 0x40	; 64
		    }
			if (repeatCount>=180)
			{
				PORTC=0x20;    //blue led turns on and delays for 3/10-a-second
  80:	60 e2       	ldi	r22, 0x20	; 32
#define  F_CPU 12000000 // External clock source
#include <avr/io.h>


int main(void)
{
  82:	2e 2f       	mov	r18, r30
  84:	37 2f       	mov	r19, r23
	TCCR1B |= (1<<CS10);  // no pre_scaler
	
    /* Replace with your application code */
    while (1) 
    {
		if (TCNT1>60000)// any value within 16_bit
  86:	8c b5       	in	r24, 0x2c	; 44
  88:	9d b5       	in	r25, 0x2d	; 45
  8a:	81 36       	cpi	r24, 0x61	; 97
  8c:	9a 4e       	sbci	r25, 0xEA	; 234
  8e:	d8 f3       	brcs	.-10     	; 0x86 <main+0x1a>
		{
			/* Micro-controller counter counts from 0 t0 60,000.
			Variable repeatCount increases for every 60,000 reached by counter */
			
			repeatCount++;
  90:	2f 5f       	subi	r18, 0xFF	; 255
  92:	3f 4f       	sbci	r19, 0xFF	; 255
			TCNT1=0;
  94:	1d bc       	out	0x2d, r1	; 45
  96:	1c bc       	out	0x2c, r1	; 44
			if (repeatCount>=60)
  98:	2c 33       	cpi	r18, 0x3C	; 60
  9a:	31 05       	cpc	r19, r1
  9c:	0c f0       	brlt	.+2      	; 0xa0 <main+0x34>
			{
				PORTC=0x80;   //red led turns on and delays for 3/10-a-second
  9e:	55 bb       	out	0x15, r21	; 21
			}
		    if (repeatCount>=120)
  a0:	28 37       	cpi	r18, 0x78	; 120
  a2:	31 05       	cpc	r19, r1
  a4:	0c f0       	brlt	.+2      	; 0xa8 <main+0x3c>
		    {
				PORTC=0x40;   //green led turns on and delays for 3/10-a-second
  a6:	45 bb       	out	0x15, r20	; 21
		    }
			if (repeatCount>=180)
  a8:	24 3b       	cpi	r18, 0xB4	; 180
  aa:	31 05       	cpc	r19, r1
  ac:	61 f7       	brne	.-40     	; 0x86 <main+0x1a>
			{
				PORTC=0x20;    //blue led turns on and delays for 3/10-a-second
  ae:	65 bb       	out	0x15, r22	; 21
  b0:	e8 cf       	rjmp	.-48     	; 0x82 <main+0x16>

000000b2 <_exit>:
  b2:	f8 94       	cli

000000b4 <__stop_program>:
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <__stop_program>
