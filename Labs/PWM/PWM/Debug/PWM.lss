
PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000134  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007e6  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f9  00000000  00000000  000009fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000326  00000000  00000000  00000ff3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000131c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036b  00000000  00000000  00001340  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000076  00000000  00000000  000016ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001721  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 98 00 	jmp	0x130	; 0x130 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>


int main(void)
{
	DDRD =  0x30;  //OC1A + OC1B
  6c:	80 e3       	ldi	r24, 0x30	; 48
  6e:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x00;
  70:	12 ba       	out	0x12, r1	; 18
	
	DDRB  = 0x08;  //OCO
  72:	88 e0       	ldi	r24, 0x08	; 8
  74:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;
  76:	18 ba       	out	0x18, r1	; 24
	
	//      |    Fast PWM mode      |256_scaler | Inverted
	TCCR0 = (1<<WGM01) | (1<<WGM00) | (1<<CS02) | (1<<COM01);
  78:	8c e6       	ldi	r24, 0x6C	; 108
  7a:	83 bf       	out	0x33, r24	; 51
	
	//      |   Inverted modes         |  Fast PWM
	TCCR1A = (1<<COM1A1) | (1<<COM1B1) | (1<<WGM11);
  7c:	82 ea       	ldi	r24, 0xA2	; 162
  7e:	8f bd       	out	0x2f, r24	; 47
	
	//      |      Fast PWM          | 256_prescaler
	TCCR1B = (1<<WGM13) | (1<<WGM12) | (1<<CS12);
  80:	8c e1       	ldi	r24, 0x1C	; 28
  82:	8e bd       	out	0x2e, r24	; 46
	
	
	ICR1 = 469;  //100Hz
  84:	85 ed       	ldi	r24, 0xD5	; 213
  86:	91 e0       	ldi	r25, 0x01	; 1
  88:	97 bd       	out	0x27, r25	; 39
  8a:	86 bd       	out	0x26, r24	; 38
	
    while (1) 
    {
		// Random compare values generation
		
		for (int a=0;a<469;a++)
  8c:	50 e0       	ldi	r21, 0x00	; 0
  8e:	40 e0       	ldi	r20, 0x00	; 0
  90:	75 ed       	ldi	r23, 0xD5	; 213
  92:	61 e0       	ldi	r22, 0x01	; 1
  94:	ef ef       	ldi	r30, 0xFF	; 255
  96:	85 2f       	mov	r24, r21
  98:	94 2f       	mov	r25, r20
		{
			OCR1A = a;
  9a:	9b bd       	out	0x2b, r25	; 43
  9c:	8a bd       	out	0x2a, r24	; 42
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	af e2       	ldi	r26, 0x2F	; 47
  a0:	b5 e7       	ldi	r27, 0x75	; 117
  a2:	11 97       	sbiw	r26, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <main+0x36>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <main+0x3c>
  a8:	00 00       	nop
	
    while (1) 
    {
		// Random compare values generation
		
		for (int a=0;a<469;a++)
  aa:	01 96       	adiw	r24, 0x01	; 1
  ac:	85 3d       	cpi	r24, 0xD5	; 213
  ae:	b1 e0       	ldi	r27, 0x01	; 1
  b0:	9b 07       	cpc	r25, r27
  b2:	99 f7       	brne	.-26     	; 0x9a <main+0x2e>
  b4:	87 2f       	mov	r24, r23
  b6:	96 2f       	mov	r25, r22
			OCR1A = a;
			_delay_ms(10);
		}
		for (int b=469;b>0;b--)
		{
			OCR1B = b;
  b8:	99 bd       	out	0x29, r25	; 41
  ba:	88 bd       	out	0x28, r24	; 40
  bc:	af e2       	ldi	r26, 0x2F	; 47
  be:	b5 e7       	ldi	r27, 0x75	; 117
  c0:	11 97       	sbiw	r26, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <main+0x54>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x5a>
  c6:	00 00       	nop
		for (int a=0;a<469;a++)
		{
			OCR1A = a;
			_delay_ms(10);
		}
		for (int b=469;b>0;b--)
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	b1 f7       	brne	.-20     	; 0xb8 <main+0x4c>
  cc:	8e 2f       	mov	r24, r30
			OCR1B = b;
			_delay_ms(10);
		}
		for (int s=255;s>0;s--)
		{
			OCR0 = s;
  ce:	8c bf       	out	0x3c, r24	; 60
  d0:	af e5       	ldi	r26, 0x5F	; 95
  d2:	ba ee       	ldi	r27, 0xEA	; 234
  d4:	11 97       	sbiw	r26, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <main+0x68>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x6e>
  da:	00 00       	nop
  dc:	81 50       	subi	r24, 0x01	; 1
		for (int b=469;b>0;b--)
		{
			OCR1B = b;
			_delay_ms(10);
		}
		for (int s=255;s>0;s--)
  de:	b9 f7       	brne	.-18     	; 0xce <main+0x62>
  e0:	25 2f       	mov	r18, r21
  e2:	34 2f       	mov	r19, r20
			OCR0 = s;
			_delay_ms(20);
		}
		for (int j=0;j<469;j++)
		{
			OCR1B = j;
  e4:	39 bd       	out	0x29, r19	; 41
  e6:	28 bd       	out	0x28, r18	; 40
  e8:	af e2       	ldi	r26, 0x2F	; 47
  ea:	b5 e7       	ldi	r27, 0x75	; 117
  ec:	11 97       	sbiw	r26, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <main+0x80>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x86>
  f2:	00 00       	nop
		for (int s=255;s>0;s--)
		{
			OCR0 = s;
			_delay_ms(20);
		}
		for (int j=0;j<469;j++)
  f4:	2f 5f       	subi	r18, 0xFF	; 255
  f6:	3f 4f       	sbci	r19, 0xFF	; 255
  f8:	25 3d       	cpi	r18, 0xD5	; 213
  fa:	b1 e0       	ldi	r27, 0x01	; 1
  fc:	3b 07       	cpc	r19, r27
  fe:	91 f7       	brne	.-28     	; 0xe4 <main+0x78>
 100:	27 2f       	mov	r18, r23
 102:	36 2f       	mov	r19, r22
			OCR1B = j;
			_delay_ms(10);
		}		
		for (int i=469;i>0;i--)
		{
			OCR1A = i;
 104:	3b bd       	out	0x2b, r19	; 43
 106:	2a bd       	out	0x2a, r18	; 42
 108:	af e2       	ldi	r26, 0x2F	; 47
 10a:	b5 e7       	ldi	r27, 0x75	; 117
 10c:	11 97       	sbiw	r26, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <main+0xa0>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0xa6>
 112:	00 00       	nop
		for (int j=0;j<469;j++)
		{
			OCR1B = j;
			_delay_ms(10);
		}		
		for (int i=469;i>0;i--)
 114:	21 50       	subi	r18, 0x01	; 1
 116:	31 09       	sbc	r19, r1
 118:	a9 f7       	brne	.-22     	; 0x104 <main+0x98>
			OCR1A = i;
			_delay_ms(10);
		}	
		for (int r=0;r<255;r++)
		{
			OCR0 = r;
 11a:	8c bf       	out	0x3c, r24	; 60
 11c:	af e5       	ldi	r26, 0x5F	; 95
 11e:	ba ee       	ldi	r27, 0xEA	; 234
 120:	11 97       	sbiw	r26, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <main+0xb4>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0xba>
 126:	00 00       	nop
 128:	8f 5f       	subi	r24, 0xFF	; 255
		for (int i=469;i>0;i--)
		{
			OCR1A = i;
			_delay_ms(10);
		}	
		for (int r=0;r<255;r++)
 12a:	8f 3f       	cpi	r24, 0xFF	; 255
 12c:	b1 f7       	brne	.-20     	; 0x11a <main+0xae>
 12e:	b3 cf       	rjmp	.-154    	; 0x96 <main+0x2a>

00000130 <_exit>:
 130:	f8 94       	cli

00000132 <__stop_program>:
 132:	ff cf       	rjmp	.-2      	; 0x132 <__stop_program>
