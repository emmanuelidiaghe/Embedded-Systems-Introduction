
push button 7 segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006bb  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f0  00000000  00000000  000008cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000320  00000000  00000000  00000ebb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000011dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ae  00000000  00000000  00001200  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a0  00000000  00000000  000015ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000164e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 95 00 	jmp	0x12a	; 0x12a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>


int main(void)
{
      DDRC=0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
	  PORTC=0xFC;
  70:	8c ef       	ldi	r24, 0xFC	; 252
  72:	85 bb       	out	0x15, r24	; 21
	  DDRD=0x00;
  74:	11 ba       	out	0x11, r1	; 17
	  PORTD=0x40;
  76:	80 e4       	ldi	r24, 0x40	; 64
  78:	82 bb       	out	0x12, r24	; 18
	  
	  int led_on[10]={0xFD,0x61,0xDB,0xF3,0x67,0xB7,0xBF,0xE1,0xFF,0xF7};
	  int a=0;
	  int button_pressed=0;
  7a:	20 e0       	ldi	r18, 0x00	; 0
  7c:	30 e0       	ldi	r19, 0x00	; 0
	  PORTC=0xFC;
	  DDRD=0x00;
	  PORTD=0x40;
	  
	  int led_on[10]={0xFD,0x61,0xDB,0xF3,0x67,0xB7,0xBF,0xE1,0xFF,0xF7};
	  int a=0;
  7e:	80 e0       	ldi	r24, 0x00	; 0
  80:	90 e0       	ldi	r25, 0x00	; 0
		  {
			  PORTC=led_on[9];
		  }
		  else if (a==11)
		  {
			  button_pressed=0;
  82:	00 e0       	ldi	r16, 0x00	; 0
  84:	f1 2c       	mov	r15, r1
		  {
			   PORTC=led_on[8];
		  }
		  else if (a==10)
		  {
			  PORTC=led_on[9];
  86:	d7 ef       	ldi	r29, 0xF7	; 247
		  {
			   PORTC=led_on[7];
		  }
		  else if (a==9)
		  {
			   PORTC=led_on[8];
  88:	cf ef       	ldi	r28, 0xFF	; 255
		  {
			   PORTC=led_on[6];
		  }
		  else if (a==8)
		  {
			   PORTC=led_on[7];
  8a:	b1 ee       	ldi	r27, 0xE1	; 225
		  {
			   PORTC=led_on[5];
		  }
		  else if (a==7)
		  {
			   PORTC=led_on[6];
  8c:	af eb       	ldi	r26, 0xBF	; 191
		  {
			  PORTC=led_on[4];
		  }
		  else if (a==6)
		  {
			   PORTC=led_on[5];
  8e:	f7 eb       	ldi	r31, 0xB7	; 183
		  {
			  PORTC=led_on[3];
		  } 
		  else if (a==5)
		  {
			  PORTC=led_on[4];
  90:	e7 e6       	ldi	r30, 0x67	; 103
		  {
			  PORTC=led_on[2];
		  }
		  else if (a==4)
		  {
			  PORTC=led_on[3];
  92:	73 ef       	ldi	r23, 0xF3	; 243
		  {
			  PORTC=led_on[1];
		  }
		  else if (a==3)
		  {
			  PORTC=led_on[2];
  94:	6b ed       	ldi	r22, 0xDB	; 219
		  {
			  PORTC=led_on[0];
		  }
		  else if (a==2)
		  {
			  PORTC=led_on[1];
  96:	51 e6       	ldi	r21, 0x61	; 97
	      else {
			  button_pressed=a;
		       }	 
		   if(a==1)  
		  {
			  PORTC=led_on[0];
  98:	4d ef       	ldi	r20, 0xFD	; 253
	  int a=0;
	  int button_pressed=0;
	  
		  while(1)
		{		  
			  if ((PIND & (1<<PD6))==0)
  9a:	86 99       	sbic	0x10, 6	; 16
  9c:	0c c0       	rjmp	.+24     	; 0xb6 <main+0x4a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	1f eb       	ldi	r17, 0xBF	; 191
  a0:	84 ed       	ldi	r24, 0xD4	; 212
  a2:	91 e0       	ldi	r25, 0x01	; 1
  a4:	11 50       	subi	r17, 0x01	; 1
  a6:	80 40       	sbci	r24, 0x00	; 0
  a8:	90 40       	sbci	r25, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x38>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x42>
  ae:	00 00       	nop
			  {
				  _delay_ms(50);
				  a=button_pressed + 1;
  b0:	c9 01       	movw	r24, r18
  b2:	01 96       	adiw	r24, 0x01	; 1
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <main+0x4c>
			  }
	      else {
			  button_pressed=a;
  b6:	9c 01       	movw	r18, r24
		       }	 
		   if(a==1)  
  b8:	81 30       	cpi	r24, 0x01	; 1
  ba:	91 05       	cpc	r25, r1
  bc:	11 f4       	brne	.+4      	; 0xc2 <main+0x56>
		  {
			  PORTC=led_on[0];
  be:	45 bb       	out	0x15, r20	; 21
  c0:	ec cf       	rjmp	.-40     	; 0x9a <main+0x2e>
		  }
		  else if (a==2)
  c2:	82 30       	cpi	r24, 0x02	; 2
  c4:	91 05       	cpc	r25, r1
  c6:	11 f4       	brne	.+4      	; 0xcc <main+0x60>
		  {
			  PORTC=led_on[1];
  c8:	55 bb       	out	0x15, r21	; 21
  ca:	e7 cf       	rjmp	.-50     	; 0x9a <main+0x2e>
		  }
		  else if (a==3)
  cc:	83 30       	cpi	r24, 0x03	; 3
  ce:	91 05       	cpc	r25, r1
  d0:	11 f4       	brne	.+4      	; 0xd6 <main+0x6a>
		  {
			  PORTC=led_on[2];
  d2:	65 bb       	out	0x15, r22	; 21
  d4:	e2 cf       	rjmp	.-60     	; 0x9a <main+0x2e>
		  }
		  else if (a==4)
  d6:	84 30       	cpi	r24, 0x04	; 4
  d8:	91 05       	cpc	r25, r1
  da:	11 f4       	brne	.+4      	; 0xe0 <main+0x74>
		  {
			  PORTC=led_on[3];
  dc:	75 bb       	out	0x15, r23	; 21
  de:	dd cf       	rjmp	.-70     	; 0x9a <main+0x2e>
		  } 
		  else if (a==5)
  e0:	85 30       	cpi	r24, 0x05	; 5
  e2:	91 05       	cpc	r25, r1
  e4:	11 f4       	brne	.+4      	; 0xea <main+0x7e>
		  {
			  PORTC=led_on[4];
  e6:	e5 bb       	out	0x15, r30	; 21
  e8:	d8 cf       	rjmp	.-80     	; 0x9a <main+0x2e>
		  }
		  else if (a==6)
  ea:	86 30       	cpi	r24, 0x06	; 6
  ec:	91 05       	cpc	r25, r1
  ee:	11 f4       	brne	.+4      	; 0xf4 <main+0x88>
		  {
			   PORTC=led_on[5];
  f0:	f5 bb       	out	0x15, r31	; 21
  f2:	d3 cf       	rjmp	.-90     	; 0x9a <main+0x2e>
		  }
		  else if (a==7)
  f4:	87 30       	cpi	r24, 0x07	; 7
  f6:	91 05       	cpc	r25, r1
  f8:	11 f4       	brne	.+4      	; 0xfe <main+0x92>
		  {
			   PORTC=led_on[6];
  fa:	a5 bb       	out	0x15, r26	; 21
  fc:	ce cf       	rjmp	.-100    	; 0x9a <main+0x2e>
		  }
		  else if (a==8)
  fe:	88 30       	cpi	r24, 0x08	; 8
 100:	91 05       	cpc	r25, r1
 102:	11 f4       	brne	.+4      	; 0x108 <main+0x9c>
		  {
			   PORTC=led_on[7];
 104:	b5 bb       	out	0x15, r27	; 21
 106:	c9 cf       	rjmp	.-110    	; 0x9a <main+0x2e>
		  }
		  else if (a==9)
 108:	89 30       	cpi	r24, 0x09	; 9
 10a:	91 05       	cpc	r25, r1
 10c:	11 f4       	brne	.+4      	; 0x112 <main+0xa6>
		  {
			   PORTC=led_on[8];
 10e:	c5 bb       	out	0x15, r28	; 21
 110:	c4 cf       	rjmp	.-120    	; 0x9a <main+0x2e>
		  }
		  else if (a==10)
 112:	8a 30       	cpi	r24, 0x0A	; 10
 114:	91 05       	cpc	r25, r1
 116:	11 f4       	brne	.+4      	; 0x11c <main+0xb0>
		  {
			  PORTC=led_on[9];
 118:	d5 bb       	out	0x15, r29	; 21
 11a:	bf cf       	rjmp	.-130    	; 0x9a <main+0x2e>
		  }
		  else if (a==11)
 11c:	8b 30       	cpi	r24, 0x0B	; 11
 11e:	91 05       	cpc	r25, r1
 120:	09 f0       	breq	.+2      	; 0x124 <main+0xb8>
 122:	bb cf       	rjmp	.-138    	; 0x9a <main+0x2e>
		  {
			  button_pressed=0;
 124:	20 2f       	mov	r18, r16
 126:	3f 2d       	mov	r19, r15
 128:	b8 cf       	rjmp	.-144    	; 0x9a <main+0x2e>

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
