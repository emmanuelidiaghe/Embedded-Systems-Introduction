
Lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000069d  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d8  00000000  00000000  00000839  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000288  00000000  00000000  00000e11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000109c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037b  00000000  00000000  000010c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b8  00000000  00000000  0000143b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000014f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRA=0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	PORTA=0x00;
  70:	1b ba       	out	0x1b, r1	; 27
	DDRC=0xFF;
  72:	84 bb       	out	0x14, r24	; 20
	PORTC=0x00;
  74:	15 ba       	out	0x15, r1	; 21
#define F_CPU 12000000
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
  76:	30 e0       	ldi	r19, 0x00	; 0
  78:	23 2f       	mov	r18, r19
  7a:	93 2f       	mov	r25, r19
  7c:	1a c0       	rjmp	.+52     	; 0xb2 <main+0x46>
	{
		for (count1=0;count1<255;count1++)
		{
			for (count2=0;count2<255;count2++)
			{
				PORTA=count2;
  7e:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  80:	4f e7       	ldi	r20, 0x7F	; 127
  82:	59 ea       	ldi	r21, 0xA9	; 169
  84:	63 e0       	ldi	r22, 0x03	; 3
  86:	41 50       	subi	r20, 0x01	; 1
  88:	50 40       	sbci	r21, 0x00	; 0
  8a:	60 40       	sbci	r22, 0x00	; 0
  8c:	e1 f7       	brne	.-8      	; 0x86 <main+0x1a>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <main+0x24>
  90:	00 00       	nop
  92:	8f 5f       	subi	r24, 0xFF	; 255
    /* Replace with your application code */
	while(1)
	{
		for (count1=0;count1<255;count1++)
		{
			for (count2=0;count2<255;count2++)
  94:	8f 3f       	cpi	r24, 0xFF	; 255
  96:	99 f7       	brne	.-26     	; 0x7e <main+0x12>
			{
				PORTA=count2;
				_delay_ms(100);
			}
			PORTC=count1;
  98:	95 bb       	out	0x15, r25	; 21
  9a:	8f e7       	ldi	r24, 0x7F	; 127
  9c:	49 ea       	ldi	r20, 0xA9	; 169
  9e:	53 e0       	ldi	r21, 0x03	; 3
  a0:	81 50       	subi	r24, 0x01	; 1
  a2:	40 40       	sbci	r20, 0x00	; 0
  a4:	50 40       	sbci	r21, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x34>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <main+0x3e>
  aa:	00 00       	nop
  ac:	9f 5f       	subi	r25, 0xFF	; 255
	int count1;
	int count2;
    /* Replace with your application code */
	while(1)
	{
		for (count1=0;count1<255;count1++)
  ae:	9f 3f       	cpi	r25, 0xFF	; 255
  b0:	21 f3       	breq	.-56     	; 0x7a <main+0xe>
#define F_CPU 12000000
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
  b2:	82 2f       	mov	r24, r18
  b4:	e4 cf       	rjmp	.-56     	; 0x7e <main+0x12>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>
