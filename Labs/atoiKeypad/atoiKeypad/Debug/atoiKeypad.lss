
atoiKeypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000150  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006c1  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000621  00000000  00000000  000008f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001d4  00000000  00000000  00000f16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000010ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a3  00000000  00000000  00001120  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008b  00000000  00000000  000014c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000154e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 a6 00 	jmp	0x14c	; 0x14c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include <util/delay.h>


int main(void)
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
  88:	62 97       	sbiw	r28, 0x12	; 18
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	f8 94       	cli
  8e:	de bf       	out	0x3e, r29	; 62
  90:	0f be       	out	0x3f, r0	; 63
  92:	cd bf       	out	0x3d, r28	; 61
	DDRD = 0xFF;  // set for output
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	8a b9       	out	0x0a, r24	; 10
	PORTD= 0x00;
  98:	1b b8       	out	0x0b, r1	; 11
	DDRC = 0xFF;  // set for output
  9a:	87 b9       	out	0x07, r24	; 7
	PORTC= 0x00; 
  9c:	18 b8       	out	0x08, r1	; 8
	
	int count1   = 0;
	int count2   = 0;
	int led1[9] = {0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80}; //Array of LED shifts
  9e:	fe 01       	movw	r30, r28
  a0:	31 96       	adiw	r30, 0x01	; 1
  a2:	82 e1       	ldi	r24, 0x12	; 18
  a4:	df 01       	movw	r26, r30
  a6:	1d 92       	st	X+, r1
  a8:	8a 95       	dec	r24
  aa:	e9 f7       	brne	.-6      	; 0xa6 <main+0x26>
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	9a 83       	std	Y+2, r25	; 0x02
  b2:	89 83       	std	Y+1, r24	; 0x01
  b4:	82 e0       	ldi	r24, 0x02	; 2
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	9c 83       	std	Y+4, r25	; 0x04
  ba:	8b 83       	std	Y+3, r24	; 0x03
  bc:	84 e0       	ldi	r24, 0x04	; 4
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	9e 83       	std	Y+6, r25	; 0x06
  c2:	8d 83       	std	Y+5, r24	; 0x05
  c4:	88 e0       	ldi	r24, 0x08	; 8
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	98 87       	std	Y+8, r25	; 0x08
  ca:	8f 83       	std	Y+7, r24	; 0x07
  cc:	80 e1       	ldi	r24, 0x10	; 16
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	9a 87       	std	Y+10, r25	; 0x0a
  d2:	89 87       	std	Y+9, r24	; 0x09
  d4:	80 e2       	ldi	r24, 0x20	; 32
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	9c 87       	std	Y+12, r25	; 0x0c
  da:	8b 87       	std	Y+11, r24	; 0x0b
  dc:	80 e4       	ldi	r24, 0x40	; 64
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	9e 87       	std	Y+14, r25	; 0x0e
  e2:	8d 87       	std	Y+13, r24	; 0x0d
  e4:	80 e8       	ldi	r24, 0x80	; 128
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	98 8b       	std	Y+16, r25	; 0x10
  ea:	8f 87       	std	Y+15, r24	; 0x0f
	//int led2[9] = {0x80,0x40,0x20,0x10,0x08,0x04,0x02,0x01};

	TCCR1B|=(1<<CS12); // using 256 pre-scaler
  ec:	e1 e8       	ldi	r30, 0x81	; 129
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	84 60       	ori	r24, 0x04	; 4
  f4:	80 83       	st	Z, r24
	PORTD= 0x00;
	DDRC = 0xFF;  // set for output
	PORTC= 0x00; 
	
	int count1   = 0;
	int count2   = 0;
  f6:	40 e0       	ldi	r20, 0x00	; 0
  f8:	50 e0       	ldi	r21, 0x00	; 0
  fa:	9e 01       	movw	r18, r28
  fc:	2f 5e       	subi	r18, 0xEF	; 239
  fe:	3f 4f       	sbci	r19, 0xFF	; 255

	TCCR1B|=(1<<CS12); // using 256 pre-scaler
	
    while (1) 
    {
		if (TCNT1 == 7813)  //set counter to 1/8th second
 100:	e4 e8       	ldi	r30, 0x84	; 132
 102:	f0 e0       	ldi	r31, 0x00	; 0
				count1 = 0;
				PORTC  = led1[count2];
				count2++;
				if (count2 == 8)
				{
					count2 = 0;
 104:	70 e0       	ldi	r23, 0x00	; 0
 106:	60 e0       	ldi	r22, 0x00	; 0
 108:	de 01       	movw	r26, r28
 10a:	11 96       	adiw	r26, 0x01	; 1

	TCCR1B|=(1<<CS12); // using 256 pre-scaler
	
    while (1) 
    {
		if (TCNT1 == 7813)  //set counter to 1/8th second
 10c:	80 81       	ld	r24, Z
 10e:	91 81       	ldd	r25, Z+1	; 0x01
 110:	85 38       	cpi	r24, 0x85	; 133
 112:	9e 41       	sbci	r25, 0x1E	; 30
 114:	d9 f7       	brne	.-10     	; 0x10c <main+0x8c>
		{
			TCNT1 = 0;
 116:	11 82       	std	Z+1, r1	; 0x01
 118:	10 82       	st	Z, r1
			PORTD = led1[count1];
 11a:	8c 91       	ld	r24, X
 11c:	12 96       	adiw	r26, 0x02	; 2
 11e:	8b b9       	out	0x0b, r24	; 11
			count1++;
			if (count1 == 8)
 120:	a2 17       	cp	r26, r18
 122:	b3 07       	cpc	r27, r19
 124:	99 f7       	brne	.-26     	; 0x10c <main+0x8c>
			{
				count1 = 0;
				PORTC  = led1[count2];
 126:	da 01       	movw	r26, r20
 128:	aa 0f       	add	r26, r26
 12a:	bb 1f       	adc	r27, r27
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	8c 0f       	add	r24, r28
 132:	9d 1f       	adc	r25, r29
 134:	a8 0f       	add	r26, r24
 136:	b9 1f       	adc	r27, r25
 138:	8c 91       	ld	r24, X
 13a:	88 b9       	out	0x08, r24	; 8
				count2++;
 13c:	4f 5f       	subi	r20, 0xFF	; 255
 13e:	5f 4f       	sbci	r21, 0xFF	; 255
				if (count2 == 8)
 140:	48 30       	cpi	r20, 0x08	; 8
 142:	51 05       	cpc	r21, r1
 144:	09 f7       	brne	.-62     	; 0x108 <main+0x88>
				{
					count2 = 0;
 146:	47 2f       	mov	r20, r23
 148:	56 2f       	mov	r21, r22
 14a:	de cf       	rjmp	.-68     	; 0x108 <main+0x88>

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
