
using595LedMatrix.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000588  00800100  0000073c  000007d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000073c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00800688  00800688  00000d58  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d58  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001197  00000000  00000000  00000ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000042e  00000000  00000000  0000208f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000586  00000000  00000000  000024bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000384  00000000  00000000  00002a44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000071d  00000000  00000000  00002dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e42  00000000  00000000  000034e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00004327  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__vector_8>
  24:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	16 e0       	ldi	r17, 0x06	; 6
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e3       	ldi	r30, 0x3C	; 60
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 38       	cpi	r26, 0x88	; 136
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	26 e0       	ldi	r18, 0x06	; 6
  8c:	a8 e8       	ldi	r26, 0x88	; 136
  8e:	b6 e0       	ldi	r27, 0x06	; 6
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 3a       	cpi	r26, 0xA3	; 163
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ca 01 	call	0x394	; 0x394 <main>
  9e:	0c 94 9c 03 	jmp	0x738	; 0x738 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_ZN14HC595LedMatrix4initEcc>:
			         }
		       }
          }
	}
	else{
		  string[0] =       (char)(decData / 10000 ) + 48;
  a6:	cf 93       	push	r28
  a8:	c4 2f       	mov	r28, r20
  aa:	80 91 a1 06 	lds	r24, 0x06A1
  ae:	8e 7f       	andi	r24, 0xFE	; 254
  b0:	80 93 a1 06 	sts	0x06A1, r24
  b4:	21 9a       	sbi	0x04, 1	; 4
  b6:	23 9a       	sbi	0x04, 3	; 4
  b8:	24 9a       	sbi	0x04, 4	; 4
		  string[1] =      (char)((decData % 10000 ) / 1000) + 48;
  ba:	25 9a       	sbi	0x04, 5	; 4
  bc:	29 98       	cbi	0x05, 1	; 5
  be:	2b 98       	cbi	0x05, 3	; 5
  c0:	2d 9a       	sbi	0x05, 5	; 5
  c2:	2c 9a       	sbi	0x05, 4	; 5
  c4:	40 9a       	sbi	0x08, 0	; 8
  c6:	41 9a       	sbi	0x08, 1	; 8
  c8:	42 9a       	sbi	0x08, 2	; 8
  ca:	38 9a       	sbi	0x07, 0	; 7
  cc:	39 9a       	sbi	0x07, 1	; 7
  ce:	3a 9a       	sbi	0x07, 2	; 7
  d0:	70 e0       	ldi	r23, 0x00	; 0
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__floatsisf>
  da:	20 e0       	ldi	r18, 0x00	; 0
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	40 e0       	ldi	r20, 0x00	; 0
  e0:	55 e4       	ldi	r21, 0x45	; 69
  e2:	0e 94 07 03 	call	0x60e	; 0x60e <__mulsf3>
  e6:	9b 01       	movw	r18, r22
  e8:	ac 01       	movw	r20, r24
  ea:	60 e0       	ldi	r22, 0x00	; 0
  ec:	74 e2       	ldi	r23, 0x24	; 36
  ee:	84 e7       	ldi	r24, 0x74	; 116
  f0:	9b e4       	ldi	r25, 0x4B	; 75
  f2:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <__divsf3>
  f6:	0e 94 4a 02 	call	0x494	; 0x494 <__fixunssfsi>
		  string[2] =     (char)(((decData % 10000 ) % 1000) / 100)  + 48;
  fa:	60 93 b3 00 	sts	0x00B3, r22
  fe:	c6 9f       	mul	r28, r22
 100:	c0 01       	movw	r24, r0
 102:	11 24       	eor	r1, r1
 104:	64 e6       	ldi	r22, 0x64	; 100
 106:	70 e0       	ldi	r23, 0x00	; 0
 108:	0e 94 74 03 	call	0x6e8	; 0x6e8 <__divmodhi4>
 10c:	60 93 b4 00 	sts	0x00B4, r22
 110:	83 e0       	ldi	r24, 0x03	; 3
 112:	80 93 b0 00 	sts	0x00B0, r24
 116:	8e e0       	ldi	r24, 0x0E	; 14
 118:	80 93 b1 00 	sts	0x00B1, r24
 11c:	85 e0       	ldi	r24, 0x05	; 5
 11e:	80 93 70 00 	sts	0x0070, r24
 122:	8f b7       	in	r24, 0x3f	; 63
 124:	80 68       	ori	r24, 0x80	; 128
 126:	8f bf       	out	0x3f, r24	; 63
 128:	cf 91       	pop	r28
		  string[3] =    (char)((((decData % 10000 ) % 1000) % 100) / 10)  + 48;
 12a:	08 95       	ret

0000012c <_ZN14HC595LedMatrix16shiftDisplayLeftEc>:
 12c:	0f 93       	push	r16
 12e:	1f 93       	push	r17
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	80 91 a1 06 	lds	r24, 0x06A1
 138:	81 60       	ori	r24, 0x01	; 1
 13a:	80 93 a1 06 	sts	0x06A1, r24
 13e:	e9 e8       	ldi	r30, 0x89	; 137
 140:	f6 e0       	ldi	r31, 0x06	; 6
 142:	ca e8       	ldi	r28, 0x8A	; 138
 144:	d6 e0       	ldi	r29, 0x06	; 6
 146:	09 e9       	ldi	r16, 0x99	; 153
 148:	16 e0       	ldi	r17, 0x06	; 6
 14a:	49 e9       	ldi	r20, 0x99	; 153
 14c:	56 e0       	ldi	r21, 0x06	; 6
 14e:	18 c0       	rjmp	.+48     	; 0x180 <_ZN14HC595LedMatrix16shiftDisplayLeftEc+0x54>
 150:	81 60       	ori	r24, 0x01	; 1
 152:	80 83       	st	Z, r24
 154:	d9 01       	movw	r26, r18
		  string[4] =    (char)((((decData % 10000 ) % 1000) % 100) % 10)  + 48;
 156:	9c 91       	ld	r25, X
 158:	99 0f       	add	r25, r25
 15a:	9c 93       	st	X, r25
 15c:	b8 01       	movw	r22, r16
 15e:	d8 01       	movw	r26, r16
 160:	8c 91       	ld	r24, X
 162:	88 23       	and	r24, r24
 164:	1c f4       	brge	.+6      	; 0x16c <_ZN14HC595LedMatrix16shiftDisplayLeftEc+0x40>
 166:	91 60       	ori	r25, 0x01	; 1
 168:	d9 01       	movw	r26, r18
 16a:	9c 93       	st	X, r25
 16c:	88 0f       	add	r24, r24
 16e:	db 01       	movw	r26, r22
 170:	8c 93       	st	X, r24
 172:	0f 5f       	subi	r16, 0xFF	; 255
		  
		  if ((string[0] == 48)&&(string[1]==48) ){
 174:	1f 4f       	sbci	r17, 0xFF	; 255
 176:	32 96       	adiw	r30, 0x02	; 2
 178:	22 96       	adiw	r28, 0x02	; 2
 17a:	e4 17       	cp	r30, r20
			  string[0] = string[2];
 17c:	f5 07       	cpc	r31, r21
			  string[1] = string[3];
 17e:	41 f0       	breq	.+16     	; 0x190 <_ZN14HC595LedMatrix16shiftDisplayLeftEc+0x64>
			  string[2] = string[4];
 180:	80 81       	ld	r24, Z
			  string[3] =  endOfString;
 182:	88 0f       	add	r24, r24
			  string[4] =  endOfString;
 184:	80 83       	st	Z, r24
 186:	9e 01       	movw	r18, r28
			  
			  
		  }
		  else{
			  if ( (string[0] == 48) ){
				  string[0] = string[1];
 188:	98 81       	ld	r25, Y
				  string[1] = string[2];
 18a:	99 23       	and	r25, r25
				  string[2] = string[3];
 18c:	1c f7       	brge	.-58     	; 0x154 <_ZN14HC595LedMatrix16shiftDisplayLeftEc+0x28>
				  string[3] = string[4];
 18e:	e0 cf       	rjmp	.-64     	; 0x150 <_ZN14HC595LedMatrix16shiftDisplayLeftEc+0x24>
				  string[4] =  endOfString;
 190:	80 91 a1 06 	lds	r24, 0x06A1
		
		
		
		
	}
	UART1_Write_Text(string);
 194:	8e 7f       	andi	r24, 0xFE	; 254
 196:	80 93 a1 06 	sts	0x06A1, r24
	
}
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	1f 91       	pop	r17
 1a0:	0f 91       	pop	r16
 1a2:	08 95       	ret

000001a4 <_ZN14HC595LedMatrix8loadCharEc>:
 1a4:	86 2f       	mov	r24, r22
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	ac 01       	movw	r20, r24
 1aa:	44 0f       	add	r20, r20
 1ac:	55 1f       	adc	r21, r21
		
	}
	
}

char HC595LedMatrix::loadChar(char ascii){
 1ae:	44 0f       	add	r20, r20
 1b0:	55 1f       	adc	r21, r21
 1b2:	44 0f       	add	r20, r20
 1b4:	55 1f       	adc	r21, r21
 1b6:	48 0f       	add	r20, r24
 1b8:	59 1f       	adc	r21, r25
 1ba:	fa 01       	movw	r30, r20
 1bc:	e0 51       	subi	r30, 0x10	; 16
 1be:	ff 4f       	sbci	r31, 0xFF	; 255
 1c0:	a9 e9       	ldi	r26, 0x99	; 153
 1c2:	b6 e0       	ldi	r27, 0x06	; 6
 1c4:	48 50       	subi	r20, 0x08	; 8
 1c6:	5f 4f       	sbci	r21, 0xFF	; 255
	uint8_t i=0;

	//serial.write(ascii);
	
	for ( i=0; i<8; i++){  LoadRAM[i] = charCode[ascii - 32][i];  }
 1c8:	bc 01       	movw	r22, r24
 1ca:	9b 01       	movw	r18, r22
 1cc:	81 91       	ld	r24, Z+
 1ce:	8d 93       	st	X+, r24
 1d0:	e4 17       	cp	r30, r20
 1d2:	f5 07       	cpc	r31, r21
 1d4:	d1 f7       	brne	.-12     	; 0x1ca <_ZN14HC595LedMatrix8loadCharEc+0x26>
	return  charCode[ascii - 32][i];
 1d6:	20 52       	subi	r18, 0x20	; 32
 1d8:	31 09       	sbc	r19, r1
 1da:	f9 01       	movw	r30, r18
 1dc:	ee 0f       	add	r30, r30
 1de:	ff 1f       	adc	r31, r31
 1e0:	ee 0f       	add	r30, r30
 1e2:	ff 1f       	adc	r31, r31
 1e4:	ee 0f       	add	r30, r30
 1e6:	ff 1f       	adc	r31, r31
 1e8:	2e 0f       	add	r18, r30
 1ea:	3f 1f       	adc	r19, r31
 1ec:	f9 01       	movw	r30, r18
 1ee:	e0 5f       	subi	r30, 0xF0	; 240
 1f0:	fd 4f       	sbci	r31, 0xFD	; 253
}
 1f2:	80 85       	ldd	r24, Z+8	; 0x08
 1f4:	08 95       	ret

000001f6 <_ZN14HC595LedMatrix10scrolDelayEc>:


void HC595LedMatrix::scrolDelay(char myDelay){
	for(uint8_t i=0; i<myDelay; i++){  _delay_ms (1); }
 1f6:	66 23       	and	r22, r22
 1f8:	51 f0       	breq	.+20     	; 0x20e <_ZN14HC595LedMatrix10scrolDelayEc+0x18>
 1fa:	80 e0       	ldi	r24, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fc:	ef e9       	ldi	r30, 0x9F	; 159
 1fe:	ff e0       	ldi	r31, 0x0F	; 15
 200:	31 97       	sbiw	r30, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <_ZN14HC595LedMatrix10scrolDelayEc+0xa>
 204:	00 c0       	rjmp	.+0      	; 0x206 <_ZN14HC595LedMatrix10scrolDelayEc+0x10>
 206:	00 00       	nop
 208:	8f 5f       	subi	r24, 0xFF	; 255
 20a:	86 13       	cpse	r24, r22
 20c:	f7 cf       	rjmp	.-18     	; 0x1fc <_ZN14HC595LedMatrix10scrolDelayEc+0x6>
 20e:	08 95       	ret

00000210 <_ZN14HC595LedMatrix9scrolTextEPcc>:
	
	
}


char HC595LedMatrix::scrolText(char *_message , char speed){
 210:	ff 92       	push	r15
 212:	0f 93       	push	r16
 214:	1f 93       	push	r17
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	8c 01       	movw	r16, r24
 21c:	eb 01       	movw	r28, r22
	
	speed = 255 - speed;
 21e:	f4 2e       	mov	r15, r20
 220:	f0 94       	com	r15
	
	shiftCtr = 1;
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	80 93 10 01 	sts	0x0110, r24
	while (*_message != endOfString){
 228:	88 81       	ld	r24, Y
 22a:	88 23       	and	r24, r24
 22c:	c1 f0       	breq	.+48     	; 0x25e <_ZN14HC595LedMatrix9scrolTextEPcc+0x4e>
		shiftCtr--;
 22e:	90 91 10 01 	lds	r25, 0x0110
 232:	91 50       	subi	r25, 0x01	; 1
 234:	90 93 10 01 	sts	0x0110, r25
		if (shiftCtr == 0){
 238:	91 11       	cpse	r25, r1
 23a:	06 c0       	rjmp	.+12     	; 0x248 <_ZN14HC595LedMatrix9scrolTextEPcc+0x38>
			shiftCtr = loadChar( *_message);
 23c:	69 91       	ld	r22, Y+
 23e:	c8 01       	movw	r24, r16
 240:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN14HC595LedMatrix8loadCharEc>
 244:	80 93 10 01 	sts	0x0110, r24
			_message++;
		}
		shiftDisplayLeft(1);
 248:	61 e0       	ldi	r22, 0x01	; 1
 24a:	c8 01       	movw	r24, r16
 24c:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN14HC595LedMatrix16shiftDisplayLeftEc>
		scrolDelay(speed);
 250:	6f 2d       	mov	r22, r15
 252:	c8 01       	movw	r24, r16
 254:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_ZN14HC595LedMatrix10scrolDelayEc>
char HC595LedMatrix::scrolText(char *_message , char speed){
	
	speed = 255 - speed;
	
	shiftCtr = 1;
	while (*_message != endOfString){
 258:	88 81       	ld	r24, Y
 25a:	81 11       	cpse	r24, r1
 25c:	e8 cf       	rjmp	.-48     	; 0x22e <_ZN14HC595LedMatrix9scrolTextEPcc+0x1e>
		shiftDisplayLeft(1);
		scrolDelay(speed);
	}
	
	return 0;
}
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	1f 91       	pop	r17
 266:	0f 91       	pop	r16
 268:	ff 90       	pop	r15
 26a:	08 95       	ret

0000026c <_Z15clockColumnDatav>:
	for(uint8_t i=0; i<myDelay; i++){  _delay_ms (1); }
}

void clockColumnData (void){

	shiftClkPin = 0;
 26c:	2c 98       	cbi	0x05, 4	; 5
	shiftClkPin = 1;
 26e:	2c 9a       	sbi	0x05, 4	; 5
 270:	08 95       	ret

00000272 <_Z15latchColumnDatav>:
}

void latchColumnData (void){

	latchClkPin = 0;
 272:	2d 98       	cbi	0x05, 5	; 5
	latchClkPin = 1;
 274:	2d 9a       	sbi	0x05, 5	; 5
 276:	08 95       	ret

00000278 <_Z15shiftColumnDatac>:
}

void shiftColumnData(char srData){
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	d8 2f       	mov	r29, r24
 27e:	c8 e0       	ldi	r28, 0x08	; 8

	uint8_t i = 0;

	for(i=0; i<8; i++){
		
		if (srData&128) dataInPin = 1;
 280:	dd 23       	and	r29, r29
 282:	14 f4       	brge	.+4      	; 0x288 <_Z15shiftColumnDatac+0x10>
 284:	2b 9a       	sbi	0x05, 3	; 5
 286:	01 c0       	rjmp	.+2      	; 0x28a <_Z15shiftColumnDatac+0x12>
		else dataInPin = 0;
 288:	2b 98       	cbi	0x05, 3	; 5
		
		clockColumnData();
 28a:	0e 94 36 01 	call	0x26c	; 0x26c <_Z15clockColumnDatav>
		srData = srData << 1;
 28e:	dd 0f       	add	r29, r29
 290:	c1 50       	subi	r28, 0x01	; 1

void shiftColumnData(char srData){

	uint8_t i = 0;

	for(i=0; i<8; i++){
 292:	b1 f7       	brne	.-20     	; 0x280 <_Z15shiftColumnDatac+0x8>
		
		clockColumnData();
		srData = srData << 1;
	}

}
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	08 95       	ret

0000029a <__vector_9>:

ISR (TIMER2_OVF_vect ){
 29a:	1f 92       	push	r1
 29c:	0f 92       	push	r0
 29e:	0f b6       	in	r0, 0x3f	; 63
 2a0:	0f 92       	push	r0
 2a2:	11 24       	eor	r1, r1
 2a4:	2f 93       	push	r18
 2a6:	3f 93       	push	r19
 2a8:	4f 93       	push	r20
 2aa:	5f 93       	push	r21
 2ac:	6f 93       	push	r22
 2ae:	7f 93       	push	r23
 2b0:	8f 93       	push	r24
 2b2:	9f 93       	push	r25
 2b4:	af 93       	push	r26
 2b6:	bf 93       	push	r27
 2b8:	ef 93       	push	r30
 2ba:	ff 93       	push	r31
	
	if (shiftEnable == 0){                               // update screen ram when not shifting
 2bc:	80 91 a1 06 	lds	r24, 0x06A1
 2c0:	80 fd       	sbrc	r24, 0
 2c2:	31 c0       	rjmp	.+98     	; 0x326 <__vector_9+0x8c>
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	dc 01       	movw	r26, r24
 2ca:	a7 57       	subi	r26, 0x77	; 119
 2cc:	b9 4f       	sbci	r27, 0xF9	; 249
 2ce:	fc 01       	movw	r30, r24
 2d0:	e0 50       	subi	r30, 0x00	; 0
 2d2:	ff 4f       	sbci	r31, 0xFF	; 255
		
		for(uint8_t x =0; x<8; x++){
			
			for(uint8_t y =0; y<n595; y++){
				SRAM[x][y] = DRAM[x][y];
 2d4:	2c 91       	ld	r18, X
 2d6:	20 83       	st	Z, r18
 2d8:	11 96       	adiw	r26, 0x01	; 1
 2da:	2c 91       	ld	r18, X
 2dc:	21 83       	std	Z+1, r18	; 0x01
 2de:	02 96       	adiw	r24, 0x02	; 2

ISR (TIMER2_OVF_vect ){
	
	if (shiftEnable == 0){                               // update screen ram when not shifting
		
		for(uint8_t x =0; x<8; x++){
 2e0:	80 31       	cpi	r24, 0x10	; 16
 2e2:	91 05       	cpc	r25, r1
 2e4:	89 f7       	brne	.-30     	; 0x2c8 <__vector_9+0x2e>
 2e6:	1f c0       	rjmp	.+62     	; 0x326 <__vector_9+0x8c>
	}
	

	for(uint8_t i = 0; i< n595; i++){  shiftColumnData ( 255 - SRAM[scanPtr][i] );  }
		
	if(scanPtr & 0x1 )  addAPin = 1; else addAPin = 0;
 2e8:	40 9a       	sbi	0x08, 0	; 8
 2ea:	01 c0       	rjmp	.+2      	; 0x2ee <__vector_9+0x54>
 2ec:	40 98       	cbi	0x08, 0	; 8
	if(scanPtr & 0x2 )  addBPin = 1; else addBPin = 0;
 2ee:	80 91 a2 06 	lds	r24, 0x06A2
 2f2:	81 ff       	sbrs	r24, 1
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <__vector_9+0x60>
 2f6:	41 9a       	sbi	0x08, 1	; 8
 2f8:	01 c0       	rjmp	.+2      	; 0x2fc <__vector_9+0x62>
 2fa:	41 98       	cbi	0x08, 1	; 8
	if(scanPtr & 0x4 )  addCPin = 1; else addCPin = 0;
 2fc:	80 91 a2 06 	lds	r24, 0x06A2
 300:	82 ff       	sbrs	r24, 2
 302:	02 c0       	rjmp	.+4      	; 0x308 <__vector_9+0x6e>
 304:	42 9a       	sbi	0x08, 2	; 8
 306:	01 c0       	rjmp	.+2      	; 0x30a <__vector_9+0x70>
 308:	42 98       	cbi	0x08, 2	; 8
	  
	latchColumnData();
 30a:	0e 94 39 01 	call	0x272	; 0x272 <_Z15latchColumnDatav>
	
	scanPtr++;
 30e:	80 91 a2 06 	lds	r24, 0x06A2
 312:	8f 5f       	subi	r24, 0xFF	; 255
	if (scanPtr >=8 )  scanPtr = 0;
 314:	88 30       	cpi	r24, 0x08	; 8
 316:	18 f4       	brcc	.+6      	; 0x31e <__vector_9+0x84>
	if(scanPtr & 0x2 )  addBPin = 1; else addBPin = 0;
	if(scanPtr & 0x4 )  addCPin = 1; else addCPin = 0;
	  
	latchColumnData();
	
	scanPtr++;
 318:	80 93 a2 06 	sts	0x06A2, r24
 31c:	02 c0       	rjmp	.+4      	; 0x322 <__vector_9+0x88>
	if (scanPtr >=8 )  scanPtr = 0;
 31e:	10 92 a2 06 	sts	0x06A2, r1
	enablePin = 0;
 322:	29 98       	cbi	0x05, 1	; 5
 324:	1b c0       	rjmp	.+54     	; 0x35c <__vector_9+0xc2>
		}
		
	}
	

	for(uint8_t i = 0; i< n595; i++){  shiftColumnData ( 255 - SRAM[scanPtr][i] );  }
 326:	e0 91 a2 06 	lds	r30, 0x06A2
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	ee 0f       	add	r30, r30
 32e:	ff 1f       	adc	r31, r31
 330:	e0 50       	subi	r30, 0x00	; 0
 332:	ff 4f       	sbci	r31, 0xFF	; 255
 334:	80 81       	ld	r24, Z
 336:	80 95       	com	r24
 338:	0e 94 3c 01 	call	0x278	; 0x278 <_Z15shiftColumnDatac>
 33c:	e0 91 a2 06 	lds	r30, 0x06A2
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	ee 0f       	add	r30, r30
 344:	ff 1f       	adc	r31, r31
 346:	e0 50       	subi	r30, 0x00	; 0
 348:	ff 4f       	sbci	r31, 0xFF	; 255
 34a:	81 81       	ldd	r24, Z+1	; 0x01
 34c:	80 95       	com	r24
 34e:	0e 94 3c 01 	call	0x278	; 0x278 <_Z15shiftColumnDatac>
		
	if(scanPtr & 0x1 )  addAPin = 1; else addAPin = 0;
 352:	80 91 a2 06 	lds	r24, 0x06A2
 356:	80 fd       	sbrc	r24, 0
 358:	c7 cf       	rjmp	.-114    	; 0x2e8 <__vector_9+0x4e>
 35a:	c8 cf       	rjmp	.-112    	; 0x2ec <__vector_9+0x52>
	latchColumnData();
	
	scanPtr++;
	if (scanPtr >=8 )  scanPtr = 0;
	enablePin = 0;
}
 35c:	ff 91       	pop	r31
 35e:	ef 91       	pop	r30
 360:	bf 91       	pop	r27
 362:	af 91       	pop	r26
 364:	9f 91       	pop	r25
 366:	8f 91       	pop	r24
 368:	7f 91       	pop	r23
 36a:	6f 91       	pop	r22
 36c:	5f 91       	pop	r21
 36e:	4f 91       	pop	r20
 370:	3f 91       	pop	r19
 372:	2f 91       	pop	r18
 374:	0f 90       	pop	r0
 376:	0f be       	out	0x3f, r0	; 63
 378:	0f 90       	pop	r0
 37a:	1f 90       	pop	r1
 37c:	18 95       	reti

0000037e <__vector_8>:

ISR (TIMER2_COMPB_vect) {
 37e:	1f 92       	push	r1
 380:	0f 92       	push	r0
 382:	0f b6       	in	r0, 0x3f	; 63
 384:	0f 92       	push	r0
 386:	11 24       	eor	r1, r1
	
	enablePin = 1;
 388:	29 9a       	sbi	0x05, 1	; 5
}
 38a:	0f 90       	pop	r0
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	0f 90       	pop	r0
 390:	1f 90       	pop	r1
 392:	18 95       	reti

00000394 <main>:
char speed = 105;

int main(void)
{
    
	display.init(100, 10);    // frequency and brightness
 394:	4a e0       	ldi	r20, 0x0A	; 10
 396:	64 e6       	ldi	r22, 0x64	; 100
 398:	88 e8       	ldi	r24, 0x88	; 136
 39a:	96 e0       	ldi	r25, 0x06	; 6
 39c:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN14HC595LedMatrix4initEcc>
    while (1) 
    {
		
		    //display.scrolText(efua, speed );
		    //display.scrolText(message1, speed );
		    display.scrolText(msg, 100);
 3a0:	44 e6       	ldi	r20, 0x64	; 100
 3a2:	61 e1       	ldi	r22, 0x11	; 17
 3a4:	71 e0       	ldi	r23, 0x01	; 1
 3a6:	88 e8       	ldi	r24, 0x88	; 136
 3a8:	96 e0       	ldi	r25, 0x06	; 6
 3aa:	0e 94 08 01 	call	0x210	; 0x210 <_ZN14HC595LedMatrix9scrolTextEPcc>

HC595LedMatrix display;

char speed = 105;

int main(void)
 3ae:	f8 cf       	rjmp	.-16     	; 0x3a0 <main+0xc>

000003b0 <__divsf3>:
 3b0:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <__divsf3x>
 3b4:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__fp_round>
 3b8:	0e 94 c6 02 	call	0x58c	; 0x58c <__fp_pscB>
 3bc:	58 f0       	brcs	.+22     	; 0x3d4 <__divsf3+0x24>
 3be:	0e 94 bf 02 	call	0x57e	; 0x57e <__fp_pscA>
 3c2:	40 f0       	brcs	.+16     	; 0x3d4 <__divsf3+0x24>
 3c4:	29 f4       	brne	.+10     	; 0x3d0 <__divsf3+0x20>
 3c6:	5f 3f       	cpi	r21, 0xFF	; 255
 3c8:	29 f0       	breq	.+10     	; 0x3d4 <__divsf3+0x24>
 3ca:	0c 94 b6 02 	jmp	0x56c	; 0x56c <__fp_inf>
 3ce:	51 11       	cpse	r21, r1
 3d0:	0c 94 01 03 	jmp	0x602	; 0x602 <__fp_szero>
 3d4:	0c 94 bc 02 	jmp	0x578	; 0x578 <__fp_nan>

000003d8 <__divsf3x>:
 3d8:	0e 94 de 02 	call	0x5bc	; 0x5bc <__fp_split3>
 3dc:	68 f3       	brcs	.-38     	; 0x3b8 <__divsf3+0x8>

000003de <__divsf3_pse>:
 3de:	99 23       	and	r25, r25
 3e0:	b1 f3       	breq	.-20     	; 0x3ce <__divsf3+0x1e>
 3e2:	55 23       	and	r21, r21
 3e4:	91 f3       	breq	.-28     	; 0x3ca <__divsf3+0x1a>
 3e6:	95 1b       	sub	r25, r21
 3e8:	55 0b       	sbc	r21, r21
 3ea:	bb 27       	eor	r27, r27
 3ec:	aa 27       	eor	r26, r26
 3ee:	62 17       	cp	r22, r18
 3f0:	73 07       	cpc	r23, r19
 3f2:	84 07       	cpc	r24, r20
 3f4:	38 f0       	brcs	.+14     	; 0x404 <__divsf3_pse+0x26>
 3f6:	9f 5f       	subi	r25, 0xFF	; 255
 3f8:	5f 4f       	sbci	r21, 0xFF	; 255
 3fa:	22 0f       	add	r18, r18
 3fc:	33 1f       	adc	r19, r19
 3fe:	44 1f       	adc	r20, r20
 400:	aa 1f       	adc	r26, r26
 402:	a9 f3       	breq	.-22     	; 0x3ee <__divsf3_pse+0x10>
 404:	35 d0       	rcall	.+106    	; 0x470 <__divsf3_pse+0x92>
 406:	0e 2e       	mov	r0, r30
 408:	3a f0       	brmi	.+14     	; 0x418 <__divsf3_pse+0x3a>
 40a:	e0 e8       	ldi	r30, 0x80	; 128
 40c:	32 d0       	rcall	.+100    	; 0x472 <__divsf3_pse+0x94>
 40e:	91 50       	subi	r25, 0x01	; 1
 410:	50 40       	sbci	r21, 0x00	; 0
 412:	e6 95       	lsr	r30
 414:	00 1c       	adc	r0, r0
 416:	ca f7       	brpl	.-14     	; 0x40a <__divsf3_pse+0x2c>
 418:	2b d0       	rcall	.+86     	; 0x470 <__divsf3_pse+0x92>
 41a:	fe 2f       	mov	r31, r30
 41c:	29 d0       	rcall	.+82     	; 0x470 <__divsf3_pse+0x92>
 41e:	66 0f       	add	r22, r22
 420:	77 1f       	adc	r23, r23
 422:	88 1f       	adc	r24, r24
 424:	bb 1f       	adc	r27, r27
 426:	26 17       	cp	r18, r22
 428:	37 07       	cpc	r19, r23
 42a:	48 07       	cpc	r20, r24
 42c:	ab 07       	cpc	r26, r27
 42e:	b0 e8       	ldi	r27, 0x80	; 128
 430:	09 f0       	breq	.+2      	; 0x434 <__divsf3_pse+0x56>
 432:	bb 0b       	sbc	r27, r27
 434:	80 2d       	mov	r24, r0
 436:	bf 01       	movw	r22, r30
 438:	ff 27       	eor	r31, r31
 43a:	93 58       	subi	r25, 0x83	; 131
 43c:	5f 4f       	sbci	r21, 0xFF	; 255
 43e:	3a f0       	brmi	.+14     	; 0x44e <__divsf3_pse+0x70>
 440:	9e 3f       	cpi	r25, 0xFE	; 254
 442:	51 05       	cpc	r21, r1
 444:	78 f0       	brcs	.+30     	; 0x464 <__divsf3_pse+0x86>
 446:	0c 94 b6 02 	jmp	0x56c	; 0x56c <__fp_inf>
 44a:	0c 94 01 03 	jmp	0x602	; 0x602 <__fp_szero>
 44e:	5f 3f       	cpi	r21, 0xFF	; 255
 450:	e4 f3       	brlt	.-8      	; 0x44a <__divsf3_pse+0x6c>
 452:	98 3e       	cpi	r25, 0xE8	; 232
 454:	d4 f3       	brlt	.-12     	; 0x44a <__divsf3_pse+0x6c>
 456:	86 95       	lsr	r24
 458:	77 95       	ror	r23
 45a:	67 95       	ror	r22
 45c:	b7 95       	ror	r27
 45e:	f7 95       	ror	r31
 460:	9f 5f       	subi	r25, 0xFF	; 255
 462:	c9 f7       	brne	.-14     	; 0x456 <__divsf3_pse+0x78>
 464:	88 0f       	add	r24, r24
 466:	91 1d       	adc	r25, r1
 468:	96 95       	lsr	r25
 46a:	87 95       	ror	r24
 46c:	97 f9       	bld	r25, 7
 46e:	08 95       	ret
 470:	e1 e0       	ldi	r30, 0x01	; 1
 472:	66 0f       	add	r22, r22
 474:	77 1f       	adc	r23, r23
 476:	88 1f       	adc	r24, r24
 478:	bb 1f       	adc	r27, r27
 47a:	62 17       	cp	r22, r18
 47c:	73 07       	cpc	r23, r19
 47e:	84 07       	cpc	r24, r20
 480:	ba 07       	cpc	r27, r26
 482:	20 f0       	brcs	.+8      	; 0x48c <__divsf3_pse+0xae>
 484:	62 1b       	sub	r22, r18
 486:	73 0b       	sbc	r23, r19
 488:	84 0b       	sbc	r24, r20
 48a:	ba 0b       	sbc	r27, r26
 48c:	ee 1f       	adc	r30, r30
 48e:	88 f7       	brcc	.-30     	; 0x472 <__divsf3_pse+0x94>
 490:	e0 95       	com	r30
 492:	08 95       	ret

00000494 <__fixunssfsi>:
 494:	0e 94 e6 02 	call	0x5cc	; 0x5cc <__fp_splitA>
 498:	88 f0       	brcs	.+34     	; 0x4bc <__fixunssfsi+0x28>
 49a:	9f 57       	subi	r25, 0x7F	; 127
 49c:	98 f0       	brcs	.+38     	; 0x4c4 <__fixunssfsi+0x30>
 49e:	b9 2f       	mov	r27, r25
 4a0:	99 27       	eor	r25, r25
 4a2:	b7 51       	subi	r27, 0x17	; 23
 4a4:	b0 f0       	brcs	.+44     	; 0x4d2 <__fixunssfsi+0x3e>
 4a6:	e1 f0       	breq	.+56     	; 0x4e0 <__fixunssfsi+0x4c>
 4a8:	66 0f       	add	r22, r22
 4aa:	77 1f       	adc	r23, r23
 4ac:	88 1f       	adc	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	1a f0       	brmi	.+6      	; 0x4b8 <__fixunssfsi+0x24>
 4b2:	ba 95       	dec	r27
 4b4:	c9 f7       	brne	.-14     	; 0x4a8 <__fixunssfsi+0x14>
 4b6:	14 c0       	rjmp	.+40     	; 0x4e0 <__fixunssfsi+0x4c>
 4b8:	b1 30       	cpi	r27, 0x01	; 1
 4ba:	91 f0       	breq	.+36     	; 0x4e0 <__fixunssfsi+0x4c>
 4bc:	0e 94 00 03 	call	0x600	; 0x600 <__fp_zero>
 4c0:	b1 e0       	ldi	r27, 0x01	; 1
 4c2:	08 95       	ret
 4c4:	0c 94 00 03 	jmp	0x600	; 0x600 <__fp_zero>
 4c8:	67 2f       	mov	r22, r23
 4ca:	78 2f       	mov	r23, r24
 4cc:	88 27       	eor	r24, r24
 4ce:	b8 5f       	subi	r27, 0xF8	; 248
 4d0:	39 f0       	breq	.+14     	; 0x4e0 <__fixunssfsi+0x4c>
 4d2:	b9 3f       	cpi	r27, 0xF9	; 249
 4d4:	cc f3       	brlt	.-14     	; 0x4c8 <__fixunssfsi+0x34>
 4d6:	86 95       	lsr	r24
 4d8:	77 95       	ror	r23
 4da:	67 95       	ror	r22
 4dc:	b3 95       	inc	r27
 4de:	d9 f7       	brne	.-10     	; 0x4d6 <__fixunssfsi+0x42>
 4e0:	3e f4       	brtc	.+14     	; 0x4f0 <__fixunssfsi+0x5c>
 4e2:	90 95       	com	r25
 4e4:	80 95       	com	r24
 4e6:	70 95       	com	r23
 4e8:	61 95       	neg	r22
 4ea:	7f 4f       	sbci	r23, 0xFF	; 255
 4ec:	8f 4f       	sbci	r24, 0xFF	; 255
 4ee:	9f 4f       	sbci	r25, 0xFF	; 255
 4f0:	08 95       	ret

000004f2 <__floatunsisf>:
 4f2:	e8 94       	clt
 4f4:	09 c0       	rjmp	.+18     	; 0x508 <__floatsisf+0x12>

000004f6 <__floatsisf>:
 4f6:	97 fb       	bst	r25, 7
 4f8:	3e f4       	brtc	.+14     	; 0x508 <__floatsisf+0x12>
 4fa:	90 95       	com	r25
 4fc:	80 95       	com	r24
 4fe:	70 95       	com	r23
 500:	61 95       	neg	r22
 502:	7f 4f       	sbci	r23, 0xFF	; 255
 504:	8f 4f       	sbci	r24, 0xFF	; 255
 506:	9f 4f       	sbci	r25, 0xFF	; 255
 508:	99 23       	and	r25, r25
 50a:	a9 f0       	breq	.+42     	; 0x536 <__floatsisf+0x40>
 50c:	f9 2f       	mov	r31, r25
 50e:	96 e9       	ldi	r25, 0x96	; 150
 510:	bb 27       	eor	r27, r27
 512:	93 95       	inc	r25
 514:	f6 95       	lsr	r31
 516:	87 95       	ror	r24
 518:	77 95       	ror	r23
 51a:	67 95       	ror	r22
 51c:	b7 95       	ror	r27
 51e:	f1 11       	cpse	r31, r1
 520:	f8 cf       	rjmp	.-16     	; 0x512 <__floatsisf+0x1c>
 522:	fa f4       	brpl	.+62     	; 0x562 <__floatsisf+0x6c>
 524:	bb 0f       	add	r27, r27
 526:	11 f4       	brne	.+4      	; 0x52c <__floatsisf+0x36>
 528:	60 ff       	sbrs	r22, 0
 52a:	1b c0       	rjmp	.+54     	; 0x562 <__floatsisf+0x6c>
 52c:	6f 5f       	subi	r22, 0xFF	; 255
 52e:	7f 4f       	sbci	r23, 0xFF	; 255
 530:	8f 4f       	sbci	r24, 0xFF	; 255
 532:	9f 4f       	sbci	r25, 0xFF	; 255
 534:	16 c0       	rjmp	.+44     	; 0x562 <__floatsisf+0x6c>
 536:	88 23       	and	r24, r24
 538:	11 f0       	breq	.+4      	; 0x53e <__floatsisf+0x48>
 53a:	96 e9       	ldi	r25, 0x96	; 150
 53c:	11 c0       	rjmp	.+34     	; 0x560 <__floatsisf+0x6a>
 53e:	77 23       	and	r23, r23
 540:	21 f0       	breq	.+8      	; 0x54a <__floatsisf+0x54>
 542:	9e e8       	ldi	r25, 0x8E	; 142
 544:	87 2f       	mov	r24, r23
 546:	76 2f       	mov	r23, r22
 548:	05 c0       	rjmp	.+10     	; 0x554 <__floatsisf+0x5e>
 54a:	66 23       	and	r22, r22
 54c:	71 f0       	breq	.+28     	; 0x56a <__floatsisf+0x74>
 54e:	96 e8       	ldi	r25, 0x86	; 134
 550:	86 2f       	mov	r24, r22
 552:	70 e0       	ldi	r23, 0x00	; 0
 554:	60 e0       	ldi	r22, 0x00	; 0
 556:	2a f0       	brmi	.+10     	; 0x562 <__floatsisf+0x6c>
 558:	9a 95       	dec	r25
 55a:	66 0f       	add	r22, r22
 55c:	77 1f       	adc	r23, r23
 55e:	88 1f       	adc	r24, r24
 560:	da f7       	brpl	.-10     	; 0x558 <__floatsisf+0x62>
 562:	88 0f       	add	r24, r24
 564:	96 95       	lsr	r25
 566:	87 95       	ror	r24
 568:	97 f9       	bld	r25, 7
 56a:	08 95       	ret

0000056c <__fp_inf>:
 56c:	97 f9       	bld	r25, 7
 56e:	9f 67       	ori	r25, 0x7F	; 127
 570:	80 e8       	ldi	r24, 0x80	; 128
 572:	70 e0       	ldi	r23, 0x00	; 0
 574:	60 e0       	ldi	r22, 0x00	; 0
 576:	08 95       	ret

00000578 <__fp_nan>:
 578:	9f ef       	ldi	r25, 0xFF	; 255
 57a:	80 ec       	ldi	r24, 0xC0	; 192
 57c:	08 95       	ret

0000057e <__fp_pscA>:
 57e:	00 24       	eor	r0, r0
 580:	0a 94       	dec	r0
 582:	16 16       	cp	r1, r22
 584:	17 06       	cpc	r1, r23
 586:	18 06       	cpc	r1, r24
 588:	09 06       	cpc	r0, r25
 58a:	08 95       	ret

0000058c <__fp_pscB>:
 58c:	00 24       	eor	r0, r0
 58e:	0a 94       	dec	r0
 590:	12 16       	cp	r1, r18
 592:	13 06       	cpc	r1, r19
 594:	14 06       	cpc	r1, r20
 596:	05 06       	cpc	r0, r21
 598:	08 95       	ret

0000059a <__fp_round>:
 59a:	09 2e       	mov	r0, r25
 59c:	03 94       	inc	r0
 59e:	00 0c       	add	r0, r0
 5a0:	11 f4       	brne	.+4      	; 0x5a6 <__fp_round+0xc>
 5a2:	88 23       	and	r24, r24
 5a4:	52 f0       	brmi	.+20     	; 0x5ba <__fp_round+0x20>
 5a6:	bb 0f       	add	r27, r27
 5a8:	40 f4       	brcc	.+16     	; 0x5ba <__fp_round+0x20>
 5aa:	bf 2b       	or	r27, r31
 5ac:	11 f4       	brne	.+4      	; 0x5b2 <__fp_round+0x18>
 5ae:	60 ff       	sbrs	r22, 0
 5b0:	04 c0       	rjmp	.+8      	; 0x5ba <__fp_round+0x20>
 5b2:	6f 5f       	subi	r22, 0xFF	; 255
 5b4:	7f 4f       	sbci	r23, 0xFF	; 255
 5b6:	8f 4f       	sbci	r24, 0xFF	; 255
 5b8:	9f 4f       	sbci	r25, 0xFF	; 255
 5ba:	08 95       	ret

000005bc <__fp_split3>:
 5bc:	57 fd       	sbrc	r21, 7
 5be:	90 58       	subi	r25, 0x80	; 128
 5c0:	44 0f       	add	r20, r20
 5c2:	55 1f       	adc	r21, r21
 5c4:	59 f0       	breq	.+22     	; 0x5dc <__fp_splitA+0x10>
 5c6:	5f 3f       	cpi	r21, 0xFF	; 255
 5c8:	71 f0       	breq	.+28     	; 0x5e6 <__fp_splitA+0x1a>
 5ca:	47 95       	ror	r20

000005cc <__fp_splitA>:
 5cc:	88 0f       	add	r24, r24
 5ce:	97 fb       	bst	r25, 7
 5d0:	99 1f       	adc	r25, r25
 5d2:	61 f0       	breq	.+24     	; 0x5ec <__fp_splitA+0x20>
 5d4:	9f 3f       	cpi	r25, 0xFF	; 255
 5d6:	79 f0       	breq	.+30     	; 0x5f6 <__fp_splitA+0x2a>
 5d8:	87 95       	ror	r24
 5da:	08 95       	ret
 5dc:	12 16       	cp	r1, r18
 5de:	13 06       	cpc	r1, r19
 5e0:	14 06       	cpc	r1, r20
 5e2:	55 1f       	adc	r21, r21
 5e4:	f2 cf       	rjmp	.-28     	; 0x5ca <__fp_split3+0xe>
 5e6:	46 95       	lsr	r20
 5e8:	f1 df       	rcall	.-30     	; 0x5cc <__fp_splitA>
 5ea:	08 c0       	rjmp	.+16     	; 0x5fc <__fp_splitA+0x30>
 5ec:	16 16       	cp	r1, r22
 5ee:	17 06       	cpc	r1, r23
 5f0:	18 06       	cpc	r1, r24
 5f2:	99 1f       	adc	r25, r25
 5f4:	f1 cf       	rjmp	.-30     	; 0x5d8 <__fp_splitA+0xc>
 5f6:	86 95       	lsr	r24
 5f8:	71 05       	cpc	r23, r1
 5fa:	61 05       	cpc	r22, r1
 5fc:	08 94       	sec
 5fe:	08 95       	ret

00000600 <__fp_zero>:
 600:	e8 94       	clt

00000602 <__fp_szero>:
 602:	bb 27       	eor	r27, r27
 604:	66 27       	eor	r22, r22
 606:	77 27       	eor	r23, r23
 608:	cb 01       	movw	r24, r22
 60a:	97 f9       	bld	r25, 7
 60c:	08 95       	ret

0000060e <__mulsf3>:
 60e:	0e 94 1a 03 	call	0x634	; 0x634 <__mulsf3x>
 612:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__fp_round>
 616:	0e 94 bf 02 	call	0x57e	; 0x57e <__fp_pscA>
 61a:	38 f0       	brcs	.+14     	; 0x62a <__mulsf3+0x1c>
 61c:	0e 94 c6 02 	call	0x58c	; 0x58c <__fp_pscB>
 620:	20 f0       	brcs	.+8      	; 0x62a <__mulsf3+0x1c>
 622:	95 23       	and	r25, r21
 624:	11 f0       	breq	.+4      	; 0x62a <__mulsf3+0x1c>
 626:	0c 94 b6 02 	jmp	0x56c	; 0x56c <__fp_inf>
 62a:	0c 94 bc 02 	jmp	0x578	; 0x578 <__fp_nan>
 62e:	11 24       	eor	r1, r1
 630:	0c 94 01 03 	jmp	0x602	; 0x602 <__fp_szero>

00000634 <__mulsf3x>:
 634:	0e 94 de 02 	call	0x5bc	; 0x5bc <__fp_split3>
 638:	70 f3       	brcs	.-36     	; 0x616 <__mulsf3+0x8>

0000063a <__mulsf3_pse>:
 63a:	95 9f       	mul	r25, r21
 63c:	c1 f3       	breq	.-16     	; 0x62e <__mulsf3+0x20>
 63e:	95 0f       	add	r25, r21
 640:	50 e0       	ldi	r21, 0x00	; 0
 642:	55 1f       	adc	r21, r21
 644:	62 9f       	mul	r22, r18
 646:	f0 01       	movw	r30, r0
 648:	72 9f       	mul	r23, r18
 64a:	bb 27       	eor	r27, r27
 64c:	f0 0d       	add	r31, r0
 64e:	b1 1d       	adc	r27, r1
 650:	63 9f       	mul	r22, r19
 652:	aa 27       	eor	r26, r26
 654:	f0 0d       	add	r31, r0
 656:	b1 1d       	adc	r27, r1
 658:	aa 1f       	adc	r26, r26
 65a:	64 9f       	mul	r22, r20
 65c:	66 27       	eor	r22, r22
 65e:	b0 0d       	add	r27, r0
 660:	a1 1d       	adc	r26, r1
 662:	66 1f       	adc	r22, r22
 664:	82 9f       	mul	r24, r18
 666:	22 27       	eor	r18, r18
 668:	b0 0d       	add	r27, r0
 66a:	a1 1d       	adc	r26, r1
 66c:	62 1f       	adc	r22, r18
 66e:	73 9f       	mul	r23, r19
 670:	b0 0d       	add	r27, r0
 672:	a1 1d       	adc	r26, r1
 674:	62 1f       	adc	r22, r18
 676:	83 9f       	mul	r24, r19
 678:	a0 0d       	add	r26, r0
 67a:	61 1d       	adc	r22, r1
 67c:	22 1f       	adc	r18, r18
 67e:	74 9f       	mul	r23, r20
 680:	33 27       	eor	r19, r19
 682:	a0 0d       	add	r26, r0
 684:	61 1d       	adc	r22, r1
 686:	23 1f       	adc	r18, r19
 688:	84 9f       	mul	r24, r20
 68a:	60 0d       	add	r22, r0
 68c:	21 1d       	adc	r18, r1
 68e:	82 2f       	mov	r24, r18
 690:	76 2f       	mov	r23, r22
 692:	6a 2f       	mov	r22, r26
 694:	11 24       	eor	r1, r1
 696:	9f 57       	subi	r25, 0x7F	; 127
 698:	50 40       	sbci	r21, 0x00	; 0
 69a:	9a f0       	brmi	.+38     	; 0x6c2 <__mulsf3_pse+0x88>
 69c:	f1 f0       	breq	.+60     	; 0x6da <__mulsf3_pse+0xa0>
 69e:	88 23       	and	r24, r24
 6a0:	4a f0       	brmi	.+18     	; 0x6b4 <__mulsf3_pse+0x7a>
 6a2:	ee 0f       	add	r30, r30
 6a4:	ff 1f       	adc	r31, r31
 6a6:	bb 1f       	adc	r27, r27
 6a8:	66 1f       	adc	r22, r22
 6aa:	77 1f       	adc	r23, r23
 6ac:	88 1f       	adc	r24, r24
 6ae:	91 50       	subi	r25, 0x01	; 1
 6b0:	50 40       	sbci	r21, 0x00	; 0
 6b2:	a9 f7       	brne	.-22     	; 0x69e <__mulsf3_pse+0x64>
 6b4:	9e 3f       	cpi	r25, 0xFE	; 254
 6b6:	51 05       	cpc	r21, r1
 6b8:	80 f0       	brcs	.+32     	; 0x6da <__mulsf3_pse+0xa0>
 6ba:	0c 94 b6 02 	jmp	0x56c	; 0x56c <__fp_inf>
 6be:	0c 94 01 03 	jmp	0x602	; 0x602 <__fp_szero>
 6c2:	5f 3f       	cpi	r21, 0xFF	; 255
 6c4:	e4 f3       	brlt	.-8      	; 0x6be <__mulsf3_pse+0x84>
 6c6:	98 3e       	cpi	r25, 0xE8	; 232
 6c8:	d4 f3       	brlt	.-12     	; 0x6be <__mulsf3_pse+0x84>
 6ca:	86 95       	lsr	r24
 6cc:	77 95       	ror	r23
 6ce:	67 95       	ror	r22
 6d0:	b7 95       	ror	r27
 6d2:	f7 95       	ror	r31
 6d4:	e7 95       	ror	r30
 6d6:	9f 5f       	subi	r25, 0xFF	; 255
 6d8:	c1 f7       	brne	.-16     	; 0x6ca <__mulsf3_pse+0x90>
 6da:	fe 2b       	or	r31, r30
 6dc:	88 0f       	add	r24, r24
 6de:	91 1d       	adc	r25, r1
 6e0:	96 95       	lsr	r25
 6e2:	87 95       	ror	r24
 6e4:	97 f9       	bld	r25, 7
 6e6:	08 95       	ret

000006e8 <__divmodhi4>:
 6e8:	97 fb       	bst	r25, 7
 6ea:	07 2e       	mov	r0, r23
 6ec:	16 f4       	brtc	.+4      	; 0x6f2 <__divmodhi4+0xa>
 6ee:	00 94       	com	r0
 6f0:	07 d0       	rcall	.+14     	; 0x700 <__divmodhi4_neg1>
 6f2:	77 fd       	sbrc	r23, 7
 6f4:	09 d0       	rcall	.+18     	; 0x708 <__divmodhi4_neg2>
 6f6:	0e 94 88 03 	call	0x710	; 0x710 <__udivmodhi4>
 6fa:	07 fc       	sbrc	r0, 7
 6fc:	05 d0       	rcall	.+10     	; 0x708 <__divmodhi4_neg2>
 6fe:	3e f4       	brtc	.+14     	; 0x70e <__divmodhi4_exit>

00000700 <__divmodhi4_neg1>:
 700:	90 95       	com	r25
 702:	81 95       	neg	r24
 704:	9f 4f       	sbci	r25, 0xFF	; 255
 706:	08 95       	ret

00000708 <__divmodhi4_neg2>:
 708:	70 95       	com	r23
 70a:	61 95       	neg	r22
 70c:	7f 4f       	sbci	r23, 0xFF	; 255

0000070e <__divmodhi4_exit>:
 70e:	08 95       	ret

00000710 <__udivmodhi4>:
 710:	aa 1b       	sub	r26, r26
 712:	bb 1b       	sub	r27, r27
 714:	51 e1       	ldi	r21, 0x11	; 17
 716:	07 c0       	rjmp	.+14     	; 0x726 <__udivmodhi4_ep>

00000718 <__udivmodhi4_loop>:
 718:	aa 1f       	adc	r26, r26
 71a:	bb 1f       	adc	r27, r27
 71c:	a6 17       	cp	r26, r22
 71e:	b7 07       	cpc	r27, r23
 720:	10 f0       	brcs	.+4      	; 0x726 <__udivmodhi4_ep>
 722:	a6 1b       	sub	r26, r22
 724:	b7 0b       	sbc	r27, r23

00000726 <__udivmodhi4_ep>:
 726:	88 1f       	adc	r24, r24
 728:	99 1f       	adc	r25, r25
 72a:	5a 95       	dec	r21
 72c:	a9 f7       	brne	.-22     	; 0x718 <__udivmodhi4_loop>
 72e:	80 95       	com	r24
 730:	90 95       	com	r25
 732:	bc 01       	movw	r22, r24
 734:	cd 01       	movw	r24, r26
 736:	08 95       	ret

00000738 <_exit>:
 738:	f8 94       	cli

0000073a <__stop_program>:
 73a:	ff cf       	rjmp	.-2      	; 0x73a <__stop_program>
