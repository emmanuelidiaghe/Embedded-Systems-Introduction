
MD_MAX72xx_Message.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  0000070e  000007a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000070e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000bd  00800116  00800116  000007b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f8  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000096b2  00000000  00000000  00000b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e5e  00000000  00000000  0000a1d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000022dc  00000000  00000000  0000c030  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000090c  00000000  00000000  0000e30c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00012009  00000000  00000000  0000ec18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000360b  00000000  00000000  00020c21  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000308  00000000  00000000  0002422c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003bdc  00000000  00000000  00024534  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__dtors_end>
   4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  10:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  14:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  1c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  20:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  24:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  28:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  30:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  34:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  3c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  40:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__vector_16>
  44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  48:	0c 94 31 01 	jmp	0x262	; 0x262 <__vector_18>
  4c:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__vector_19>
  50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  54:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  58:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  5c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  60:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>

00000068 <__ctors_start>:
  68:	61 00       	.word	0x0061	; ????
  6a:	89 01       	movw	r16, r18

0000006c <__ctors_end>:
  6c:	67 00       	.word	0x0067	; ????

0000006e <__dtors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	11 e0       	ldi	r17, 0x01	; 1
  7c:	a0 e0       	ldi	r26, 0x00	; 0
  7e:	b1 e0       	ldi	r27, 0x01	; 1
  80:	ee e0       	ldi	r30, 0x0E	; 14
  82:	f7 e0       	ldi	r31, 0x07	; 7
  84:	02 c0       	rjmp	.+4      	; 0x8a <__do_copy_data+0x10>
  86:	05 90       	lpm	r0, Z+
  88:	0d 92       	st	X+, r0
  8a:	a6 31       	cpi	r26, 0x16	; 22
  8c:	b1 07       	cpc	r27, r17
  8e:	d9 f7       	brne	.-10     	; 0x86 <__do_copy_data+0xc>

00000090 <__do_clear_bss>:
  90:	21 e0       	ldi	r18, 0x01	; 1
  92:	a6 e1       	ldi	r26, 0x16	; 22
  94:	b1 e0       	ldi	r27, 0x01	; 1
  96:	01 c0       	rjmp	.+2      	; 0x9a <.do_clear_bss_start>

00000098 <.do_clear_bss_loop>:
  98:	1d 92       	st	X+, r1

0000009a <.do_clear_bss_start>:
  9a:	a3 3d       	cpi	r26, 0xD3	; 211
  9c:	b2 07       	cpc	r27, r18
  9e:	e1 f7       	brne	.-8      	; 0x98 <.do_clear_bss_loop>

000000a0 <__do_global_ctors>:
  a0:	10 e0       	ldi	r17, 0x00	; 0
  a2:	c6 e3       	ldi	r28, 0x36	; 54
  a4:	d0 e0       	ldi	r29, 0x00	; 0
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_global_ctors+0x10>
  a8:	21 97       	sbiw	r28, 0x01	; 1
  aa:	fe 01       	movw	r30, r28
  ac:	0e 94 47 02 	call	0x48e	; 0x48e <__tablejump2__>
  b0:	c4 33       	cpi	r28, 0x34	; 52
  b2:	d1 07       	cpc	r29, r17
  b4:	c9 f7       	brne	.-14     	; 0xa8 <__do_global_ctors+0x8>
  b6:	0e 94 74 00 	call	0xe8	; 0xe8 <main>
  ba:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__do_global_dtors>

000000be <__bad_interrupt>:
  be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c2 <_GLOBAL__sub_I_mx>:
#define	CLK_PIN		13  // or SCK
#define	DATA_PIN	11  // or MOSI
#define	CS_PIN		10  // or SS

// SPI hardware interface
MD_MAX72XX mx = MD_MAX72XX(CS_PIN, MAX_DEVICES);
  c2:	44 e0       	ldi	r20, 0x04	; 4
  c4:	6a e0       	ldi	r22, 0x0A	; 10
  c6:	86 e1       	ldi	r24, 0x16	; 22
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	0c 94 2b 02 	jmp	0x456	; 0x456 <_ZN10MD_MAX72XXC1Ehh>

000000ce <_GLOBAL__sub_D_mx>:
  ce:	86 e1       	ldi	r24, 0x16	; 22
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	0c 94 34 02 	jmp	0x468	; 0x468 <_ZN10MD_MAX72XXD1Ev>

000000d6 <board_init>:
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
  d6:	95 b1       	in	r25, 0x05	; 5
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
  d8:	84 b1       	in	r24, 0x04	; 4
  da:	80 62       	ori	r24, 0x20	; 32
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
  dc:	8f 77       	andi	r24, 0x7F	; 127
  de:	84 b9       	out	0x04, r24	; 4
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
  e0:	89 2f       	mov	r24, r25
  e2:	80 6a       	ori	r24, 0xA0	; 160
  e4:	85 b9       	out	0x05, r24	; 5
  e6:	08 95       	ret

000000e8 <main>:

int main (void)
{
	/* Insert system clock initialization code here (sysclk_init()). */

	board_init();
  e8:	0e 94 6b 00 	call	0xd6	; 0xd6 <board_init>

	/* Insert application code here, after the board has been initialized. */
}
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	08 95       	ret

000000f2 <_ZN14HardwareSerial9availableEv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
  f2:	fc 01       	movw	r30, r24
  f4:	91 8d       	ldd	r25, Z+25	; 0x19
  f6:	22 8d       	ldd	r18, Z+26	; 0x1a
  f8:	89 2f       	mov	r24, r25
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	80 5c       	subi	r24, 0xC0	; 192
  fe:	9f 4f       	sbci	r25, 0xFF	; 255
 100:	82 1b       	sub	r24, r18
 102:	91 09       	sbc	r25, r1
 104:	8f 73       	andi	r24, 0x3F	; 63
 106:	99 27       	eor	r25, r25
 108:	08 95       	ret

0000010a <_ZN14HardwareSerial4peekEv>:
 10a:	fc 01       	movw	r30, r24
 10c:	91 8d       	ldd	r25, Z+25	; 0x19
 10e:	82 8d       	ldd	r24, Z+26	; 0x1a
 110:	98 17       	cp	r25, r24
 112:	31 f0       	breq	.+12     	; 0x120 <_ZN14HardwareSerial4peekEv+0x16>
 114:	82 8d       	ldd	r24, Z+26	; 0x1a
 116:	e8 0f       	add	r30, r24
 118:	f1 1d       	adc	r31, r1
 11a:	85 8d       	ldd	r24, Z+29	; 0x1d
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	08 95       	ret
 120:	8f ef       	ldi	r24, 0xFF	; 255
 122:	9f ef       	ldi	r25, 0xFF	; 255
 124:	08 95       	ret

00000126 <_ZN14HardwareSerial4readEv>:
 126:	fc 01       	movw	r30, r24
 128:	91 8d       	ldd	r25, Z+25	; 0x19
 12a:	82 8d       	ldd	r24, Z+26	; 0x1a
 12c:	98 17       	cp	r25, r24
 12e:	61 f0       	breq	.+24     	; 0x148 <_ZN14HardwareSerial4readEv+0x22>
 130:	82 8d       	ldd	r24, Z+26	; 0x1a
 132:	df 01       	movw	r26, r30
 134:	a8 0f       	add	r26, r24
 136:	b1 1d       	adc	r27, r1
 138:	5d 96       	adiw	r26, 0x1d	; 29
 13a:	8c 91       	ld	r24, X
 13c:	92 8d       	ldd	r25, Z+26	; 0x1a
 13e:	9f 5f       	subi	r25, 0xFF	; 255
 140:	9f 73       	andi	r25, 0x3F	; 63
 142:	92 8f       	std	Z+26, r25	; 0x1a
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	08 95       	ret
 148:	8f ef       	ldi	r24, 0xFF	; 255
 14a:	9f ef       	ldi	r25, 0xFF	; 255
 14c:	08 95       	ret

0000014e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 14e:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 150:	84 8d       	ldd	r24, Z+28	; 0x1c
 152:	df 01       	movw	r26, r30
 154:	a8 0f       	add	r26, r24
 156:	b1 1d       	adc	r27, r1
 158:	a3 5a       	subi	r26, 0xA3	; 163
 15a:	bf 4f       	sbci	r27, 0xFF	; 255
 15c:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 15e:	84 8d       	ldd	r24, Z+28	; 0x1c
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	01 96       	adiw	r24, 0x01	; 1
 164:	8f 73       	andi	r24, 0x3F	; 63
 166:	99 27       	eor	r25, r25
 168:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 16a:	a6 89       	ldd	r26, Z+22	; 0x16
 16c:	b7 89       	ldd	r27, Z+23	; 0x17
 16e:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 170:	a0 89       	ldd	r26, Z+16	; 0x10
 172:	b1 89       	ldd	r27, Z+17	; 0x11
 174:	8c 91       	ld	r24, X
 176:	80 64       	ori	r24, 0x40	; 64
 178:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 17a:	93 8d       	ldd	r25, Z+27	; 0x1b
 17c:	84 8d       	ldd	r24, Z+28	; 0x1c
 17e:	98 13       	cpse	r25, r24
 180:	06 c0       	rjmp	.+12     	; 0x18e <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 182:	02 88       	ldd	r0, Z+18	; 0x12
 184:	f3 89       	ldd	r31, Z+19	; 0x13
 186:	e0 2d       	mov	r30, r0
 188:	80 81       	ld	r24, Z
 18a:	8f 7d       	andi	r24, 0xDF	; 223
 18c:	80 83       	st	Z, r24
 18e:	08 95       	ret

00000190 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 196:	88 8d       	ldd	r24, Y+24	; 0x18
 198:	88 23       	and	r24, r24
 19a:	c9 f0       	breq	.+50     	; 0x1ce <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 19c:	ea 89       	ldd	r30, Y+18	; 0x12
 19e:	fb 89       	ldd	r31, Y+19	; 0x13
 1a0:	80 81       	ld	r24, Z
 1a2:	85 fd       	sbrc	r24, 5
 1a4:	05 c0       	rjmp	.+10     	; 0x1b0 <_ZN14HardwareSerial5flushEv+0x20>
 1a6:	a8 89       	ldd	r26, Y+16	; 0x10
 1a8:	b9 89       	ldd	r27, Y+17	; 0x11
 1aa:	8c 91       	ld	r24, X
 1ac:	86 fd       	sbrc	r24, 6
 1ae:	0f c0       	rjmp	.+30     	; 0x1ce <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	07 fc       	sbrc	r0, 7
 1b4:	f5 cf       	rjmp	.-22     	; 0x1a0 <_ZN14HardwareSerial5flushEv+0x10>
 1b6:	80 81       	ld	r24, Z
 1b8:	85 ff       	sbrs	r24, 5
 1ba:	f2 cf       	rjmp	.-28     	; 0x1a0 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 1bc:	a8 89       	ldd	r26, Y+16	; 0x10
 1be:	b9 89       	ldd	r27, Y+17	; 0x11
 1c0:	8c 91       	ld	r24, X
 1c2:	85 ff       	sbrs	r24, 5
 1c4:	ed cf       	rjmp	.-38     	; 0x1a0 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 1c6:	ce 01       	movw	r24, r28
 1c8:	0e 94 a7 00 	call	0x14e	; 0x14e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 1cc:	e7 cf       	rjmp	.-50     	; 0x19c <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

000001d4 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
 1d4:	ef 92       	push	r14
 1d6:	ff 92       	push	r15
 1d8:	0f 93       	push	r16
 1da:	1f 93       	push	r17
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	ec 01       	movw	r28, r24
  _written = true;
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 1e6:	9b 8d       	ldd	r25, Y+27	; 0x1b
 1e8:	8c 8d       	ldd	r24, Y+28	; 0x1c
 1ea:	98 13       	cpse	r25, r24
 1ec:	05 c0       	rjmp	.+10     	; 0x1f8 <_ZN14HardwareSerial5writeEh+0x24>
 1ee:	e8 89       	ldd	r30, Y+16	; 0x10
 1f0:	f9 89       	ldd	r31, Y+17	; 0x11
 1f2:	80 81       	ld	r24, Z
 1f4:	85 fd       	sbrc	r24, 5
 1f6:	24 c0       	rjmp	.+72     	; 0x240 <_ZN14HardwareSerial5writeEh+0x6c>
 1f8:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 1fa:	0b 8d       	ldd	r16, Y+27	; 0x1b
 1fc:	10 e0       	ldi	r17, 0x00	; 0
 1fe:	0f 5f       	subi	r16, 0xFF	; 255
 200:	1f 4f       	sbci	r17, 0xFF	; 255
 202:	0f 73       	andi	r16, 0x3F	; 63
 204:	11 27       	eor	r17, r17
 206:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 208:	8c 8d       	ldd	r24, Y+28	; 0x1c
 20a:	e8 12       	cpse	r14, r24
 20c:	0c c0       	rjmp	.+24     	; 0x226 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	07 fc       	sbrc	r0, 7
 212:	fa cf       	rjmp	.-12     	; 0x208 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 214:	e8 89       	ldd	r30, Y+16	; 0x10
 216:	f9 89       	ldd	r31, Y+17	; 0x11
 218:	80 81       	ld	r24, Z
 21a:	85 ff       	sbrs	r24, 5
 21c:	f5 cf       	rjmp	.-22     	; 0x208 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 21e:	ce 01       	movw	r24, r28
 220:	0e 94 a7 00 	call	0x14e	; 0x14e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 224:	f1 cf       	rjmp	.-30     	; 0x208 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 226:	8b 8d       	ldd	r24, Y+27	; 0x1b
 228:	fe 01       	movw	r30, r28
 22a:	e8 0f       	add	r30, r24
 22c:	f1 1d       	adc	r31, r1
 22e:	e3 5a       	subi	r30, 0xA3	; 163
 230:	ff 4f       	sbci	r31, 0xFF	; 255
 232:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 234:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 236:	ea 89       	ldd	r30, Y+18	; 0x12
 238:	fb 89       	ldd	r31, Y+19	; 0x13
 23a:	80 81       	ld	r24, Z
 23c:	80 62       	ori	r24, 0x20	; 32
 23e:	07 c0       	rjmp	.+14     	; 0x24e <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 240:	ee 89       	ldd	r30, Y+22	; 0x16
 242:	ff 89       	ldd	r31, Y+23	; 0x17
 244:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 246:	e8 89       	ldd	r30, Y+16	; 0x10
 248:	f9 89       	ldd	r31, Y+17	; 0x11
 24a:	80 81       	ld	r24, Z
 24c:	80 64       	ori	r24, 0x40	; 64
 24e:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	df 91       	pop	r29
 256:	cf 91       	pop	r28
 258:	1f 91       	pop	r17
 25a:	0f 91       	pop	r16
 25c:	ff 90       	pop	r15
 25e:	ef 90       	pop	r14
 260:	08 95       	ret

00000262 <__vector_18>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
 262:	1f 92       	push	r1
 264:	0f 92       	push	r0
 266:	0f b6       	in	r0, 0x3f	; 63
 268:	0f 92       	push	r0
 26a:	11 24       	eor	r1, r1
 26c:	2f 93       	push	r18
 26e:	8f 93       	push	r24
 270:	9f 93       	push	r25
 272:	ef 93       	push	r30
 274:	ff 93       	push	r31
 276:	e0 91 39 01 	lds	r30, 0x0139	; 0x800139 <Serial+0x10>
 27a:	f0 91 3a 01 	lds	r31, 0x013A	; 0x80013a <Serial+0x11>
 27e:	80 81       	ld	r24, Z
 280:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <Serial+0x16>
 284:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <Serial+0x17>
 288:	82 fd       	sbrc	r24, 2
 28a:	12 c0       	rjmp	.+36     	; 0x2b0 <__vector_18+0x4e>
 28c:	90 81       	ld	r25, Z
 28e:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Serial+0x19>
 292:	8f 5f       	subi	r24, 0xFF	; 255
 294:	8f 73       	andi	r24, 0x3F	; 63
 296:	20 91 43 01 	lds	r18, 0x0143	; 0x800143 <Serial+0x1a>
 29a:	82 17       	cp	r24, r18
 29c:	51 f0       	breq	.+20     	; 0x2b2 <__vector_18+0x50>
 29e:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <Serial+0x19>
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	e7 5d       	subi	r30, 0xD7	; 215
 2a6:	fe 4f       	sbci	r31, 0xFE	; 254
 2a8:	95 8f       	std	Z+29, r25	; 0x1d
 2aa:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <Serial+0x19>
 2ae:	01 c0       	rjmp	.+2      	; 0x2b2 <__vector_18+0x50>
 2b0:	80 81       	ld	r24, Z
 2b2:	ff 91       	pop	r31
 2b4:	ef 91       	pop	r30
 2b6:	9f 91       	pop	r25
 2b8:	8f 91       	pop	r24
 2ba:	2f 91       	pop	r18
 2bc:	0f 90       	pop	r0
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	0f 90       	pop	r0
 2c2:	1f 90       	pop	r1
 2c4:	18 95       	reti

000002c6 <__vector_19>:
 2c6:	1f 92       	push	r1
 2c8:	0f 92       	push	r0
 2ca:	0f b6       	in	r0, 0x3f	; 63
 2cc:	0f 92       	push	r0
 2ce:	11 24       	eor	r1, r1
 2d0:	2f 93       	push	r18
 2d2:	3f 93       	push	r19
 2d4:	4f 93       	push	r20
 2d6:	5f 93       	push	r21
 2d8:	6f 93       	push	r22
 2da:	7f 93       	push	r23
 2dc:	8f 93       	push	r24
 2de:	9f 93       	push	r25
 2e0:	af 93       	push	r26
 2e2:	bf 93       	push	r27
 2e4:	ef 93       	push	r30
 2e6:	ff 93       	push	r31
 2e8:	89 e2       	ldi	r24, 0x29	; 41
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	0e 94 a7 00 	call	0x14e	; 0x14e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 2f0:	ff 91       	pop	r31
 2f2:	ef 91       	pop	r30
 2f4:	bf 91       	pop	r27
 2f6:	af 91       	pop	r26
 2f8:	9f 91       	pop	r25
 2fa:	8f 91       	pop	r24
 2fc:	7f 91       	pop	r23
 2fe:	6f 91       	pop	r22
 300:	5f 91       	pop	r21
 302:	4f 91       	pop	r20
 304:	3f 91       	pop	r19
 306:	2f 91       	pop	r18
 308:	0f 90       	pop	r0
 30a:	0f be       	out	0x3f, r0	; 63
 30c:	0f 90       	pop	r0
 30e:	1f 90       	pop	r1
 310:	18 95       	reti

00000312 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 312:	e9 e2       	ldi	r30, 0x29	; 41
 314:	f1 e0       	ldi	r31, 0x01	; 1
 316:	13 82       	std	Z+3, r1	; 0x03
 318:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 31a:	88 ee       	ldi	r24, 0xE8	; 232
 31c:	93 e0       	ldi	r25, 0x03	; 3
 31e:	a0 e0       	ldi	r26, 0x00	; 0
 320:	b0 e0       	ldi	r27, 0x00	; 0
 322:	84 83       	std	Z+4, r24	; 0x04
 324:	95 83       	std	Z+5, r25	; 0x05
 326:	a6 83       	std	Z+6, r26	; 0x06
 328:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 32a:	8a e0       	ldi	r24, 0x0A	; 10
 32c:	91 e0       	ldi	r25, 0x01	; 1
 32e:	91 83       	std	Z+1, r25	; 0x01
 330:	80 83       	st	Z, r24
 332:	85 ec       	ldi	r24, 0xC5	; 197
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	95 87       	std	Z+13, r25	; 0x0d
 338:	84 87       	std	Z+12, r24	; 0x0c
 33a:	84 ec       	ldi	r24, 0xC4	; 196
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	97 87       	std	Z+15, r25	; 0x0f
 340:	86 87       	std	Z+14, r24	; 0x0e
 342:	80 ec       	ldi	r24, 0xC0	; 192
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	91 8b       	std	Z+17, r25	; 0x11
 348:	80 8b       	std	Z+16, r24	; 0x10
 34a:	81 ec       	ldi	r24, 0xC1	; 193
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	93 8b       	std	Z+19, r25	; 0x13
 350:	82 8b       	std	Z+18, r24	; 0x12
 352:	82 ec       	ldi	r24, 0xC2	; 194
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	95 8b       	std	Z+21, r25	; 0x15
 358:	84 8b       	std	Z+20, r24	; 0x14
 35a:	86 ec       	ldi	r24, 0xC6	; 198
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	97 8b       	std	Z+23, r25	; 0x17
 360:	86 8b       	std	Z+22, r24	; 0x16
 362:	11 8e       	std	Z+25, r1	; 0x19
 364:	12 8e       	std	Z+26, r1	; 0x1a
 366:	13 8e       	std	Z+27, r1	; 0x1b
 368:	14 8e       	std	Z+28, r1	; 0x1c
 36a:	08 95       	ret

0000036c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 36c:	cf 92       	push	r12
 36e:	df 92       	push	r13
 370:	ef 92       	push	r14
 372:	ff 92       	push	r15
 374:	0f 93       	push	r16
 376:	1f 93       	push	r17
 378:	cf 93       	push	r28
 37a:	df 93       	push	r29
 37c:	6c 01       	movw	r12, r24
 37e:	7a 01       	movw	r14, r20
 380:	8b 01       	movw	r16, r22
  size_t n = 0;
 382:	c0 e0       	ldi	r28, 0x00	; 0
 384:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
 386:	ce 15       	cp	r28, r14
 388:	df 05       	cpc	r29, r15
 38a:	89 f0       	breq	.+34     	; 0x3ae <_ZN5Print5writeEPKhj+0x42>
    if (write(*buffer++)) n++;
 38c:	d8 01       	movw	r26, r16
 38e:	6d 91       	ld	r22, X+
 390:	8d 01       	movw	r16, r26
 392:	d6 01       	movw	r26, r12
 394:	ed 91       	ld	r30, X+
 396:	fc 91       	ld	r31, X
 398:	01 90       	ld	r0, Z+
 39a:	f0 81       	ld	r31, Z
 39c:	e0 2d       	mov	r30, r0
 39e:	c6 01       	movw	r24, r12
 3a0:	09 95       	icall
 3a2:	89 2b       	or	r24, r25
 3a4:	11 f4       	brne	.+4      	; 0x3aa <_ZN5Print5writeEPKhj+0x3e>
 3a6:	7e 01       	movw	r14, r28
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <_ZN5Print5writeEPKhj+0x42>
 3aa:	21 96       	adiw	r28, 0x01	; 1
 3ac:	ec cf       	rjmp	.-40     	; 0x386 <_ZN5Print5writeEPKhj+0x1a>
    else break;
  }
  return n;
}
 3ae:	c7 01       	movw	r24, r14
 3b0:	df 91       	pop	r29
 3b2:	cf 91       	pop	r28
 3b4:	1f 91       	pop	r17
 3b6:	0f 91       	pop	r16
 3b8:	ff 90       	pop	r15
 3ba:	ef 90       	pop	r14
 3bc:	df 90       	pop	r13
 3be:	cf 90       	pop	r12
 3c0:	08 95       	ret

000003c2 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 3c2:	1f 92       	push	r1
 3c4:	0f 92       	push	r0
 3c6:	0f b6       	in	r0, 0x3f	; 63
 3c8:	0f 92       	push	r0
 3ca:	11 24       	eor	r1, r1
 3cc:	2f 93       	push	r18
 3ce:	3f 93       	push	r19
 3d0:	8f 93       	push	r24
 3d2:	9f 93       	push	r25
 3d4:	af 93       	push	r26
 3d6:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 3d8:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <timer0_millis>
 3dc:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <timer0_millis+0x1>
 3e0:	a0 91 c9 01 	lds	r26, 0x01C9	; 0x8001c9 <timer0_millis+0x2>
 3e4:	b0 91 ca 01 	lds	r27, 0x01CA	; 0x8001ca <timer0_millis+0x3>
	unsigned char f = timer0_fract;
 3e8:	30 91 c6 01 	lds	r19, 0x01C6	; 0x8001c6 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
 3ec:	23 e0       	ldi	r18, 0x03	; 3
 3ee:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
 3f0:	2d 37       	cpi	r18, 0x7D	; 125
 3f2:	20 f4       	brcc	.+8      	; 0x3fc <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
 3f4:	01 96       	adiw	r24, 0x01	; 1
 3f6:	a1 1d       	adc	r26, r1
 3f8:	b1 1d       	adc	r27, r1
 3fa:	05 c0       	rjmp	.+10     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
 3fc:	26 e8       	ldi	r18, 0x86	; 134
 3fe:	23 0f       	add	r18, r19
		m += 1;
 400:	02 96       	adiw	r24, 0x02	; 2
 402:	a1 1d       	adc	r26, r1
 404:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 406:	20 93 c6 01 	sts	0x01C6, r18	; 0x8001c6 <timer0_fract>
	timer0_millis = m;
 40a:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <timer0_millis>
 40e:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <timer0_millis+0x1>
 412:	a0 93 c9 01 	sts	0x01C9, r26	; 0x8001c9 <timer0_millis+0x2>
 416:	b0 93 ca 01 	sts	0x01CA, r27	; 0x8001ca <timer0_millis+0x3>
	timer0_overflow_count++;
 41a:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <timer0_overflow_count>
 41e:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <timer0_overflow_count+0x1>
 422:	a0 91 cd 01 	lds	r26, 0x01CD	; 0x8001cd <timer0_overflow_count+0x2>
 426:	b0 91 ce 01 	lds	r27, 0x01CE	; 0x8001ce <timer0_overflow_count+0x3>
 42a:	01 96       	adiw	r24, 0x01	; 1
 42c:	a1 1d       	adc	r26, r1
 42e:	b1 1d       	adc	r27, r1
 430:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <timer0_overflow_count>
 434:	90 93 cc 01 	sts	0x01CC, r25	; 0x8001cc <timer0_overflow_count+0x1>
 438:	a0 93 cd 01 	sts	0x01CD, r26	; 0x8001cd <timer0_overflow_count+0x2>
 43c:	b0 93 ce 01 	sts	0x01CE, r27	; 0x8001ce <timer0_overflow_count+0x3>
}
 440:	bf 91       	pop	r27
 442:	af 91       	pop	r26
 444:	9f 91       	pop	r25
 446:	8f 91       	pop	r24
 448:	3f 91       	pop	r19
 44a:	2f 91       	pop	r18
 44c:	0f 90       	pop	r0
 44e:	0f be       	out	0x3f, r0	; 63
 450:	0f 90       	pop	r0
 452:	1f 90       	pop	r1
 454:	18 95       	reti

00000456 <_ZN10MD_MAX72XXC1Ehh>:
#if USE_LOCAL_FONT && USE_FONT_INDEX
	_fontIndex = NULL;
#endif
}

MD_MAX72XX::MD_MAX72XX(uint8_t csPin, uint8_t numDevices):
 456:	fc 01       	movw	r30, r24
_dataPin(0), _clkPin(0), _csPin(csPin), _maxDevices(numDevices),
_updateEnabled(true)
 458:	10 82       	st	Z, r1
 45a:	11 82       	std	Z+1, r1	; 0x01
 45c:	62 83       	std	Z+2, r22	; 0x02
 45e:	44 83       	std	Z+4, r20	; 0x04
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	85 87       	std	Z+13, r24	; 0x0d
{
	_hardwareSPI = true;
 464:	83 83       	std	Z+3, r24	; 0x03
 466:	08 95       	ret

00000468 <_ZN10MD_MAX72XXD1Ev>:
  control(DECODE, OFF);				// make sure that no decoding happens (warm boot potential issue)
  clear();
  control(SHUTDOWN, OFF);			// take the modules out of shutdown mode
}

MD_MAX72XX::~MD_MAX72XX(void)
 468:	cf 93       	push	r28
 46a:	df 93       	push	r29
 46c:	ec 01       	movw	r28, r24
{
	if (_hardwareSPI) SPCR &= ~_BV(SPE);	// reset SPI mode
 46e:	8b 81       	ldd	r24, Y+3	; 0x03
 470:	88 23       	and	r24, r24
 472:	19 f0       	breq	.+6      	; 0x47a <_ZN10MD_MAX72XXD1Ev+0x12>
 474:	8c b5       	in	r24, 0x2c	; 44
 476:	8f 7b       	andi	r24, 0xBF	; 191
 478:	8c bd       	out	0x2c, r24	; 44

	free(_matrix);
 47a:	8d 81       	ldd	r24, Y+5	; 0x05
 47c:	9e 81       	ldd	r25, Y+6	; 0x06
 47e:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <free>
	free(_spiData);
 482:	8f 81       	ldd	r24, Y+7	; 0x07
 484:	98 85       	ldd	r25, Y+8	; 0x08
#if USE_LOCAL_FONT && USE_FONT_INDEX
	if (_fontIndex != NULL) free(_fontIndex);
#endif
}
 486:	df 91       	pop	r29
 488:	cf 91       	pop	r28
MD_MAX72XX::~MD_MAX72XX(void)
{
	if (_hardwareSPI) SPCR &= ~_BV(SPE);	// reset SPI mode

	free(_matrix);
	free(_spiData);
 48a:	0c 94 e2 02 	jmp	0x5c4	; 0x5c4 <free>

0000048e <__tablejump2__>:
 48e:	ee 0f       	add	r30, r30
 490:	ff 1f       	adc	r31, r31
 492:	05 90       	lpm	r0, Z+
 494:	f4 91       	lpm	r31, Z
 496:	e0 2d       	mov	r30, r0
 498:	09 94       	ijmp

0000049a <malloc>:
 49a:	cf 93       	push	r28
 49c:	df 93       	push	r29
 49e:	82 30       	cpi	r24, 0x02	; 2
 4a0:	91 05       	cpc	r25, r1
 4a2:	10 f4       	brcc	.+4      	; 0x4a8 <malloc+0xe>
 4a4:	82 e0       	ldi	r24, 0x02	; 2
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <__flp>
 4ac:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <__flp+0x1>
 4b0:	20 e0       	ldi	r18, 0x00	; 0
 4b2:	30 e0       	ldi	r19, 0x00	; 0
 4b4:	c0 e0       	ldi	r28, 0x00	; 0
 4b6:	d0 e0       	ldi	r29, 0x00	; 0
 4b8:	30 97       	sbiw	r30, 0x00	; 0
 4ba:	11 f1       	breq	.+68     	; 0x500 <malloc+0x66>
 4bc:	40 81       	ld	r20, Z
 4be:	51 81       	ldd	r21, Z+1	; 0x01
 4c0:	48 17       	cp	r20, r24
 4c2:	59 07       	cpc	r21, r25
 4c4:	c0 f0       	brcs	.+48     	; 0x4f6 <malloc+0x5c>
 4c6:	48 17       	cp	r20, r24
 4c8:	59 07       	cpc	r21, r25
 4ca:	61 f4       	brne	.+24     	; 0x4e4 <malloc+0x4a>
 4cc:	82 81       	ldd	r24, Z+2	; 0x02
 4ce:	93 81       	ldd	r25, Z+3	; 0x03
 4d0:	20 97       	sbiw	r28, 0x00	; 0
 4d2:	19 f0       	breq	.+6      	; 0x4da <malloc+0x40>
 4d4:	9b 83       	std	Y+3, r25	; 0x03
 4d6:	8a 83       	std	Y+2, r24	; 0x02
 4d8:	2b c0       	rjmp	.+86     	; 0x530 <malloc+0x96>
 4da:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <__flp+0x1>
 4de:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <__flp>
 4e2:	26 c0       	rjmp	.+76     	; 0x530 <malloc+0x96>
 4e4:	21 15       	cp	r18, r1
 4e6:	31 05       	cpc	r19, r1
 4e8:	19 f0       	breq	.+6      	; 0x4f0 <malloc+0x56>
 4ea:	42 17       	cp	r20, r18
 4ec:	53 07       	cpc	r21, r19
 4ee:	18 f4       	brcc	.+6      	; 0x4f6 <malloc+0x5c>
 4f0:	9a 01       	movw	r18, r20
 4f2:	be 01       	movw	r22, r28
 4f4:	df 01       	movw	r26, r30
 4f6:	ef 01       	movw	r28, r30
 4f8:	02 80       	ldd	r0, Z+2	; 0x02
 4fa:	f3 81       	ldd	r31, Z+3	; 0x03
 4fc:	e0 2d       	mov	r30, r0
 4fe:	dc cf       	rjmp	.-72     	; 0x4b8 <malloc+0x1e>
 500:	21 15       	cp	r18, r1
 502:	31 05       	cpc	r19, r1
 504:	09 f1       	breq	.+66     	; 0x548 <malloc+0xae>
 506:	28 1b       	sub	r18, r24
 508:	39 0b       	sbc	r19, r25
 50a:	24 30       	cpi	r18, 0x04	; 4
 50c:	31 05       	cpc	r19, r1
 50e:	90 f4       	brcc	.+36     	; 0x534 <malloc+0x9a>
 510:	12 96       	adiw	r26, 0x02	; 2
 512:	8d 91       	ld	r24, X+
 514:	9c 91       	ld	r25, X
 516:	13 97       	sbiw	r26, 0x03	; 3
 518:	61 15       	cp	r22, r1
 51a:	71 05       	cpc	r23, r1
 51c:	21 f0       	breq	.+8      	; 0x526 <malloc+0x8c>
 51e:	fb 01       	movw	r30, r22
 520:	93 83       	std	Z+3, r25	; 0x03
 522:	82 83       	std	Z+2, r24	; 0x02
 524:	04 c0       	rjmp	.+8      	; 0x52e <malloc+0x94>
 526:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <__flp+0x1>
 52a:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <__flp>
 52e:	fd 01       	movw	r30, r26
 530:	32 96       	adiw	r30, 0x02	; 2
 532:	44 c0       	rjmp	.+136    	; 0x5bc <malloc+0x122>
 534:	fd 01       	movw	r30, r26
 536:	e2 0f       	add	r30, r18
 538:	f3 1f       	adc	r31, r19
 53a:	81 93       	st	Z+, r24
 53c:	91 93       	st	Z+, r25
 53e:	22 50       	subi	r18, 0x02	; 2
 540:	31 09       	sbc	r19, r1
 542:	2d 93       	st	X+, r18
 544:	3c 93       	st	X, r19
 546:	3a c0       	rjmp	.+116    	; 0x5bc <malloc+0x122>
 548:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__brkval>
 54c:	30 91 d0 01 	lds	r19, 0x01D0	; 0x8001d0 <__brkval+0x1>
 550:	23 2b       	or	r18, r19
 552:	41 f4       	brne	.+16     	; 0x564 <malloc+0xca>
 554:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 558:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 55c:	30 93 d0 01 	sts	0x01D0, r19	; 0x8001d0 <__brkval+0x1>
 560:	20 93 cf 01 	sts	0x01CF, r18	; 0x8001cf <__brkval>
 564:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 568:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 56c:	21 15       	cp	r18, r1
 56e:	31 05       	cpc	r19, r1
 570:	41 f4       	brne	.+16     	; 0x582 <malloc+0xe8>
 572:	2d b7       	in	r18, 0x3d	; 61
 574:	3e b7       	in	r19, 0x3e	; 62
 576:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 57a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 57e:	24 1b       	sub	r18, r20
 580:	35 0b       	sbc	r19, r21
 582:	e0 91 cf 01 	lds	r30, 0x01CF	; 0x8001cf <__brkval>
 586:	f0 91 d0 01 	lds	r31, 0x01D0	; 0x8001d0 <__brkval+0x1>
 58a:	e2 17       	cp	r30, r18
 58c:	f3 07       	cpc	r31, r19
 58e:	a0 f4       	brcc	.+40     	; 0x5b8 <malloc+0x11e>
 590:	2e 1b       	sub	r18, r30
 592:	3f 0b       	sbc	r19, r31
 594:	28 17       	cp	r18, r24
 596:	39 07       	cpc	r19, r25
 598:	78 f0       	brcs	.+30     	; 0x5b8 <malloc+0x11e>
 59a:	ac 01       	movw	r20, r24
 59c:	4e 5f       	subi	r20, 0xFE	; 254
 59e:	5f 4f       	sbci	r21, 0xFF	; 255
 5a0:	24 17       	cp	r18, r20
 5a2:	35 07       	cpc	r19, r21
 5a4:	48 f0       	brcs	.+18     	; 0x5b8 <malloc+0x11e>
 5a6:	4e 0f       	add	r20, r30
 5a8:	5f 1f       	adc	r21, r31
 5aa:	50 93 d0 01 	sts	0x01D0, r21	; 0x8001d0 <__brkval+0x1>
 5ae:	40 93 cf 01 	sts	0x01CF, r20	; 0x8001cf <__brkval>
 5b2:	81 93       	st	Z+, r24
 5b4:	91 93       	st	Z+, r25
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <malloc+0x122>
 5b8:	e0 e0       	ldi	r30, 0x00	; 0
 5ba:	f0 e0       	ldi	r31, 0x00	; 0
 5bc:	cf 01       	movw	r24, r30
 5be:	df 91       	pop	r29
 5c0:	cf 91       	pop	r28
 5c2:	08 95       	ret

000005c4 <free>:
 5c4:	0f 93       	push	r16
 5c6:	1f 93       	push	r17
 5c8:	cf 93       	push	r28
 5ca:	df 93       	push	r29
 5cc:	00 97       	sbiw	r24, 0x00	; 0
 5ce:	09 f4       	brne	.+2      	; 0x5d2 <free+0xe>
 5d0:	8c c0       	rjmp	.+280    	; 0x6ea <free+0x126>
 5d2:	fc 01       	movw	r30, r24
 5d4:	32 97       	sbiw	r30, 0x02	; 2
 5d6:	13 82       	std	Z+3, r1	; 0x03
 5d8:	12 82       	std	Z+2, r1	; 0x02
 5da:	00 91 d1 01 	lds	r16, 0x01D1	; 0x8001d1 <__flp>
 5de:	10 91 d2 01 	lds	r17, 0x01D2	; 0x8001d2 <__flp+0x1>
 5e2:	01 15       	cp	r16, r1
 5e4:	11 05       	cpc	r17, r1
 5e6:	81 f4       	brne	.+32     	; 0x608 <free+0x44>
 5e8:	20 81       	ld	r18, Z
 5ea:	31 81       	ldd	r19, Z+1	; 0x01
 5ec:	82 0f       	add	r24, r18
 5ee:	93 1f       	adc	r25, r19
 5f0:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__brkval>
 5f4:	30 91 d0 01 	lds	r19, 0x01D0	; 0x8001d0 <__brkval+0x1>
 5f8:	28 17       	cp	r18, r24
 5fa:	39 07       	cpc	r19, r25
 5fc:	79 f5       	brne	.+94     	; 0x65c <free+0x98>
 5fe:	f0 93 d0 01 	sts	0x01D0, r31	; 0x8001d0 <__brkval+0x1>
 602:	e0 93 cf 01 	sts	0x01CF, r30	; 0x8001cf <__brkval>
 606:	71 c0       	rjmp	.+226    	; 0x6ea <free+0x126>
 608:	d8 01       	movw	r26, r16
 60a:	40 e0       	ldi	r20, 0x00	; 0
 60c:	50 e0       	ldi	r21, 0x00	; 0
 60e:	ae 17       	cp	r26, r30
 610:	bf 07       	cpc	r27, r31
 612:	50 f4       	brcc	.+20     	; 0x628 <free+0x64>
 614:	12 96       	adiw	r26, 0x02	; 2
 616:	2d 91       	ld	r18, X+
 618:	3c 91       	ld	r19, X
 61a:	13 97       	sbiw	r26, 0x03	; 3
 61c:	ad 01       	movw	r20, r26
 61e:	21 15       	cp	r18, r1
 620:	31 05       	cpc	r19, r1
 622:	09 f1       	breq	.+66     	; 0x666 <free+0xa2>
 624:	d9 01       	movw	r26, r18
 626:	f3 cf       	rjmp	.-26     	; 0x60e <free+0x4a>
 628:	9d 01       	movw	r18, r26
 62a:	da 01       	movw	r26, r20
 62c:	33 83       	std	Z+3, r19	; 0x03
 62e:	22 83       	std	Z+2, r18	; 0x02
 630:	60 81       	ld	r22, Z
 632:	71 81       	ldd	r23, Z+1	; 0x01
 634:	86 0f       	add	r24, r22
 636:	97 1f       	adc	r25, r23
 638:	82 17       	cp	r24, r18
 63a:	93 07       	cpc	r25, r19
 63c:	69 f4       	brne	.+26     	; 0x658 <free+0x94>
 63e:	ec 01       	movw	r28, r24
 640:	28 81       	ld	r18, Y
 642:	39 81       	ldd	r19, Y+1	; 0x01
 644:	26 0f       	add	r18, r22
 646:	37 1f       	adc	r19, r23
 648:	2e 5f       	subi	r18, 0xFE	; 254
 64a:	3f 4f       	sbci	r19, 0xFF	; 255
 64c:	31 83       	std	Z+1, r19	; 0x01
 64e:	20 83       	st	Z, r18
 650:	8a 81       	ldd	r24, Y+2	; 0x02
 652:	9b 81       	ldd	r25, Y+3	; 0x03
 654:	93 83       	std	Z+3, r25	; 0x03
 656:	82 83       	std	Z+2, r24	; 0x02
 658:	45 2b       	or	r20, r21
 65a:	29 f4       	brne	.+10     	; 0x666 <free+0xa2>
 65c:	f0 93 d2 01 	sts	0x01D2, r31	; 0x8001d2 <__flp+0x1>
 660:	e0 93 d1 01 	sts	0x01D1, r30	; 0x8001d1 <__flp>
 664:	42 c0       	rjmp	.+132    	; 0x6ea <free+0x126>
 666:	13 96       	adiw	r26, 0x03	; 3
 668:	fc 93       	st	X, r31
 66a:	ee 93       	st	-X, r30
 66c:	12 97       	sbiw	r26, 0x02	; 2
 66e:	ed 01       	movw	r28, r26
 670:	49 91       	ld	r20, Y+
 672:	59 91       	ld	r21, Y+
 674:	9e 01       	movw	r18, r28
 676:	24 0f       	add	r18, r20
 678:	35 1f       	adc	r19, r21
 67a:	e2 17       	cp	r30, r18
 67c:	f3 07       	cpc	r31, r19
 67e:	71 f4       	brne	.+28     	; 0x69c <free+0xd8>
 680:	80 81       	ld	r24, Z
 682:	91 81       	ldd	r25, Z+1	; 0x01
 684:	84 0f       	add	r24, r20
 686:	95 1f       	adc	r25, r21
 688:	02 96       	adiw	r24, 0x02	; 2
 68a:	11 96       	adiw	r26, 0x01	; 1
 68c:	9c 93       	st	X, r25
 68e:	8e 93       	st	-X, r24
 690:	82 81       	ldd	r24, Z+2	; 0x02
 692:	93 81       	ldd	r25, Z+3	; 0x03
 694:	13 96       	adiw	r26, 0x03	; 3
 696:	9c 93       	st	X, r25
 698:	8e 93       	st	-X, r24
 69a:	12 97       	sbiw	r26, 0x02	; 2
 69c:	e0 e0       	ldi	r30, 0x00	; 0
 69e:	f0 e0       	ldi	r31, 0x00	; 0
 6a0:	d8 01       	movw	r26, r16
 6a2:	12 96       	adiw	r26, 0x02	; 2
 6a4:	8d 91       	ld	r24, X+
 6a6:	9c 91       	ld	r25, X
 6a8:	13 97       	sbiw	r26, 0x03	; 3
 6aa:	00 97       	sbiw	r24, 0x00	; 0
 6ac:	19 f0       	breq	.+6      	; 0x6b4 <free+0xf0>
 6ae:	f8 01       	movw	r30, r16
 6b0:	8c 01       	movw	r16, r24
 6b2:	f6 cf       	rjmp	.-20     	; 0x6a0 <free+0xdc>
 6b4:	8d 91       	ld	r24, X+
 6b6:	9c 91       	ld	r25, X
 6b8:	98 01       	movw	r18, r16
 6ba:	2e 5f       	subi	r18, 0xFE	; 254
 6bc:	3f 4f       	sbci	r19, 0xFF	; 255
 6be:	82 0f       	add	r24, r18
 6c0:	93 1f       	adc	r25, r19
 6c2:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__brkval>
 6c6:	30 91 d0 01 	lds	r19, 0x01D0	; 0x8001d0 <__brkval+0x1>
 6ca:	28 17       	cp	r18, r24
 6cc:	39 07       	cpc	r19, r25
 6ce:	69 f4       	brne	.+26     	; 0x6ea <free+0x126>
 6d0:	30 97       	sbiw	r30, 0x00	; 0
 6d2:	29 f4       	brne	.+10     	; 0x6de <free+0x11a>
 6d4:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <__flp+0x1>
 6d8:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <__flp>
 6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <free+0x11e>
 6de:	13 82       	std	Z+3, r1	; 0x03
 6e0:	12 82       	std	Z+2, r1	; 0x02
 6e2:	10 93 d0 01 	sts	0x01D0, r17	; 0x8001d0 <__brkval+0x1>
 6e6:	00 93 cf 01 	sts	0x01CF, r16	; 0x8001cf <__brkval>
 6ea:	df 91       	pop	r29
 6ec:	cf 91       	pop	r28
 6ee:	1f 91       	pop	r17
 6f0:	0f 91       	pop	r16
 6f2:	08 95       	ret

000006f4 <__do_global_dtors>:
 6f4:	10 e0       	ldi	r17, 0x00	; 0
 6f6:	c6 e3       	ldi	r28, 0x36	; 54
 6f8:	d0 e0       	ldi	r29, 0x00	; 0
 6fa:	04 c0       	rjmp	.+8      	; 0x704 <__do_global_dtors+0x10>
 6fc:	fe 01       	movw	r30, r28
 6fe:	0e 94 47 02 	call	0x48e	; 0x48e <__tablejump2__>
 702:	21 96       	adiw	r28, 0x01	; 1
 704:	c7 33       	cpi	r28, 0x37	; 55
 706:	d1 07       	cpc	r29, r17
 708:	c9 f7       	brne	.-14     	; 0x6fc <__do_global_dtors+0x8>
 70a:	f8 94       	cli

0000070c <__stop_program>:
 70c:	ff cf       	rjmp	.-2      	; 0x70c <__stop_program>
