
DataLogger1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000300c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  0000300c  000030a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002be  00800080  00800080  000030c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000030c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000030f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  0000312c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003ae6  00000000  00000000  000032fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000912  00000000  00000000  00006de2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000021b1  00000000  00000000  000076f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000744  00000000  00000000  000098a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001080  00000000  00000000  00009fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000372b  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  0000e797  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 91 02 	jmp	0x522	; 0x522 <__ctors_end>
       4:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
       8:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
       c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      10:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      14:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      18:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      1c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      20:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      24:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      28:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      2c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      30:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      34:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      38:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      3c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      40:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      44:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      48:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      4c:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      50:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__bad_interrupt>
      54:	b0 05       	cpc	r27, r0
      56:	b5 05       	cpc	r27, r5
      58:	ba 05       	cpc	r27, r10
      5a:	bf 05       	cpc	r27, r15
      5c:	c4 05       	cpc	r28, r4
      5e:	c9 05       	cpc	r28, r9
      60:	ce 05       	cpc	r28, r14
      62:	19 15       	cp	r17, r9
      64:	1e 15       	cp	r17, r14
      66:	23 15       	cp	r18, r3
      68:	26 15       	cp	r18, r6
      6a:	29 15       	cp	r18, r9
      6c:	35 15       	cp	r19, r5
      6e:	35 15       	cp	r19, r5

00000070 <__trampolines_end>:
      70:	0a 0d       	add	r16, r10
      72:	0a 0d       	add	r16, r10
      74:	20 49       	sbci	r18, 0x90	; 144
      76:	6e 76       	andi	r22, 0x6E	; 110
      78:	61 6c       	ori	r22, 0xC1	; 193
      7a:	69 64       	ori	r22, 0x49	; 73
      7c:	20 6f       	ori	r18, 0xF0	; 240
      7e:	70 74       	andi	r23, 0x40	; 64
      80:	69 6f       	ori	r22, 0xF9	; 249
      82:	6e 21       	and	r22, r14
      84:	0a 0d       	add	r16, r10
	...

00000087 <_ZZ4mainE3__c_20>:
      87:	46 69 6c 65 20 64 6f 65 73 20 6e 6f 74 20 65 78     File does not ex
      97:	69 73 74 2e 2e 00                                   ist...

0000009d <_ZZ4mainE3__c_19>:
      9d:	20 66 69 6c 65 20 6e 61 6d 65 20 74 6f 6f 20 6c      file name too l
      ad:	6f 6e 67 2e 2e 00                                   ong...

000000b3 <_ZZ4mainE3__c_18>:
      b3:	0a 0d 45 6e 74 65 72 20 66 69 6c 65 20 6e 61 6d     ..Enter file nam
      c3:	65 3a 20 00                                         e: .

000000c7 <_ZZ4mainE3__c_17>:
      c7:	0a 0d 4e 6f 72 6d 61 6c 20 6f 70 65 72 61 74 69     ..Normal operati
      d7:	6f 6e 20 73 74 61 72 74 65 64 2e 2e 00              on started...

000000e4 <_ZZ4mainE3__c_16>:
      e4:	0a 0d 0a 0d 3e 20 45 6e 74 65 72 20 74 68 65 20     ....> Enter the 
      f4:	6f 70 74 69 6f 6e 3a 00                             option:.

000000fc <_ZZ4mainE3__c_15>:
      fc:	0a 0d 3e 20 36 20 3a 20 44 65 6c 65 74 65 20 46     ..> 6 : Delete F
     10c:	69 6c 65 00                                         ile.

00000110 <_ZZ4mainE3__c_14>:
     110:	0a 0d 3e 20 35 20 3a 20 52 65 61 64 20 46 69 6c     ..> 5 : Read Fil
     120:	65 00                                               e.

00000122 <_ZZ4mainE3__c_13>:
     122:	0a 0d 3e 20 34 20 3a 20 47 65 74 20 66 69 6c 65     ..> 4 : Get file
     132:	20 6c 69 73 74 00                                    list.

00000138 <_ZZ4mainE3__c_12>:
     138:	0a 0d 3e 20 33 20 3a 20 55 70 64 61 74 65 20 54     ..> 3 : Update T
     148:	69 6d 65 00                                         ime.

0000014c <_ZZ4mainE3__c_11>:
     14c:	0a 0d 3e 20 32 20 3a 20 55 70 64 61 74 65 20 44     ..> 2 : Update D
     15c:	61 74 65 00                                         ate.

00000160 <_ZZ4mainE3__c_10>:
     160:	0a 0d 3e 20 31 20 3a 20 44 69 73 70 6c 61 79 20     ..> 1 : Display 
     170:	63 75 72 72 65 6e 74 20 44 61 74 65 2f 54 69 6d     current Date/Tim
     180:	65 00                                               e.

00000182 <_ZZ4mainE3__c_9>:
     182:	0a 0d 0a 0d 3e 20 30 20 3a 20 45 78 69 74 20 74     ....> 0 : Exit t
     192:	68 65 20 4d 65 6e 75 00                             he Menu.

0000019a <_ZZ4mainE3__c_8>:
     19a:	0a 0d 46 41 54 33 32 20 6e 6f 74 20 66 6f 75 6e     ..FAT32 not foun
     1aa:	64 21 00                                            d!.

000001ad <_ZZ4mainE3__c_7>:
     1ad:	55 6e 6b 6e 6f 77 6e 20 53 44 20 43 61 72 64 20     Unknown SD Card 
     1bd:	44 65 74 65 63 74 65 64 21 00                       Detected!.

000001c7 <_ZZ4mainE3__c_6>:
     1c7:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
     1d7:	79 20 43 61 72 64 20 28 56 65 72 20 32 2e 78 29     y Card (Ver 2.x)
     1e7:	20 44 65 74 65 63 74 65 64 21 00                     Detected!.

000001f2 <_ZZ4mainE3__c_5>:
     1f2:	48 69 67 68 20 43 61 70 61 63 69 74 79 20 43 61     High Capacity Ca
     202:	72 64 20 44 65 74 65 63 74 65 64 21 00              rd Detected!.

0000020f <_ZZ4mainE3__c_4>:
     20f:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
     21f:	79 20 43 61 72 64 20 28 56 65 72 20 31 2e 78 29     y Card (Ver 1.x)
     22f:	20 44 65 74 65 63 74 65 64 21 00                     Detected!.

0000023a <_ZZ4mainE3__c_3>:
     23a:	43 61 72 64 20 49 6e 69 74 69 61 6c 69 7a 61 74     Card Initializat
     24a:	69 6f 6e 20 66 61 69 6c 65 64 2e 2e 00              ion failed...

00000257 <_ZZ4mainE3__c_2>:
     257:	53 44 20 63 61 72 64 20 6e 6f 74 20 64 65 74 65     SD card not dete
     267:	63 74 65 64 2e 2e 00                                cted...

0000026e <_ZZ4mainE3__c_1>:
     26e:	0a 0d 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ..**************
     27e:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     28e:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     29e:	2a 2a 2a 2a 2a 2a 0a 0d 00                          ******...

000002a7 <_ZZ4mainE3__c_0>:
     2a7:	0a 0d 20 20 20 20 20 20 20 20 20 6d 69 63 72 6f     ..         micro
     2b7:	53 44 20 44 61 74 61 6c 6f 67 67 65 72 20 2d 20     SD Datalogger - 
     2c7:	45 6d 61 6e 63 69 70 61 74 6f 72 20 00              Emancipator .

000002d4 <_ZZ4mainE3__c>:
     2d4:	0a 0d 0a 0d 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ....************
     2e4:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     2f4:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     304:	2a 2a 2a 2a 2a 2a 2a 2a 00                          ********.

0000030d <_ZZ9writeFilePhE3__c_2>:
     30d:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     31d:	20 63 6c 75 73 74 65 72 00                           cluster.

00000326 <_ZZ9writeFilePhE3__c_1>:
     326:	45 6e 64 20 6f 66 20 43 6c 75 73 74 65 72 20 43     End of Cluster C
     336:	68 61 69 6e 00                                      hain.

0000033b <_ZZ9writeFilePhE3__c_0>:
     33b:	20 4e 6f 20 66 72 65 65 20 63 6c 75 73 74 65 72      No free cluster
     34b:	21 00                                               !.

0000034d <_ZZ9writeFilePhE3__c>:
     34d:	20 4e 6f 20 66 72 65 65 20 63 6c 75 73 74 65 72      No free cluster
     35d:	21 00                                               !.

0000035f <_ZZ15convertFileNamePhE3__c>:
     35f:	49 6e 76 61 6c 69 64 20 66 69 6c 65 4e 61 6d 65     Invalid fileName
     36f:	2e 2e 00                                            ...

00000372 <_ZZ8readFilehPhE3__c>:
     372:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     382:	20 63 6c 75 73 74 65 72 00                           cluster.

0000038b <_ZZ9findFileshPhE3__c_7>:
     38b:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     39b:	20 63 6c 75 73 74 65 72 00                           cluster.

000003a4 <_ZZ9findFileshPhE3__c_6>:
     3a4:	52 4f 4f 54 00                                      ROOT.

000003a9 <_ZZ9findFileshPhE3__c_5>:
     3a9:	44 49 52 00                                         DIR.

000003ad <_ZZ9findFileshPhE3__c_4>:
     3ad:	20 20 20 00                                            .

000003b1 <_ZZ9findFileshPhE3__c_3>:
     3b1:	46 49 4c 45 00                                      FILE.

000003b6 <_ZZ9findFileshPhE3__c_2>:
     3b6:	20 20 20 00                                            .

000003ba <_ZZ9findFileshPhE3__c_1>:
     3ba:	46 69 6c 65 20 64 65 6c 65 74 65 64 21 00           File deleted!.

000003c8 <_ZZ9findFileshPhE3__c_0>:
     3c8:	44 65 6c 65 74 69 6e 67 2e 2e 00                    Deleting...

000003d3 <_ZZ9findFileshPhE3__c>:
     3d3:	46 69 6c 65 20 64 6f 65 73 20 6e 6f 74 20 65 78     File does not ex
     3e3:	69 73 74 21 00                                      ist!.

000003e8 <_ZZ14RTC_updateDatevE3__c_3>:
     3e8:	49 6e 76 61 6c 69 64 20 45 6e 74 72 79 2e 2e 00     Invalid Entry...

000003f8 <_ZZ14RTC_updateDatevE3__c_2>:
     3f8:	44 61 74 65 20 55 70 64 61 74 65 20 46 61 69 6c     Date Update Fail
     408:	65 64 2e 2e 00                                      ed...

0000040d <_ZZ14RTC_updateDatevE3__c_1>:
     40d:	44 61 74 65 20 55 70 64 61 74 65 64 20 73 75 63     Date Updated suc
     41d:	65 73 73 66 75 6c 6c 79 21 00                       essfully!.

00000427 <_ZZ14RTC_updateDatevE3__c_0>:
     427:	45 6e 74 65 72 20 44 61 79 20 28 53 75 6e 64 61     Enter Day (Sunda
     437:	79 3a 30 2c 20 4d 6f 6e 64 61 79 3a 31 2e 2e 2e     y:0, Monday:1...
     447:	29 20 28 30 2d 36 29 3a 00                          ) (0-6):.

00000450 <_ZZ14RTC_updateDatevE3__c>:
     450:	45 6e 74 65 72 20 44 61 74 65 20 28 64 64 2f 6d     Enter Date (dd/m
     460:	6d 2f 79 79 29 3a 00                                m/yy):.

00000467 <_ZZ14RTC_updateTimevE3__c_2>:
     467:	49 6e 76 61 6c 69 64 20 45 6e 74 72 79 2e 2e 00     Invalid Entry...

00000477 <_ZZ14RTC_updateTimevE3__c_1>:
     477:	54 69 6d 65 20 55 70 64 61 74 65 20 46 61 69 6c     Time Update Fail
     487:	65 64 2e 2e 00                                      ed...

0000048c <_ZZ14RTC_updateTimevE3__c_0>:
     48c:	54 69 6d 65 20 55 70 64 61 74 65 64 20 73 75 63     Time Updated suc
     49c:	65 73 73 66 75 6c 6c 79 21 00                       essfully!.

000004a6 <_ZZ14RTC_updateTimevE3__c>:
     4a6:	45 6e 74 65 72 20 54 69 6d 65 20 69 6e 20 32 34     Enter Time in 24
     4b6:	68 20 66 6f 72 6d 61 74 28 68 68 3a 6d 6d 3a 73     h format(hh:mm:s
     4c6:	73 29 3a 00                                         s):.

000004ca <_ZZ14RTC_displayDayvE3__c_7>:
     4ca:	55 6e 6b 6e 6f 77 6e 00                             Unknown.

000004d2 <_ZZ14RTC_displayDayvE3__c_6>:
     4d2:	53 61 74 75 72 64 61 79 00                          Saturday.

000004db <_ZZ14RTC_displayDayvE3__c_5>:
     4db:	46 72 69 64 61 79 00                                Friday.

000004e2 <_ZZ14RTC_displayDayvE3__c_4>:
     4e2:	54 68 75 72 73 64 61 79 00                          Thursday.

000004eb <_ZZ14RTC_displayDayvE3__c_3>:
     4eb:	57 65 64 6e 65 73 64 61 79 00                       Wednesday.

000004f5 <_ZZ14RTC_displayDayvE3__c_2>:
     4f5:	54 75 65 73 64 61 79 00                             Tuesday.

000004fd <_ZZ14RTC_displayDayvE3__c_1>:
     4fd:	4d 6f 6e 64 61 79 00                                Monday.

00000504 <_ZZ14RTC_displayDayvE3__c_0>:
     504:	53 75 6e 64 61 79 00                                Sunday.

0000050b <_ZZ14RTC_displayDayvE3__c>:
     50b:	20 20 20 20 44 61 79 3a 20 00                           Day: .

00000515 <_ZZ15RTC_displayDatevE3__c>:
     515:	44 61 74 65 3a 00                                   Date:.

0000051b <_ZZ15RTC_displayTimevE3__c>:
     51b:	54 69 6d 65 3a 00 00                                Time:..

00000522 <__ctors_end>:
     522:	11 24       	eor	r1, r1
     524:	1f be       	out	0x3f, r1	; 63
     526:	cf e5       	ldi	r28, 0x5F	; 95
     528:	d4 e0       	ldi	r29, 0x04	; 4
     52a:	de bf       	out	0x3e, r29	; 62
     52c:	cd bf       	out	0x3d, r28	; 61

0000052e <__do_copy_data>:
     52e:	10 e0       	ldi	r17, 0x00	; 0
     530:	a0 e6       	ldi	r26, 0x60	; 96
     532:	b0 e0       	ldi	r27, 0x00	; 0
     534:	ec e0       	ldi	r30, 0x0C	; 12
     536:	f0 e3       	ldi	r31, 0x30	; 48
     538:	02 c0       	rjmp	.+4      	; 0x53e <__do_copy_data+0x10>
     53a:	05 90       	lpm	r0, Z+
     53c:	0d 92       	st	X+, r0
     53e:	a0 38       	cpi	r26, 0x80	; 128
     540:	b1 07       	cpc	r27, r17
     542:	d9 f7       	brne	.-10     	; 0x53a <__do_copy_data+0xc>

00000544 <__do_clear_bss>:
     544:	23 e0       	ldi	r18, 0x03	; 3
     546:	a0 e8       	ldi	r26, 0x80	; 128
     548:	b0 e0       	ldi	r27, 0x00	; 0
     54a:	01 c0       	rjmp	.+2      	; 0x54e <.do_clear_bss_start>

0000054c <.do_clear_bss_loop>:
     54c:	1d 92       	st	X+, r1

0000054e <.do_clear_bss_start>:
     54e:	ae 33       	cpi	r26, 0x3E	; 62
     550:	b2 07       	cpc	r27, r18
     552:	e1 f7       	brne	.-8      	; 0x54c <.do_clear_bss_loop>
     554:	0e 94 80 14 	call	0x2900	; 0x2900 <main>
     558:	0c 94 04 18 	jmp	0x3008	; 0x3008 <_exit>

0000055c <__bad_interrupt>:
     55c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000560 <_Z8spi_initv>:
	 return 1;
   } 

   i2c_stop();
   return 0;
}
     560:	82 e5       	ldi	r24, 0x52	; 82
     562:	8d b9       	out	0x0d, r24	; 13
     564:	1e b8       	out	0x0e, r1	; 14
     566:	08 95       	ret

00000568 <_Z12SPI_transmith>:
     568:	8f b9       	out	0x0f, r24	; 15
     56a:	77 9b       	sbis	0x0e, 7	; 14
     56c:	fe cf       	rjmp	.-4      	; 0x56a <_Z12SPI_transmith+0x2>
     56e:	8f b1       	in	r24, 0x0f	; 15
     570:	08 95       	ret

00000572 <_Z11SPI_receivev>:
     572:	8f ef       	ldi	r24, 0xFF	; 255
     574:	8f b9       	out	0x0f, r24	; 15
     576:	77 9b       	sbis	0x0e, 7	; 14
     578:	fe cf       	rjmp	.-4      	; 0x576 <_Z11SPI_receivev+0x4>
     57a:	8f b1       	in	r24, 0x0f	; 15
     57c:	08 95       	ret

0000057e <_Z10uart0_initv>:
     57e:	1a b8       	out	0x0a, r1	; 10
     580:	1b b8       	out	0x0b, r1	; 11
     582:	86 e8       	ldi	r24, 0x86	; 134
     584:	80 bd       	out	0x20, r24	; 32
     586:	89 e1       	ldi	r24, 0x19	; 25
     588:	89 b9       	out	0x09, r24	; 9
     58a:	10 bc       	out	0x20, r1	; 32
     58c:	88 e1       	ldi	r24, 0x18	; 24
     58e:	8a b9       	out	0x0a, r24	; 10
     590:	08 95       	ret

00000592 <_Z11receiveBytev>:
     592:	5f 9b       	sbis	0x0b, 7	; 11
     594:	fe cf       	rjmp	.-4      	; 0x592 <_Z11receiveBytev>
     596:	8b b1       	in	r24, 0x0b	; 11
     598:	8c b1       	in	r24, 0x0c	; 12
     59a:	08 95       	ret

0000059c <_Z12transmitByteh>:
     59c:	5d 9b       	sbis	0x0b, 5	; 11
     59e:	fe cf       	rjmp	.-4      	; 0x59c <_Z12transmitByteh>
     5a0:	8c b9       	out	0x0c, r24	; 12
     5a2:	08 95       	ret

000005a4 <_Z16transmitString_FPKc>:
     5a4:	cf 93       	push	r28
     5a6:	df 93       	push	r29
     5a8:	ec 01       	movw	r28, r24
     5aa:	fc 01       	movw	r30, r24
     5ac:	84 91       	lpm	r24, Z
     5ae:	88 23       	and	r24, r24
     5b0:	49 f0       	breq	.+18     	; 0x5c4 <_Z16transmitString_FPKc+0x20>
     5b2:	fe 01       	movw	r30, r28
     5b4:	21 96       	adiw	r28, 0x01	; 1
     5b6:	84 91       	lpm	r24, Z
     5b8:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
     5bc:	fe 01       	movw	r30, r28
     5be:	84 91       	lpm	r24, Z
     5c0:	81 11       	cpse	r24, r1
     5c2:	f7 cf       	rjmp	.-18     	; 0x5b2 <_Z16transmitString_FPKc+0xe>
     5c4:	df 91       	pop	r29
     5c6:	cf 91       	pop	r28
     5c8:	08 95       	ret

000005ca <_Z14transmitStringPh>:
     5ca:	cf 93       	push	r28
     5cc:	df 93       	push	r29
     5ce:	ec 01       	movw	r28, r24
     5d0:	88 81       	ld	r24, Y
     5d2:	88 23       	and	r24, r24
     5d4:	31 f0       	breq	.+12     	; 0x5e2 <_Z14transmitStringPh+0x18>
     5d6:	21 96       	adiw	r28, 0x01	; 1
     5d8:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
     5dc:	89 91       	ld	r24, Y+
     5de:	81 11       	cpse	r24, r1
     5e0:	fb cf       	rjmp	.-10     	; 0x5d8 <_Z14transmitStringPh+0xe>
     5e2:	df 91       	pop	r29
     5e4:	cf 91       	pop	r28
     5e6:	08 95       	ret

000005e8 <_Z14SD_sendCommandhm>:
     5e8:	cf 92       	push	r12
     5ea:	df 92       	push	r13
     5ec:	ef 92       	push	r14
     5ee:	ff 92       	push	r15
     5f0:	cf 93       	push	r28
     5f2:	df 93       	push	r29
     5f4:	d8 2f       	mov	r29, r24
     5f6:	6a 01       	movw	r12, r20
     5f8:	7b 01       	movw	r14, r22
     5fa:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <SDHC_flag>
     5fe:	81 11       	cpse	r24, r1
     600:	15 c0       	rjmp	.+42     	; 0x62c <_Z14SD_sendCommandhm+0x44>
     602:	8f ee       	ldi	r24, 0xEF	; 239
     604:	8d 0f       	add	r24, r29
     606:	82 30       	cpi	r24, 0x02	; 2
     608:	40 f0       	brcs	.+16     	; 0x61a <_Z14SD_sendCommandhm+0x32>
     60a:	88 ee       	ldi	r24, 0xE8	; 232
     60c:	8d 0f       	add	r24, r29
     60e:	82 30       	cpi	r24, 0x02	; 2
     610:	20 f0       	brcs	.+8      	; 0x61a <_Z14SD_sendCommandhm+0x32>
     612:	80 ee       	ldi	r24, 0xE0	; 224
     614:	8d 0f       	add	r24, r29
     616:	82 30       	cpi	r24, 0x02	; 2
     618:	48 f4       	brcc	.+18     	; 0x62c <_Z14SD_sendCommandhm+0x44>
     61a:	0b 2e       	mov	r0, r27
     61c:	b9 e0       	ldi	r27, 0x09	; 9
     61e:	cc 0c       	add	r12, r12
     620:	dd 1c       	adc	r13, r13
     622:	ee 1c       	adc	r14, r14
     624:	ff 1c       	adc	r15, r15
     626:	ba 95       	dec	r27
     628:	d1 f7       	brne	.-12     	; 0x61e <_Z14SD_sendCommandhm+0x36>
     62a:	b0 2d       	mov	r27, r0
     62c:	c4 98       	cbi	0x18, 4	; 24
     62e:	8d 2f       	mov	r24, r29
     630:	80 64       	ori	r24, 0x40	; 64
     632:	0e 94 b4 02 	call	0x568	; 0x568 <_Z12SPI_transmith>
     636:	8f 2d       	mov	r24, r15
     638:	0e 94 b4 02 	call	0x568	; 0x568 <_Z12SPI_transmith>
     63c:	8e 2d       	mov	r24, r14
     63e:	0e 94 b4 02 	call	0x568	; 0x568 <_Z12SPI_transmith>
     642:	8d 2d       	mov	r24, r13
     644:	0e 94 b4 02 	call	0x568	; 0x568 <_Z12SPI_transmith>
     648:	8c 2d       	mov	r24, r12
     64a:	0e 94 b4 02 	call	0x568	; 0x568 <_Z12SPI_transmith>
     64e:	d8 30       	cpi	r29, 0x08	; 8
     650:	21 f4       	brne	.+8      	; 0x65a <_Z14SD_sendCommandhm+0x72>
     652:	87 e8       	ldi	r24, 0x87	; 135
     654:	0e 94 b4 02 	call	0x568	; 0x568 <_Z12SPI_transmith>
     658:	07 c0       	rjmp	.+14     	; 0x668 <_Z14SD_sendCommandhm+0x80>
     65a:	85 e9       	ldi	r24, 0x95	; 149
     65c:	0e 94 b4 02 	call	0x568	; 0x568 <_Z12SPI_transmith>
     660:	03 c0       	rjmp	.+6      	; 0x668 <_Z14SD_sendCommandhm+0x80>
     662:	c1 50       	subi	r28, 0x01	; 1
     664:	11 f4       	brne	.+4      	; 0x66a <_Z14SD_sendCommandhm+0x82>
     666:	1b c0       	rjmp	.+54     	; 0x69e <_Z14SD_sendCommandhm+0xb6>
     668:	c0 e0       	ldi	r28, 0x00	; 0
     66a:	0e 94 b9 02 	call	0x572	; 0x572 <_Z11SPI_receivev>
     66e:	8f 3f       	cpi	r24, 0xFF	; 255
     670:	c1 f3       	breq	.-16     	; 0x662 <_Z14SD_sendCommandhm+0x7a>
     672:	c8 2f       	mov	r28, r24
     674:	81 11       	cpse	r24, r1
     676:	15 c0       	rjmp	.+42     	; 0x6a2 <_Z14SD_sendCommandhm+0xba>
     678:	da 33       	cpi	r29, 0x3A	; 58
     67a:	a1 f4       	brne	.+40     	; 0x6a4 <_Z14SD_sendCommandhm+0xbc>
     67c:	0e 94 b9 02 	call	0x572	; 0x572 <_Z11SPI_receivev>
     680:	86 ff       	sbrs	r24, 6
     682:	04 c0       	rjmp	.+8      	; 0x68c <_Z14SD_sendCommandhm+0xa4>
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	80 93 39 03 	sts	0x0339, r24	; 0x800339 <SDHC_flag>
     68a:	02 c0       	rjmp	.+4      	; 0x690 <_Z14SD_sendCommandhm+0xa8>
     68c:	10 92 39 03 	sts	0x0339, r1	; 0x800339 <SDHC_flag>
     690:	0e 94 b9 02 	call	0x572	; 0x572 <_Z11SPI_receivev>
     694:	0e 94 b9 02 	call	0x572	; 0x572 <_Z11SPI_receivev>
     698:	0e 94 b9 02 	call	0x572	; 0x572 <_Z11SPI_receivev>
     69c:	03 c0       	rjmp	.+6      	; 0x6a4 <_Z14SD_sendCommandhm+0xbc>
     69e:	c8 2f       	mov	r28, r24
     6a0:	01 c0       	rjmp	.+2      	; 0x6a4 <_Z14SD_sendCommandhm+0xbc>
     6a2:	c8 2f       	mov	r28, r24
     6a4:	0e 94 b9 02 	call	0x572	; 0x572 <_Z11SPI_receivev>
     6a8:	c4 9a       	sbi	0x18, 4	; 24
     6aa:	8c 2f       	mov	r24, r28
     6ac:	df 91       	pop	r29
     6ae:	cf 91       	pop	r28
     6b0:	ff 90       	pop	r15
     6b2:	ef 90       	pop	r14
     6b4:	df 90       	pop	r13
     6b6:	cf 90       	pop	r12
     6b8:	08 95       	ret

000006ba <_Z7SD_initv>:
     6ba:	0f 93       	push	r16
     6bc:	1f 93       	push	r17
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	1a e0       	ldi	r17, 0x0A	; 10
     6c4:	8f ef       	ldi	r24, 0xFF	; 255
     6c6:	0e 94 b4 02 	call	0x568	; 0x568 <_Z12SPI_transmith>
     6ca:	11 50       	subi	r17, 0x01	; 1
     6cc:	d9 f7       	brne	.-10     	; 0x6c4 <_Z7SD_initv+0xa>
     6ce:	c4 98       	cbi	0x18, 4	; 24
     6d0:	40 e0       	ldi	r20, 0x00	; 0
     6d2:	50 e0       	ldi	r21, 0x00	; 0
     6d4:	ba 01       	movw	r22, r20
     6d6:	80 e0       	ldi	r24, 0x00	; 0
     6d8:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_Z14SD_sendCommandhm>
     6dc:	c0 e2       	ldi	r28, 0x20	; 32
     6de:	d0 e0       	ldi	r29, 0x00	; 0
     6e0:	09 c0       	rjmp	.+18     	; 0x6f4 <_Z7SD_initv+0x3a>
     6e2:	40 e0       	ldi	r20, 0x00	; 0
     6e4:	50 e0       	ldi	r21, 0x00	; 0
     6e6:	ba 01       	movw	r22, r20
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_Z14SD_sendCommandhm>
     6ee:	21 97       	sbiw	r28, 0x01	; 1
     6f0:	09 f4       	brne	.+2      	; 0x6f4 <_Z7SD_initv+0x3a>
     6f2:	77 c0       	rjmp	.+238    	; 0x7e2 <_Z7SD_initv+0x128>
     6f4:	81 30       	cpi	r24, 0x01	; 1
     6f6:	a9 f7       	brne	.-22     	; 0x6e2 <_Z7SD_initv+0x28>
     6f8:	c4 9a       	sbi	0x18, 4	; 24
     6fa:	8f ef       	ldi	r24, 0xFF	; 255
     6fc:	0e 94 b4 02 	call	0x568	; 0x568 <_Z12SPI_transmith>
     700:	8f ef       	ldi	r24, 0xFF	; 255
     702:	0e 94 b4 02 	call	0x568	; 0x568 <_Z12SPI_transmith>
     706:	4a ea       	ldi	r20, 0xAA	; 170
     708:	51 e0       	ldi	r21, 0x01	; 1
     70a:	60 e0       	ldi	r22, 0x00	; 0
     70c:	70 e0       	ldi	r23, 0x00	; 0
     70e:	88 e0       	ldi	r24, 0x08	; 8
     710:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_Z14SD_sendCommandhm>
     714:	ce ef       	ldi	r28, 0xFE	; 254
     716:	d0 e0       	ldi	r29, 0x00	; 0
     718:	14 c0       	rjmp	.+40     	; 0x742 <_Z7SD_initv+0x88>
     71a:	4a ea       	ldi	r20, 0xAA	; 170
     71c:	51 e0       	ldi	r21, 0x01	; 1
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	70 e0       	ldi	r23, 0x00	; 0
     722:	88 e0       	ldi	r24, 0x08	; 8
     724:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_Z14SD_sendCommandhm>
     728:	21 97       	sbiw	r28, 0x01	; 1
     72a:	59 f4       	brne	.+22     	; 0x742 <_Z7SD_initv+0x88>
     72c:	8d e0       	ldi	r24, 0x0D	; 13
     72e:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
     732:	8a e0       	ldi	r24, 0x0A	; 10
     734:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <cardType>
     73e:	01 e0       	ldi	r16, 0x01	; 1
     740:	03 c0       	rjmp	.+6      	; 0x748 <_Z7SD_initv+0x8e>
     742:	81 30       	cpi	r24, 0x01	; 1
     744:	51 f7       	brne	.-44     	; 0x71a <_Z7SD_initv+0x60>
     746:	02 e0       	ldi	r16, 0x02	; 2
     748:	40 e0       	ldi	r20, 0x00	; 0
     74a:	50 e0       	ldi	r21, 0x00	; 0
     74c:	ba 01       	movw	r22, r20
     74e:	87 e3       	ldi	r24, 0x37	; 55
     750:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_Z14SD_sendCommandhm>
     754:	40 e0       	ldi	r20, 0x00	; 0
     756:	50 e0       	ldi	r21, 0x00	; 0
     758:	60 e0       	ldi	r22, 0x00	; 0
     75a:	70 e4       	ldi	r23, 0x40	; 64
     75c:	89 e2       	ldi	r24, 0x29	; 41
     75e:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_Z14SD_sendCommandhm>
     762:	ce ef       	ldi	r28, 0xFE	; 254
     764:	d0 e0       	ldi	r29, 0x00	; 0
     766:	17 c0       	rjmp	.+46     	; 0x796 <_Z7SD_initv+0xdc>
     768:	40 e0       	ldi	r20, 0x00	; 0
     76a:	50 e0       	ldi	r21, 0x00	; 0
     76c:	ba 01       	movw	r22, r20
     76e:	87 e3       	ldi	r24, 0x37	; 55
     770:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_Z14SD_sendCommandhm>
     774:	40 e0       	ldi	r20, 0x00	; 0
     776:	50 e0       	ldi	r21, 0x00	; 0
     778:	60 e0       	ldi	r22, 0x00	; 0
     77a:	70 e4       	ldi	r23, 0x40	; 64
     77c:	89 e2       	ldi	r24, 0x29	; 41
     77e:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_Z14SD_sendCommandhm>
     782:	21 97       	sbiw	r28, 0x01	; 1
     784:	41 f4       	brne	.+16     	; 0x796 <_Z7SD_initv+0xdc>
     786:	8d e0       	ldi	r24, 0x0D	; 13
     788:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
     78c:	8a e0       	ldi	r24, 0x0A	; 10
     78e:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
     792:	12 e0       	ldi	r17, 0x02	; 2
     794:	31 c0       	rjmp	.+98     	; 0x7f8 <_Z7SD_initv+0x13e>
     796:	81 11       	cpse	r24, r1
     798:	e7 cf       	rjmp	.-50     	; 0x768 <_Z7SD_initv+0xae>
     79a:	10 92 39 03 	sts	0x0339, r1	; 0x800339 <SDHC_flag>
     79e:	02 30       	cpi	r16, 0x02	; 2
     7a0:	59 f5       	brne	.+86     	; 0x7f8 <_Z7SD_initv+0x13e>
     7a2:	21 c0       	rjmp	.+66     	; 0x7e6 <_Z7SD_initv+0x12c>
     7a4:	40 e0       	ldi	r20, 0x00	; 0
     7a6:	50 e0       	ldi	r21, 0x00	; 0
     7a8:	ba 01       	movw	r22, r20
     7aa:	8a e3       	ldi	r24, 0x3A	; 58
     7ac:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_Z14SD_sendCommandhm>
     7b0:	21 97       	sbiw	r28, 0x01	; 1
     7b2:	49 f4       	brne	.+18     	; 0x7c6 <_Z7SD_initv+0x10c>
     7b4:	8d e0       	ldi	r24, 0x0D	; 13
     7b6:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
     7ba:	8a e0       	ldi	r24, 0x0A	; 10
     7bc:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
     7c0:	10 92 38 03 	sts	0x0338, r1	; 0x800338 <cardType>
     7c4:	02 c0       	rjmp	.+4      	; 0x7ca <_Z7SD_initv+0x110>
     7c6:	81 11       	cpse	r24, r1
     7c8:	ed cf       	rjmp	.-38     	; 0x7a4 <_Z7SD_initv+0xea>
     7ca:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <SDHC_flag>
     7ce:	81 30       	cpi	r24, 0x01	; 1
     7d0:	21 f4       	brne	.+8      	; 0x7da <_Z7SD_initv+0x120>
     7d2:	82 e0       	ldi	r24, 0x02	; 2
     7d4:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <cardType>
     7d8:	0f c0       	rjmp	.+30     	; 0x7f8 <_Z7SD_initv+0x13e>
     7da:	83 e0       	ldi	r24, 0x03	; 3
     7dc:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <cardType>
     7e0:	0b c0       	rjmp	.+22     	; 0x7f8 <_Z7SD_initv+0x13e>
     7e2:	11 e0       	ldi	r17, 0x01	; 1
     7e4:	09 c0       	rjmp	.+18     	; 0x7f8 <_Z7SD_initv+0x13e>
     7e6:	40 e0       	ldi	r20, 0x00	; 0
     7e8:	50 e0       	ldi	r21, 0x00	; 0
     7ea:	ba 01       	movw	r22, r20
     7ec:	8a e3       	ldi	r24, 0x3A	; 58
     7ee:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_Z14SD_sendCommandhm>
     7f2:	ce ef       	ldi	r28, 0xFE	; 254
     7f4:	d0 e0       	ldi	r29, 0x00	; 0
     7f6:	e7 cf       	rjmp	.-50     	; 0x7c6 <_Z7SD_initv+0x10c>
     7f8:	81 2f       	mov	r24, r17
     7fa:	df 91       	pop	r29
     7fc:	cf 91       	pop	r28
     7fe:	1f 91       	pop	r17
     800:	0f 91       	pop	r16
     802:	08 95       	ret

00000804 <_Z18SD_readSingleBlockm>:
     804:	cf 93       	push	r28
     806:	df 93       	push	r29
     808:	ab 01       	movw	r20, r22
     80a:	bc 01       	movw	r22, r24
     80c:	81 e1       	ldi	r24, 0x11	; 17
     80e:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_Z14SD_sendCommandhm>
     812:	81 11       	cpse	r24, r1
     814:	26 c0       	rjmp	.+76     	; 0x862 <_Z18SD_readSingleBlockm+0x5e>
     816:	c4 98       	cbi	0x18, 4	; 24
     818:	0e 94 b9 02 	call	0x572	; 0x572 <_Z11SPI_receivev>
     81c:	8e 3f       	cpi	r24, 0xFE	; 254
     81e:	31 f4       	brne	.+12     	; 0x82c <_Z18SD_readSingleBlockm+0x28>
     820:	0b c0       	rjmp	.+22     	; 0x838 <_Z18SD_readSingleBlockm+0x34>
     822:	21 97       	sbiw	r28, 0x01	; 1
     824:	29 f4       	brne	.+10     	; 0x830 <_Z18SD_readSingleBlockm+0x2c>
     826:	c4 9a       	sbi	0x18, 4	; 24
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	1b c0       	rjmp	.+54     	; 0x862 <_Z18SD_readSingleBlockm+0x5e>
     82c:	cf ef       	ldi	r28, 0xFF	; 255
     82e:	df ef       	ldi	r29, 0xFF	; 255
     830:	0e 94 b9 02 	call	0x572	; 0x572 <_Z11SPI_receivev>
     834:	8e 3f       	cpi	r24, 0xFE	; 254
     836:	a9 f7       	brne	.-22     	; 0x822 <_Z18SD_readSingleBlockm+0x1e>
     838:	c0 e0       	ldi	r28, 0x00	; 0
     83a:	d0 e0       	ldi	r29, 0x00	; 0
     83c:	0e 94 b9 02 	call	0x572	; 0x572 <_Z11SPI_receivev>
     840:	fe 01       	movw	r30, r28
     842:	e8 5c       	subi	r30, 0xC8	; 200
     844:	fe 4f       	sbci	r31, 0xFE	; 254
     846:	80 83       	st	Z, r24
     848:	21 96       	adiw	r28, 0x01	; 1
     84a:	c1 15       	cp	r28, r1
     84c:	82 e0       	ldi	r24, 0x02	; 2
     84e:	d8 07       	cpc	r29, r24
     850:	a9 f7       	brne	.-22     	; 0x83c <_Z18SD_readSingleBlockm+0x38>
     852:	0e 94 b9 02 	call	0x572	; 0x572 <_Z11SPI_receivev>
     856:	0e 94 b9 02 	call	0x572	; 0x572 <_Z11SPI_receivev>
     85a:	0e 94 b9 02 	call	0x572	; 0x572 <_Z11SPI_receivev>
     85e:	c4 9a       	sbi	0x18, 4	; 24
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	08 95       	ret

00000868 <_Z19SD_writeSingleBlockm>:
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	ab 01       	movw	r20, r22
     86e:	bc 01       	movw	r22, r24
     870:	88 e1       	ldi	r24, 0x18	; 24
     872:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_Z14SD_sendCommandhm>
     876:	81 11       	cpse	r24, r1
     878:	3e c0       	rjmp	.+124    	; 0x8f6 <_Z19SD_writeSingleBlockm+0x8e>
     87a:	c4 98       	cbi	0x18, 4	; 24
     87c:	8e ef       	ldi	r24, 0xFE	; 254
     87e:	0e 94 b4 02 	call	0x568	; 0x568 <_Z12SPI_transmith>
     882:	c0 e0       	ldi	r28, 0x00	; 0
     884:	d0 e0       	ldi	r29, 0x00	; 0
     886:	fe 01       	movw	r30, r28
     888:	e8 5c       	subi	r30, 0xC8	; 200
     88a:	fe 4f       	sbci	r31, 0xFE	; 254
     88c:	80 81       	ld	r24, Z
     88e:	0e 94 b4 02 	call	0x568	; 0x568 <_Z12SPI_transmith>
     892:	21 96       	adiw	r28, 0x01	; 1
     894:	c1 15       	cp	r28, r1
     896:	22 e0       	ldi	r18, 0x02	; 2
     898:	d2 07       	cpc	r29, r18
     89a:	a9 f7       	brne	.-22     	; 0x886 <_Z19SD_writeSingleBlockm+0x1e>
     89c:	8f ef       	ldi	r24, 0xFF	; 255
     89e:	0e 94 b4 02 	call	0x568	; 0x568 <_Z12SPI_transmith>
     8a2:	8f ef       	ldi	r24, 0xFF	; 255
     8a4:	0e 94 b4 02 	call	0x568	; 0x568 <_Z12SPI_transmith>
     8a8:	0e 94 b9 02 	call	0x572	; 0x572 <_Z11SPI_receivev>
     8ac:	98 2f       	mov	r25, r24
     8ae:	9f 71       	andi	r25, 0x1F	; 31
     8b0:	95 30       	cpi	r25, 0x05	; 5
     8b2:	39 f0       	breq	.+14     	; 0x8c2 <_Z19SD_writeSingleBlockm+0x5a>
     8b4:	c4 9a       	sbi	0x18, 4	; 24
     8b6:	1f c0       	rjmp	.+62     	; 0x8f6 <_Z19SD_writeSingleBlockm+0x8e>
     8b8:	21 96       	adiw	r28, 0x01	; 1
     8ba:	29 f4       	brne	.+10     	; 0x8c6 <_Z19SD_writeSingleBlockm+0x5e>
     8bc:	c4 9a       	sbi	0x18, 4	; 24
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	1a c0       	rjmp	.+52     	; 0x8f6 <_Z19SD_writeSingleBlockm+0x8e>
     8c2:	c0 e0       	ldi	r28, 0x00	; 0
     8c4:	d0 e0       	ldi	r29, 0x00	; 0
     8c6:	0e 94 b9 02 	call	0x572	; 0x572 <_Z11SPI_receivev>
     8ca:	88 23       	and	r24, r24
     8cc:	a9 f3       	breq	.-22     	; 0x8b8 <_Z19SD_writeSingleBlockm+0x50>
     8ce:	c4 9a       	sbi	0x18, 4	; 24
     8d0:	8f ef       	ldi	r24, 0xFF	; 255
     8d2:	0e 94 b4 02 	call	0x568	; 0x568 <_Z12SPI_transmith>
     8d6:	c4 98       	cbi	0x18, 4	; 24
     8d8:	08 c0       	rjmp	.+16     	; 0x8ea <_Z19SD_writeSingleBlockm+0x82>
     8da:	ce 01       	movw	r24, r28
     8dc:	01 96       	adiw	r24, 0x01	; 1
     8de:	21 96       	adiw	r28, 0x01	; 1
     8e0:	19 f4       	brne	.+6      	; 0x8e8 <_Z19SD_writeSingleBlockm+0x80>
     8e2:	c4 9a       	sbi	0x18, 4	; 24
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	07 c0       	rjmp	.+14     	; 0x8f6 <_Z19SD_writeSingleBlockm+0x8e>
     8e8:	ec 01       	movw	r28, r24
     8ea:	0e 94 b9 02 	call	0x572	; 0x572 <_Z11SPI_receivev>
     8ee:	88 23       	and	r24, r24
     8f0:	a1 f3       	breq	.-24     	; 0x8da <_Z19SD_writeSingleBlockm+0x72>
     8f2:	c4 9a       	sbi	0x18, 4	; 24
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	df 91       	pop	r29
     8f8:	cf 91       	pop	r28
     8fa:	08 95       	ret

000008fc <_Z8twi_initv>:
     8fc:	16 be       	out	0x36, r1	; 54
     8fe:	82 e1       	ldi	r24, 0x12	; 18
     900:	80 b9       	out	0x00, r24	; 0
     902:	11 b8       	out	0x01, r1	; 1
     904:	08 95       	ret

00000906 <_Z9i2c_startv>:
     906:	84 ea       	ldi	r24, 0xA4	; 164
     908:	86 bf       	out	0x36, r24	; 54
     90a:	06 b6       	in	r0, 0x36	; 54
     90c:	07 fe       	sbrs	r0, 7
     90e:	fd cf       	rjmp	.-6      	; 0x90a <_Z9i2c_startv+0x4>
     910:	91 b1       	in	r25, 0x01	; 1
     912:	98 7f       	andi	r25, 0xF8	; 248
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	98 30       	cpi	r25, 0x08	; 8
     918:	09 f4       	brne	.+2      	; 0x91c <_Z9i2c_startv+0x16>
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	08 95       	ret

0000091e <_Z15i2c_repeatStartv>:
     91e:	84 ea       	ldi	r24, 0xA4	; 164
     920:	86 bf       	out	0x36, r24	; 54
     922:	06 b6       	in	r0, 0x36	; 54
     924:	07 fe       	sbrs	r0, 7
     926:	fd cf       	rjmp	.-6      	; 0x922 <_Z15i2c_repeatStartv+0x4>
     928:	91 b1       	in	r25, 0x01	; 1
     92a:	98 7f       	andi	r25, 0xF8	; 248
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	90 31       	cpi	r25, 0x10	; 16
     930:	09 f4       	brne	.+2      	; 0x934 <_Z15i2c_repeatStartv+0x16>
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	08 95       	ret

00000936 <_Z15i2c_sendAddressh>:
     936:	80 ff       	sbrs	r24, 0
     938:	02 c0       	rjmp	.+4      	; 0x93e <_Z15i2c_sendAddressh+0x8>
     93a:	20 e4       	ldi	r18, 0x40	; 64
     93c:	01 c0       	rjmp	.+2      	; 0x940 <_Z15i2c_sendAddressh+0xa>
     93e:	28 e1       	ldi	r18, 0x18	; 24
     940:	83 b9       	out	0x03, r24	; 3
     942:	84 e8       	ldi	r24, 0x84	; 132
     944:	86 bf       	out	0x36, r24	; 54
     946:	06 b6       	in	r0, 0x36	; 54
     948:	07 fe       	sbrs	r0, 7
     94a:	fd cf       	rjmp	.-6      	; 0x946 <_Z15i2c_sendAddressh+0x10>
     94c:	91 b1       	in	r25, 0x01	; 1
     94e:	98 7f       	andi	r25, 0xF8	; 248
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	29 13       	cpse	r18, r25
     954:	01 c0       	rjmp	.+2      	; 0x958 <_Z15i2c_sendAddressh+0x22>
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	08 95       	ret

0000095a <_Z12i2c_sendDatah>:
     95a:	83 b9       	out	0x03, r24	; 3
     95c:	84 e8       	ldi	r24, 0x84	; 132
     95e:	86 bf       	out	0x36, r24	; 54
     960:	06 b6       	in	r0, 0x36	; 54
     962:	07 fe       	sbrs	r0, 7
     964:	fd cf       	rjmp	.-6      	; 0x960 <_Z12i2c_sendDatah+0x6>
     966:	91 b1       	in	r25, 0x01	; 1
     968:	98 7f       	andi	r25, 0xF8	; 248
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	98 32       	cpi	r25, 0x28	; 40
     96e:	09 f4       	brne	.+2      	; 0x972 <_Z12i2c_sendDatah+0x18>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	08 95       	ret

00000974 <_Z19i2c_receiveData_ACKv>:
     974:	84 ec       	ldi	r24, 0xC4	; 196
     976:	86 bf       	out	0x36, r24	; 54
     978:	06 b6       	in	r0, 0x36	; 54
     97a:	07 fe       	sbrs	r0, 7
     97c:	fd cf       	rjmp	.-6      	; 0x978 <_Z19i2c_receiveData_ACKv+0x4>
     97e:	81 b1       	in	r24, 0x01	; 1
     980:	88 7f       	andi	r24, 0xF8	; 248
     982:	80 35       	cpi	r24, 0x50	; 80
     984:	11 f4       	brne	.+4      	; 0x98a <_Z19i2c_receiveData_ACKv+0x16>
     986:	83 b1       	in	r24, 0x03	; 3
     988:	08 95       	ret
     98a:	8e e7       	ldi	r24, 0x7E	; 126
     98c:	08 95       	ret

0000098e <_Z20i2c_receiveData_NACKv>:
     98e:	84 e8       	ldi	r24, 0x84	; 132
     990:	86 bf       	out	0x36, r24	; 54
     992:	06 b6       	in	r0, 0x36	; 54
     994:	07 fe       	sbrs	r0, 7
     996:	fd cf       	rjmp	.-6      	; 0x992 <_Z20i2c_receiveData_NACKv+0x4>
     998:	81 b1       	in	r24, 0x01	; 1
     99a:	88 7f       	andi	r24, 0xF8	; 248
     99c:	88 35       	cpi	r24, 0x58	; 88
     99e:	11 f4       	brne	.+4      	; 0x9a4 <_Z20i2c_receiveData_NACKv+0x16>
     9a0:	83 b1       	in	r24, 0x03	; 3
     9a2:	08 95       	ret
     9a4:	8e e7       	ldi	r24, 0x7E	; 126
     9a6:	08 95       	ret

000009a8 <_Z8RTC_readv>:

//***********************************************************************
//Function to read RTC registers and store them in buffer rtc_register[]
//***********************************************************************    
unsigned char RTC_read(void)
{
     9a8:	0f 93       	push	r16
     9aa:	1f 93       	push	r17
     9ac:	cf 93       	push	r28

  unsigned char errorStatus, i, data;
  
  errorStatus = i2c_start();
     9ae:	0e 94 83 04 	call	0x906	; 0x906 <_Z9i2c_startv>
   if(errorStatus == 1)
     9b2:	81 30       	cpi	r24, 0x01	; 1
     9b4:	21 f4       	brne	.+8      	; 0x9be <_Z8RTC_readv+0x16>
//**************************************************
//Function to end the i2c communication
//*************************************************   	
void i2c_stop(void)
{
  TWCR =  (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	  //Transmit STOP condition
     9b6:	84 e9       	ldi	r24, 0x94	; 148
     9b8:	86 bf       	out	0x36, r24	; 54
   {
     //transmitString_F(PSTR("RTC start1 failed.."));
   	 i2c_stop();
	 return 1;
     9ba:	81 e0       	ldi	r24, 0x01	; 1
     9bc:	3f c0       	rjmp	.+126    	; 0xa3c <_Z8RTC_readv+0x94>
   } 
   
   errorStatus = i2c_sendAddress(DS1307_W);
     9be:	80 ed       	ldi	r24, 0xD0	; 208
     9c0:	0e 94 9b 04 	call	0x936	; 0x936 <_Z15i2c_sendAddressh>
   
   if(errorStatus == 1)
     9c4:	81 30       	cpi	r24, 0x01	; 1
     9c6:	21 f4       	brne	.+8      	; 0x9d0 <_Z8RTC_readv+0x28>
     9c8:	84 e9       	ldi	r24, 0x94	; 148
     9ca:	86 bf       	out	0x36, r24	; 54
   {
     //transmitString_F(PSTR("RTC sendAddress1 failed.."));
	 i2c_stop();
	 return 1;
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	36 c0       	rjmp	.+108    	; 0xa3c <_Z8RTC_readv+0x94>
   } 
   
   errorStatus = i2c_sendData(0x00);
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	0e 94 ad 04 	call	0x95a	; 0x95a <_Z12i2c_sendDatah>
   if(errorStatus == 1)
     9d6:	81 30       	cpi	r24, 0x01	; 1
     9d8:	21 f4       	brne	.+8      	; 0x9e2 <_Z8RTC_readv+0x3a>
     9da:	84 e9       	ldi	r24, 0x94	; 148
     9dc:	86 bf       	out	0x36, r24	; 54
   {
     //transmitString_F(PSTR("RTC write-1 failed.."));
	 i2c_stop();
	 return 1;
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	2d c0       	rjmp	.+90     	; 0xa3c <_Z8RTC_readv+0x94>
   } 

    errorStatus = i2c_repeatStart();
     9e2:	0e 94 8f 04 	call	0x91e	; 0x91e <_Z15i2c_repeatStartv>
   if(errorStatus == 1)
     9e6:	81 30       	cpi	r24, 0x01	; 1
     9e8:	21 f4       	brne	.+8      	; 0x9f2 <_Z8RTC_readv+0x4a>
     9ea:	84 e9       	ldi	r24, 0x94	; 148
     9ec:	86 bf       	out	0x36, r24	; 54
   {
     //transmitString_F(PSTR("RTC repeat start failed.."));
   	 i2c_stop();
	 return 1;
     9ee:	81 e0       	ldi	r24, 0x01	; 1
     9f0:	25 c0       	rjmp	.+74     	; 0xa3c <_Z8RTC_readv+0x94>
   } 
   
    errorStatus = i2c_sendAddress(DS1307_R);
     9f2:	81 ed       	ldi	r24, 0xD1	; 209
     9f4:	0e 94 9b 04 	call	0x936	; 0x936 <_Z15i2c_sendAddressh>
   
   if(errorStatus == 1)
     9f8:	81 30       	cpi	r24, 0x01	; 1
     9fa:	49 f4       	brne	.+18     	; 0xa0e <_Z8RTC_readv+0x66>
     9fc:	84 e9       	ldi	r24, 0x94	; 148
     9fe:	86 bf       	out	0x36, r24	; 54
   {
     //transmitString_F(PSTR("RTC sendAddress2 failed.."));
	 i2c_stop();
	 return 1;
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	1c c0       	rjmp	.+56     	; 0xa3c <_Z8RTC_readv+0x94>
   } 
 
    for(i=0;i<7;i++)
   {
      if(i == 6)  	 //no Acknowledge after receiving the last byte
	   	  data = i2c_receiveData_NACK();
     a04:	0e 94 c7 04 	call	0x98e	; 0x98e <_Z20i2c_receiveData_NACKv>
	  else
	  	  data = i2c_receiveData_ACK();
		  
   	  if(data == ERROR_CODE)
     a08:	8e 37       	cpi	r24, 0x7E	; 126
     a0a:	99 f4       	brne	.+38     	; 0xa32 <_Z8RTC_readv+0x8a>
     a0c:	07 c0       	rjmp	.+14     	; 0xa1c <_Z8RTC_readv+0x74>
     a0e:	09 e1       	ldi	r16, 0x19	; 25
     a10:	11 e0       	ldi	r17, 0x01	; 1
	 return 1;
   } 
   
    errorStatus = i2c_sendAddress(DS1307_R);
   
   if(errorStatus == 1)
     a12:	c0 e0       	ldi	r28, 0x00	; 0
    for(i=0;i<7;i++)
   {
      if(i == 6)  	 //no Acknowledge after receiving the last byte
	   	  data = i2c_receiveData_NACK();
	  else
	  	  data = i2c_receiveData_ACK();
     a14:	0e 94 ba 04 	call	0x974	; 0x974 <_Z19i2c_receiveData_ACKv>
		  
   	  if(data == ERROR_CODE)
     a18:	8e 37       	cpi	r24, 0x7E	; 126
     a1a:	21 f4       	brne	.+8      	; 0xa24 <_Z8RTC_readv+0x7c>
     a1c:	84 e9       	ldi	r24, 0x94	; 148
     a1e:	86 bf       	out	0x36, r24	; 54
   	  {
       		//transmitString_F(PSTR("RTC receive failed.."));
			i2c_stop();
	   		return 1;
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	0c c0       	rjmp	.+24     	; 0xa3c <_Z8RTC_readv+0x94>
   	  }
	  
	  rtc_register[i] = data;
     a24:	f8 01       	movw	r30, r16
     a26:	81 93       	st	Z+, r24
     a28:	8f 01       	movw	r16, r30
     //transmitString_F(PSTR("RTC sendAddress2 failed.."));
	 i2c_stop();
	 return 1;
   } 
 
    for(i=0;i<7;i++)
     a2a:	cf 5f       	subi	r28, 0xFF	; 255
   {
      if(i == 6)  	 //no Acknowledge after receiving the last byte
     a2c:	c6 30       	cpi	r28, 0x06	; 6
     a2e:	91 f7       	brne	.-28     	; 0xa14 <_Z8RTC_readv+0x6c>
     a30:	e9 cf       	rjmp	.-46     	; 0xa04 <_Z8RTC_readv+0x5c>
       		//transmitString_F(PSTR("RTC receive failed.."));
			i2c_stop();
	   		return 1;
   	  }
	  
	  rtc_register[i] = data;
     a32:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <rtc_register+0x6>
     a36:	84 e9       	ldi	r24, 0x94	; 148
     a38:	86 bf       	out	0x36, r24	; 54
	}
	
	i2c_stop();
	return 0;
     a3a:	80 e0       	ldi	r24, 0x00	; 0
}	  
     a3c:	cf 91       	pop	r28
     a3e:	1f 91       	pop	r17
     a40:	0f 91       	pop	r16
     a42:	08 95       	ret

00000a44 <_Z11RTC_getTimev>:
//Function to form time string for sending it to LCD & UART
//****************************************************************** 
unsigned char RTC_getTime(void)
{
   unsigned char error;
   error = RTC_read();
     a44:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z8RTC_readv>
   if(error) return 1;
     a48:	81 11       	cpse	r24, r1
     a4a:	2d c0       	rjmp	.+90     	; 0xaa6 <_Z11RTC_getTimev+0x62>

   RTC_read();
     a4c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z8RTC_readv>
   time[8] = 0x00;	  //NULL
     a50:	ef e2       	ldi	r30, 0x2F	; 47
     a52:	f1 e0       	ldi	r31, 0x01	; 1
     a54:	10 86       	std	Z+8, r1	; 0x08
   time[7] = (SECONDS & 0x0f) | 0x30;		 //seconds(1's)
     a56:	a9 e1       	ldi	r26, 0x19	; 25
     a58:	b1 e0       	ldi	r27, 0x01	; 1
     a5a:	8c 91       	ld	r24, X
     a5c:	98 2f       	mov	r25, r24
     a5e:	9f 70       	andi	r25, 0x0F	; 15
     a60:	90 63       	ori	r25, 0x30	; 48
     a62:	97 83       	std	Z+7, r25	; 0x07
   time[6] = ((SECONDS & 0x70) >> 4) | 0x30; //seconds(10's)
     a64:	80 77       	andi	r24, 0x70	; 112
     a66:	82 95       	swap	r24
     a68:	8f 70       	andi	r24, 0x0F	; 15
     a6a:	80 63       	ori	r24, 0x30	; 48
     a6c:	86 83       	std	Z+6, r24	; 0x06
   time[5] = ':';
     a6e:	2a e3       	ldi	r18, 0x3A	; 58
     a70:	25 83       	std	Z+5, r18	; 0x05
   
   time[4] = (MINUTES & 0x0f) | 0x30;
     a72:	11 96       	adiw	r26, 0x01	; 1
     a74:	8c 91       	ld	r24, X
     a76:	11 97       	sbiw	r26, 0x01	; 1
     a78:	98 2f       	mov	r25, r24
     a7a:	9f 70       	andi	r25, 0x0F	; 15
     a7c:	90 63       	ori	r25, 0x30	; 48
     a7e:	94 83       	std	Z+4, r25	; 0x04
   time[3] = ((MINUTES & 0x70) >> 4) | 0x30;
     a80:	80 77       	andi	r24, 0x70	; 112
     a82:	82 95       	swap	r24
     a84:	8f 70       	andi	r24, 0x0F	; 15
     a86:	80 63       	ori	r24, 0x30	; 48
     a88:	83 83       	std	Z+3, r24	; 0x03
   time[2] = ':'; 
     a8a:	22 83       	std	Z+2, r18	; 0x02
   
   time[1] = (HOURS & 0x0f) | 0x30;	
     a8c:	12 96       	adiw	r26, 0x02	; 2
     a8e:	8c 91       	ld	r24, X
     a90:	98 2f       	mov	r25, r24
     a92:	9f 70       	andi	r25, 0x0F	; 15
     a94:	90 63       	ori	r25, 0x30	; 48
     a96:	91 83       	std	Z+1, r25	; 0x01
   time[0] = ((HOURS & 0x30) >> 4) | 0x30;
     a98:	80 73       	andi	r24, 0x30	; 48
     a9a:	82 95       	swap	r24
     a9c:	8f 70       	andi	r24, 0x0F	; 15
     a9e:	80 63       	ori	r24, 0x30	; 48
     aa0:	80 83       	st	Z, r24

   return 0;
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	08 95       	ret
//****************************************************************** 
unsigned char RTC_getTime(void)
{
   unsigned char error;
   error = RTC_read();
   if(error) return 1;
     aa6:	81 e0       	ldi	r24, 0x01	; 1
   
   time[1] = (HOURS & 0x0f) | 0x30;	
   time[0] = ((HOURS & 0x30) >> 4) | 0x30;

   return 0;
}
     aa8:	08 95       	ret

00000aaa <_Z11RTC_getDatev>:
//Function to form date string for sending it to LCD & UART
//****************************************************************** 
unsigned char RTC_getDate(void)
{
  unsigned char error;
  error = RTC_read();
     aaa:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z8RTC_readv>
  if(error) return 1;
     aae:	81 11       	cpse	r24, r1
     ab0:	2f c0       	rjmp	.+94     	; 0xb10 <_Z11RTC_getDatev+0x66>

  date[10] = 0x00;  //NULL
     ab2:	e4 e2       	ldi	r30, 0x24	; 36
     ab4:	f1 e0       	ldi	r31, 0x01	; 1
     ab6:	12 86       	std	Z+10, r1	; 0x0a
  date[9] = (YEAR & 0x0f) | 0x30;
     ab8:	a9 e1       	ldi	r26, 0x19	; 25
     aba:	b1 e0       	ldi	r27, 0x01	; 1
     abc:	16 96       	adiw	r26, 0x06	; 6
     abe:	8c 91       	ld	r24, X
     ac0:	16 97       	sbiw	r26, 0x06	; 6
     ac2:	98 2f       	mov	r25, r24
     ac4:	9f 70       	andi	r25, 0x0F	; 15
     ac6:	90 63       	ori	r25, 0x30	; 48
     ac8:	91 87       	std	Z+9, r25	; 0x09
  date[8] = ((YEAR & 0xf0) >> 4) | 0x30;
     aca:	82 95       	swap	r24
     acc:	8f 70       	andi	r24, 0x0F	; 15
     ace:	80 63       	ori	r24, 0x30	; 48
     ad0:	80 87       	std	Z+8, r24	; 0x08
  date[7] = '0';
     ad2:	80 e3       	ldi	r24, 0x30	; 48
     ad4:	87 83       	std	Z+7, r24	; 0x07
  date[6] = '2';
     ad6:	82 e3       	ldi	r24, 0x32	; 50
     ad8:	86 83       	std	Z+6, r24	; 0x06
  date[5] = '/';
     ada:	2f e2       	ldi	r18, 0x2F	; 47
     adc:	25 83       	std	Z+5, r18	; 0x05
  date[4] = (MONTH & 0x0f) | 0x30;
     ade:	15 96       	adiw	r26, 0x05	; 5
     ae0:	8c 91       	ld	r24, X
     ae2:	15 97       	sbiw	r26, 0x05	; 5
     ae4:	98 2f       	mov	r25, r24
     ae6:	9f 70       	andi	r25, 0x0F	; 15
     ae8:	90 63       	ori	r25, 0x30	; 48
     aea:	94 83       	std	Z+4, r25	; 0x04
  date[3] = ((MONTH & 0x10) >> 4) | 0x30;
     aec:	82 95       	swap	r24
     aee:	81 70       	andi	r24, 0x01	; 1
     af0:	80 63       	ori	r24, 0x30	; 48
     af2:	83 83       	std	Z+3, r24	; 0x03
  date[2] = '/';
     af4:	22 83       	std	Z+2, r18	; 0x02
  date[1] = (DATE & 0x0f) | 0x30;
     af6:	14 96       	adiw	r26, 0x04	; 4
     af8:	8c 91       	ld	r24, X
     afa:	98 2f       	mov	r25, r24
     afc:	9f 70       	andi	r25, 0x0F	; 15
     afe:	90 63       	ori	r25, 0x30	; 48
     b00:	91 83       	std	Z+1, r25	; 0x01
  date[0] = ((DATE & 0x30) >> 4) | 0x30;
     b02:	80 73       	andi	r24, 0x30	; 48
     b04:	82 95       	swap	r24
     b06:	8f 70       	andi	r24, 0x0F	; 15
     b08:	80 63       	ori	r24, 0x30	; 48
     b0a:	80 83       	st	Z, r24
  return 0;
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	08 95       	ret
//****************************************************************** 
unsigned char RTC_getDate(void)
{
  unsigned char error;
  error = RTC_read();
  if(error) return 1;
     b10:	81 e0       	ldi	r24, 0x01	; 1
  date[3] = ((MONTH & 0x10) >> 4) | 0x30;
  date[2] = '/';
  date[1] = (DATE & 0x0f) | 0x30;
  date[0] = ((DATE & 0x30) >> 4) | 0x30;
  return 0;
}  
     b12:	08 95       	ret

00000b14 <_Z15RTC_displayTimev>:
//Function to display time on LCD and send it to PC (thru UART)
//****************************************************************** 
unsigned char RTC_displayTime(void)
{
  unsigned char error;
  error = RTC_getTime();
     b14:	0e 94 22 05 	call	0xa44	; 0xa44 <_Z11RTC_getTimev>
  if(error) return 1;
     b18:	81 11       	cpse	r24, r1
     b1a:	10 c0       	rjmp	.+32     	; 0xb3c <_Z15RTC_displayTimev+0x28>
  
  TX_NEWLINE;
     b1c:	8d e0       	ldi	r24, 0x0D	; 13
     b1e:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
     b22:	8a e0       	ldi	r24, 0x0A	; 10
     b24:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
  transmitString_F(PSTR("Time:"));
     b28:	8b e1       	ldi	r24, 0x1B	; 27
     b2a:	95 e0       	ldi	r25, 0x05	; 5
     b2c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
  transmitString(time);
     b30:	8f e2       	ldi	r24, 0x2F	; 47
     b32:	91 e0       	ldi	r25, 0x01	; 1
     b34:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_Z14transmitStringPh>

  return 0;
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	08 95       	ret
//****************************************************************** 
unsigned char RTC_displayTime(void)
{
  unsigned char error;
  error = RTC_getTime();
  if(error) return 1;
     b3c:	81 e0       	ldi	r24, 0x01	; 1
  TX_NEWLINE;
  transmitString_F(PSTR("Time:"));
  transmitString(time);

  return 0;
}
     b3e:	08 95       	ret

00000b40 <_Z14RTC_displayDayv>:
//******************************************************************
//Function to get the string for day 
//****************************************************************** 
void RTC_displayDay(void)
{
  transmitString_F(PSTR("    Day: "));
     b40:	8b e0       	ldi	r24, 0x0B	; 11
     b42:	95 e0       	ldi	r25, 0x05	; 5
     b44:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
  
  switch(DAY)
     b48:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <rtc_register+0x3>
     b4c:	8e 2f       	mov	r24, r30
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	87 30       	cpi	r24, 0x07	; 7
     b52:	91 05       	cpc	r25, r1
     b54:	40 f5       	brcc	.+80     	; 0xba6 <_Z14RTC_displayDayv+0x66>
     b56:	fc 01       	movw	r30, r24
     b58:	e6 5d       	subi	r30, 0xD6	; 214
     b5a:	ff 4f       	sbci	r31, 0xFF	; 255
     b5c:	0c 94 e4 17 	jmp	0x2fc8	; 0x2fc8 <__tablejump2__>
  {
   case 0:transmitString_F(PSTR("Sunday"));
     b60:	84 e0       	ldi	r24, 0x04	; 4
     b62:	95 e0       	ldi	r25, 0x05	; 5
     b64:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
          break; 
     b68:	08 95       	ret
   case 1:transmitString_F(PSTR("Monday"));
     b6a:	8d ef       	ldi	r24, 0xFD	; 253
     b6c:	94 e0       	ldi	r25, 0x04	; 4
     b6e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
          break; 
     b72:	08 95       	ret
   case 2:transmitString_F(PSTR("Tuesday"));
     b74:	85 ef       	ldi	r24, 0xF5	; 245
     b76:	94 e0       	ldi	r25, 0x04	; 4
     b78:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
          break; 
     b7c:	08 95       	ret
   case 3:transmitString_F(PSTR("Wednesday"));
     b7e:	8b ee       	ldi	r24, 0xEB	; 235
     b80:	94 e0       	ldi	r25, 0x04	; 4
     b82:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
          break; 
     b86:	08 95       	ret
   case 4:transmitString_F(PSTR("Thursday"));
     b88:	82 ee       	ldi	r24, 0xE2	; 226
     b8a:	94 e0       	ldi	r25, 0x04	; 4
     b8c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
          break; 		  
     b90:	08 95       	ret
   case 5:transmitString_F(PSTR("Friday"));
     b92:	8b ed       	ldi	r24, 0xDB	; 219
     b94:	94 e0       	ldi	r25, 0x04	; 4
     b96:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
          break; 		  
     b9a:	08 95       	ret
   case 6:transmitString_F(PSTR("Saturday"));
     b9c:	82 ed       	ldi	r24, 0xD2	; 210
     b9e:	94 e0       	ldi	r25, 0x04	; 4
     ba0:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
          break; 
     ba4:	08 95       	ret
   default:	transmitString_F(PSTR("Unknown"));  
     ba6:	8a ec       	ldi	r24, 0xCA	; 202
     ba8:	94 e0       	ldi	r25, 0x04	; 4
     baa:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
     bae:	08 95       	ret

00000bb0 <_Z15RTC_displayDatev>:
//Function to display date on LCD and send it to PC (UART)
//****************************************************************** 
unsigned char RTC_displayDate(void)
{
  unsigned char error;
  error = RTC_getDate();
     bb0:	0e 94 55 05 	call	0xaaa	; 0xaaa <_Z11RTC_getDatev>
  if(error) return 1;
     bb4:	81 11       	cpse	r24, r1
     bb6:	12 c0       	rjmp	.+36     	; 0xbdc <_Z15RTC_displayDatev+0x2c>
  
  TX_NEWLINE;
     bb8:	8d e0       	ldi	r24, 0x0D	; 13
     bba:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
     bbe:	8a e0       	ldi	r24, 0x0A	; 10
     bc0:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
  transmitString_F(PSTR("Date:")); 
     bc4:	85 e1       	ldi	r24, 0x15	; 21
     bc6:	95 e0       	ldi	r25, 0x05	; 5
     bc8:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
  transmitString(date);  
     bcc:	84 e2       	ldi	r24, 0x24	; 36
     bce:	91 e0       	ldi	r25, 0x01	; 1
     bd0:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_Z14transmitStringPh>
  RTC_displayDay();  
     bd4:	0e 94 a0 05 	call	0xb40	; 0xb40 <_Z14RTC_displayDayv>
  
  return 0; 
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	08 95       	ret
//****************************************************************** 
unsigned char RTC_displayDate(void)
{
  unsigned char error;
  error = RTC_getDate();
  if(error) return 1;
     bdc:	81 e0       	ldi	r24, 0x01	; 1
  transmitString_F(PSTR("Date:")); 
  transmitString(date);  
  RTC_displayDay();  
  
  return 0; 
}
     bde:	08 95       	ret

00000be0 <_Z19RTC_updateRegistersv>:
//******************************************************************
//Function to update buffer rtc_register[] for next writing to RTC
//****************************************************************** 
void RTC_updateRegisters(void)
{
  SECONDS = ((time[6] & 0x07) << 4) | (time[7] & 0x0f);
     be0:	e9 e1       	ldi	r30, 0x19	; 25
     be2:	f1 e0       	ldi	r31, 0x01	; 1
     be4:	af e2       	ldi	r26, 0x2F	; 47
     be6:	b1 e0       	ldi	r27, 0x01	; 1
     be8:	16 96       	adiw	r26, 0x06	; 6
     bea:	8c 91       	ld	r24, X
     bec:	16 97       	sbiw	r26, 0x06	; 6
     bee:	87 70       	andi	r24, 0x07	; 7
     bf0:	20 e1       	ldi	r18, 0x10	; 16
     bf2:	82 9f       	mul	r24, r18
     bf4:	c0 01       	movw	r24, r0
     bf6:	11 24       	eor	r1, r1
     bf8:	17 96       	adiw	r26, 0x07	; 7
     bfa:	9c 91       	ld	r25, X
     bfc:	17 97       	sbiw	r26, 0x07	; 7
     bfe:	9f 70       	andi	r25, 0x0F	; 15
     c00:	89 2b       	or	r24, r25
     c02:	80 83       	st	Z, r24
  MINUTES = ((time[3] & 0x07) << 4) | (time[4] & 0x0f);
     c04:	13 96       	adiw	r26, 0x03	; 3
     c06:	8c 91       	ld	r24, X
     c08:	13 97       	sbiw	r26, 0x03	; 3
     c0a:	87 70       	andi	r24, 0x07	; 7
     c0c:	20 e1       	ldi	r18, 0x10	; 16
     c0e:	82 9f       	mul	r24, r18
     c10:	c0 01       	movw	r24, r0
     c12:	11 24       	eor	r1, r1
     c14:	14 96       	adiw	r26, 0x04	; 4
     c16:	9c 91       	ld	r25, X
     c18:	14 97       	sbiw	r26, 0x04	; 4
     c1a:	9f 70       	andi	r25, 0x0F	; 15
     c1c:	89 2b       	or	r24, r25
     c1e:	81 83       	std	Z+1, r24	; 0x01
  HOURS = ((time[0] & 0x03) << 4) | (time[1] & 0x0f);  
     c20:	8c 91       	ld	r24, X
     c22:	83 70       	andi	r24, 0x03	; 3
     c24:	20 e1       	ldi	r18, 0x10	; 16
     c26:	82 9f       	mul	r24, r18
     c28:	c0 01       	movw	r24, r0
     c2a:	11 24       	eor	r1, r1
     c2c:	11 96       	adiw	r26, 0x01	; 1
     c2e:	9c 91       	ld	r25, X
     c30:	9f 70       	andi	r25, 0x0F	; 15
     c32:	89 2b       	or	r24, r25
     c34:	82 83       	std	Z+2, r24	; 0x02
  DAY = date[10];
     c36:	a4 e2       	ldi	r26, 0x24	; 36
     c38:	b1 e0       	ldi	r27, 0x01	; 1
     c3a:	1a 96       	adiw	r26, 0x0a	; 10
     c3c:	8c 91       	ld	r24, X
     c3e:	1a 97       	sbiw	r26, 0x0a	; 10
     c40:	83 83       	std	Z+3, r24	; 0x03
  DATE = ((date[0] & 0x03) << 4) | (date[1] & 0x0f);
     c42:	8c 91       	ld	r24, X
     c44:	83 70       	andi	r24, 0x03	; 3
     c46:	20 e1       	ldi	r18, 0x10	; 16
     c48:	82 9f       	mul	r24, r18
     c4a:	c0 01       	movw	r24, r0
     c4c:	11 24       	eor	r1, r1
     c4e:	11 96       	adiw	r26, 0x01	; 1
     c50:	9c 91       	ld	r25, X
     c52:	11 97       	sbiw	r26, 0x01	; 1
     c54:	9f 70       	andi	r25, 0x0F	; 15
     c56:	89 2b       	or	r24, r25
     c58:	84 83       	std	Z+4, r24	; 0x04
  MONTH = ((date[3] & 0x01) << 4) | (date[4] & 0x0f);
     c5a:	13 96       	adiw	r26, 0x03	; 3
     c5c:	8c 91       	ld	r24, X
     c5e:	13 97       	sbiw	r26, 0x03	; 3
     c60:	28 2f       	mov	r18, r24
     c62:	21 70       	andi	r18, 0x01	; 1
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	22 95       	swap	r18
     c68:	32 95       	swap	r19
     c6a:	30 7f       	andi	r19, 0xF0	; 240
     c6c:	32 27       	eor	r19, r18
     c6e:	20 7f       	andi	r18, 0xF0	; 240
     c70:	32 27       	eor	r19, r18
     c72:	14 96       	adiw	r26, 0x04	; 4
     c74:	8c 91       	ld	r24, X
     c76:	14 97       	sbiw	r26, 0x04	; 4
     c78:	8f 70       	andi	r24, 0x0F	; 15
     c7a:	28 2b       	or	r18, r24
     c7c:	25 83       	std	Z+5, r18	; 0x05
  YEAR = ((date[8] & 0x0f) << 4) | (date[9] & 0x0f);
     c7e:	18 96       	adiw	r26, 0x08	; 8
     c80:	8c 91       	ld	r24, X
     c82:	18 97       	sbiw	r26, 0x08	; 8
     c84:	20 e1       	ldi	r18, 0x10	; 16
     c86:	82 9f       	mul	r24, r18
     c88:	c0 01       	movw	r24, r0
     c8a:	11 24       	eor	r1, r1
     c8c:	19 96       	adiw	r26, 0x09	; 9
     c8e:	9c 91       	ld	r25, X
     c90:	9f 70       	andi	r25, 0x0F	; 15
     c92:	89 2b       	or	r24, r25
     c94:	86 83       	std	Z+6, r24	; 0x06
     c96:	08 95       	ret

00000c98 <_Z13RTC_writeTimev>:

//******************************************************************
//Function to write new time in the RTC 
//******************************************************************   
unsigned char RTC_writeTime(void)
{
     c98:	0f 93       	push	r16
     c9a:	1f 93       	push	r17
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
  unsigned char errorStatus, i;
  
   errorStatus = i2c_start();
     ca0:	0e 94 83 04 	call	0x906	; 0x906 <_Z9i2c_startv>
   if(errorStatus == 1)
     ca4:	81 30       	cpi	r24, 0x01	; 1
     ca6:	21 f4       	brne	.+8      	; 0xcb0 <_Z13RTC_writeTimev+0x18>
     ca8:	84 e9       	ldi	r24, 0x94	; 148
     caa:	86 bf       	out	0x36, r24	; 54
   {
     //transmitString_F(PSTR("RTC start1 failed.."));
   	 i2c_stop();
	 return(1);
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	25 c0       	rjmp	.+74     	; 0xcfa <_Z13RTC_writeTimev+0x62>
   } 
   
   errorStatus = i2c_sendAddress(DS1307_W);
     cb0:	80 ed       	ldi	r24, 0xD0	; 208
     cb2:	0e 94 9b 04 	call	0x936	; 0x936 <_Z15i2c_sendAddressh>
   
   if(errorStatus == 1)
     cb6:	81 30       	cpi	r24, 0x01	; 1
     cb8:	21 f4       	brne	.+8      	; 0xcc2 <_Z13RTC_writeTimev+0x2a>
     cba:	84 e9       	ldi	r24, 0x94	; 148
     cbc:	86 bf       	out	0x36, r24	; 54
   {
     //transmitString_F(PSTR("RTC sendAddress1 failed.."));
	 i2c_stop();
	 return(1);
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	1c c0       	rjmp	.+56     	; 0xcfa <_Z13RTC_writeTimev+0x62>
   } 
   
   errorStatus = i2c_sendData(0x00);
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	0e 94 ad 04 	call	0x95a	; 0x95a <_Z12i2c_sendDatah>
   if(errorStatus == 1)
     cc8:	81 30       	cpi	r24, 0x01	; 1
     cca:	21 f4       	brne	.+8      	; 0xcd4 <_Z13RTC_writeTimev+0x3c>
     ccc:	84 e9       	ldi	r24, 0x94	; 148
     cce:	86 bf       	out	0x36, r24	; 54
   {
     //transmitString_F(PSTR("RTC write-1 failed.."));
	 i2c_stop();
	 return(1);
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	13 c0       	rjmp	.+38     	; 0xcfa <_Z13RTC_writeTimev+0x62>
     cd4:	c9 e1       	ldi	r28, 0x19	; 25
     cd6:	d1 e0       	ldi	r29, 0x01	; 1
     cd8:	0c e1       	ldi	r16, 0x1C	; 28
     cda:	11 e0       	ldi	r17, 0x01	; 1
   } 

    for(i=0;i<3;i++)
    {
	  errorStatus = i2c_sendData(rtc_register[i]);  
     cdc:	89 91       	ld	r24, Y+
     cde:	0e 94 ad 04 	call	0x95a	; 0x95a <_Z12i2c_sendDatah>
   	  if(errorStatus == 1)
     ce2:	81 30       	cpi	r24, 0x01	; 1
     ce4:	21 f4       	brne	.+8      	; 0xcee <_Z13RTC_writeTimev+0x56>
     ce6:	84 e9       	ldi	r24, 0x94	; 148
     ce8:	86 bf       	out	0x36, r24	; 54
   	  {
       		//transmitString_F(PSTR("RTC write time failed.."));
			i2c_stop();
	   		return(1);
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	06 c0       	rjmp	.+12     	; 0xcfa <_Z13RTC_writeTimev+0x62>
     //transmitString_F(PSTR("RTC write-1 failed.."));
	 i2c_stop();
	 return(1);
   } 

    for(i=0;i<3;i++)
     cee:	c0 17       	cp	r28, r16
     cf0:	d1 07       	cpc	r29, r17
     cf2:	a1 f7       	brne	.-24     	; 0xcdc <_Z13RTC_writeTimev+0x44>
     cf4:	84 e9       	ldi	r24, 0x94	; 148
     cf6:	86 bf       	out	0x36, r24	; 54
	   		return(1);
   	  }
    }
	
	i2c_stop();
	return(0);
     cf8:	80 e0       	ldi	r24, 0x00	; 0
}
     cfa:	df 91       	pop	r29
     cfc:	cf 91       	pop	r28
     cfe:	1f 91       	pop	r17
     d00:	0f 91       	pop	r16
     d02:	08 95       	ret

00000d04 <_Z13RTC_writeDatev>:

//******************************************************************
//Function to write new date in the RTC
//******************************************************************   
unsigned char RTC_writeDate(void)
{
     d04:	0f 93       	push	r16
     d06:	1f 93       	push	r17
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
  unsigned char errorStatus, i;
  
   errorStatus = i2c_start();
     d0c:	0e 94 83 04 	call	0x906	; 0x906 <_Z9i2c_startv>
   if(errorStatus == 1)
     d10:	81 30       	cpi	r24, 0x01	; 1
     d12:	21 f4       	brne	.+8      	; 0xd1c <_Z13RTC_writeDatev+0x18>
     d14:	84 e9       	ldi	r24, 0x94	; 148
     d16:	86 bf       	out	0x36, r24	; 54
   {
     //transmitString_F(PSTR("RTC start1 failed.."));
   	 i2c_stop();
	 return(1);
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	25 c0       	rjmp	.+74     	; 0xd66 <_Z13RTC_writeDatev+0x62>
   } 
   
   errorStatus = i2c_sendAddress(DS1307_W);
     d1c:	80 ed       	ldi	r24, 0xD0	; 208
     d1e:	0e 94 9b 04 	call	0x936	; 0x936 <_Z15i2c_sendAddressh>
   
   if(errorStatus == 1)
     d22:	81 30       	cpi	r24, 0x01	; 1
     d24:	21 f4       	brne	.+8      	; 0xd2e <_Z13RTC_writeDatev+0x2a>
     d26:	84 e9       	ldi	r24, 0x94	; 148
     d28:	86 bf       	out	0x36, r24	; 54
   {
     //transmitString_F(PSTR("RTC sendAddress1 failed.."));
	 i2c_stop();
	 return(1);
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	1c c0       	rjmp	.+56     	; 0xd66 <_Z13RTC_writeDatev+0x62>
   } 
   
   errorStatus = i2c_sendData(0x03);
     d2e:	83 e0       	ldi	r24, 0x03	; 3
     d30:	0e 94 ad 04 	call	0x95a	; 0x95a <_Z12i2c_sendDatah>
   if(errorStatus == 1)
     d34:	81 30       	cpi	r24, 0x01	; 1
     d36:	21 f4       	brne	.+8      	; 0xd40 <_Z13RTC_writeDatev+0x3c>
     d38:	84 e9       	ldi	r24, 0x94	; 148
     d3a:	86 bf       	out	0x36, r24	; 54
   {
     //transmitString_F(PSTR("RTC write-1 failed.."));
	 i2c_stop();
	 return(1);
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	13 c0       	rjmp	.+38     	; 0xd66 <_Z13RTC_writeDatev+0x62>
     d40:	cc e1       	ldi	r28, 0x1C	; 28
     d42:	d1 e0       	ldi	r29, 0x01	; 1
     d44:	00 e2       	ldi	r16, 0x20	; 32
     d46:	11 e0       	ldi	r17, 0x01	; 1
   } 

    for(i=3;i<7;i++)
    {
	  errorStatus = i2c_sendData(rtc_register[i]);  
     d48:	89 91       	ld	r24, Y+
     d4a:	0e 94 ad 04 	call	0x95a	; 0x95a <_Z12i2c_sendDatah>
   	  if(errorStatus == 1)
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	21 f4       	brne	.+8      	; 0xd5a <_Z13RTC_writeDatev+0x56>
     d52:	84 e9       	ldi	r24, 0x94	; 148
     d54:	86 bf       	out	0x36, r24	; 54
   	  {
       		//transmitString_F(PSTR("RTC write date failed.."));
			i2c_stop();
	   		return(1);
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	06 c0       	rjmp	.+12     	; 0xd66 <_Z13RTC_writeDatev+0x62>
     //transmitString_F(PSTR("RTC write-1 failed.."));
	 i2c_stop();
	 return(1);
   } 

    for(i=3;i<7;i++)
     d5a:	c0 17       	cp	r28, r16
     d5c:	d1 07       	cpc	r29, r17
     d5e:	a1 f7       	brne	.-24     	; 0xd48 <_Z13RTC_writeDatev+0x44>
     d60:	84 e9       	ldi	r24, 0x94	; 148
     d62:	86 bf       	out	0x36, r24	; 54
	   		return(1);
   	  }
    }
	
	i2c_stop();
	return(0);
     d64:	80 e0       	ldi	r24, 0x00	; 0
}
     d66:	df 91       	pop	r29
     d68:	cf 91       	pop	r28
     d6a:	1f 91       	pop	r17
     d6c:	0f 91       	pop	r16
     d6e:	08 95       	ret

00000d70 <_Z14RTC_updateTimev>:
  
//******************************************************************
//Function to update RTC time by entering it at hyper terminal
//******************************************************************   
unsigned char RTC_updateTime(void)
{
     d70:	0f 93       	push	r16
     d72:	1f 93       	push	r17
     d74:	cf 93       	push	r28
  unsigned char data;
  TX_NEWLINE;
     d76:	8d e0       	ldi	r24, 0x0D	; 13
     d78:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
     d7c:	8a e0       	ldi	r24, 0x0A	; 10
     d7e:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
  transmitString_F(PSTR("Enter Time in 24h format(hh:mm:ss):")); 
     d82:	86 ea       	ldi	r24, 0xA6	; 166
     d84:	94 e0       	ldi	r25, 0x04	; 4
     d86:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
  
    data = receiveByte(); 	   	  	  				//receive hours
     d8a:	0e 94 c9 02 	call	0x592	; 0x592 <_Z11receiveBytev>
     d8e:	c8 2f       	mov	r28, r24
	transmitByte(data);
     d90:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
	if(data < 0x30 || data > 0x32)
     d94:	80 ed       	ldi	r24, 0xD0	; 208
     d96:	8c 0f       	add	r24, r28
     d98:	83 30       	cpi	r24, 0x03	; 3
     d9a:	08 f0       	brcs	.+2      	; 0xd9e <_Z14RTC_updateTimev+0x2e>
     d9c:	72 c0       	rjmp	.+228    	; 0xe82 <_Z14RTC_updateTimev+0x112>
	   goto TIME_ERROR;
	   
	time[0]= data;
     d9e:	c0 93 2f 01 	sts	0x012F, r28	; 0x80012f <time>
	 
	data = receiveByte();
     da2:	0e 94 c9 02 	call	0x592	; 0x592 <_Z11receiveBytev>
     da6:	c8 2f       	mov	r28, r24
	transmitByte(data);
     da8:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
	if(data < 0x30 || data > 0x39)
     dac:	80 ed       	ldi	r24, 0xD0	; 208
     dae:	8c 0f       	add	r24, r28
     db0:	8a 30       	cpi	r24, 0x0A	; 10
     db2:	08 f0       	brcs	.+2      	; 0xdb6 <_Z14RTC_updateTimev+0x46>
     db4:	66 c0       	rjmp	.+204    	; 0xe82 <_Z14RTC_updateTimev+0x112>
	   goto TIME_ERROR;
	 
	time[1]= data;
     db6:	0f e2       	ldi	r16, 0x2F	; 47
     db8:	11 e0       	ldi	r17, 0x01	; 1
     dba:	f8 01       	movw	r30, r16
     dbc:	c1 83       	std	Z+1, r28	; 0x01
	
	transmitByte(':');
     dbe:	8a e3       	ldi	r24, 0x3A	; 58
     dc0:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
	
	if(((time[1] & 0x0f) + ((time[0] & 0x03)*10)) > 23)
     dc4:	f8 01       	movw	r30, r16
     dc6:	21 81       	ldd	r18, Z+1	; 0x01
     dc8:	2f 70       	andi	r18, 0x0F	; 15
     dca:	80 81       	ld	r24, Z
     dcc:	83 70       	andi	r24, 0x03	; 3
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	ac 01       	movw	r20, r24
     dd2:	44 0f       	add	r20, r20
     dd4:	55 1f       	adc	r21, r21
     dd6:	88 0f       	add	r24, r24
     dd8:	99 1f       	adc	r25, r25
     dda:	88 0f       	add	r24, r24
     ddc:	99 1f       	adc	r25, r25
     dde:	88 0f       	add	r24, r24
     de0:	99 1f       	adc	r25, r25
     de2:	84 0f       	add	r24, r20
     de4:	95 1f       	adc	r25, r21
     de6:	82 0f       	add	r24, r18
     de8:	91 1d       	adc	r25, r1
     dea:	48 97       	sbiw	r24, 0x18	; 24
     dec:	0c f0       	brlt	.+2      	; 0xdf0 <_Z14RTC_updateTimev+0x80>
     dee:	49 c0       	rjmp	.+146    	; 0xe82 <_Z14RTC_updateTimev+0x112>
	   goto TIME_ERROR;
	 
	 data = receiveByte();			   			  //receive minutes
     df0:	0e 94 c9 02 	call	0x592	; 0x592 <_Z11receiveBytev>
     df4:	c8 2f       	mov	r28, r24
	 transmitByte(data);
     df6:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
	if(data < 0x30 || data > 0x35)
     dfa:	80 ed       	ldi	r24, 0xD0	; 208
     dfc:	8c 0f       	add	r24, r28
     dfe:	86 30       	cpi	r24, 0x06	; 6
     e00:	08 f0       	brcs	.+2      	; 0xe04 <_Z14RTC_updateTimev+0x94>
     e02:	3f c0       	rjmp	.+126    	; 0xe82 <_Z14RTC_updateTimev+0x112>
	   goto TIME_ERROR;
	   
	time[3]= data; 
     e04:	c0 93 32 01 	sts	0x0132, r28	; 0x800132 <time+0x3>
	
	data = receiveByte();
     e08:	0e 94 c9 02 	call	0x592	; 0x592 <_Z11receiveBytev>
     e0c:	c8 2f       	mov	r28, r24
	transmitByte(data);
     e0e:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
	if(data < 0x30 || data > 0x39)
     e12:	80 ed       	ldi	r24, 0xD0	; 208
     e14:	8c 0f       	add	r24, r28
     e16:	8a 30       	cpi	r24, 0x0A	; 10
     e18:	a0 f5       	brcc	.+104    	; 0xe82 <_Z14RTC_updateTimev+0x112>
	   goto TIME_ERROR;
	   
	time[4]= data; 
     e1a:	c0 93 33 01 	sts	0x0133, r28	; 0x800133 <time+0x4>
	
	transmitByte(':');
     e1e:	8a e3       	ldi	r24, 0x3A	; 58
     e20:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
	
	 data = receiveByte();			   			  //receive seconds
     e24:	0e 94 c9 02 	call	0x592	; 0x592 <_Z11receiveBytev>
     e28:	c8 2f       	mov	r28, r24
	 transmitByte(data);
     e2a:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
	if(data < 0x30 || data > 0x35)
     e2e:	80 ed       	ldi	r24, 0xD0	; 208
     e30:	8c 0f       	add	r24, r28
     e32:	86 30       	cpi	r24, 0x06	; 6
     e34:	30 f5       	brcc	.+76     	; 0xe82 <_Z14RTC_updateTimev+0x112>
	   goto TIME_ERROR;
	   
	time[6]= data; 
     e36:	c0 93 35 01 	sts	0x0135, r28	; 0x800135 <time+0x6>
	
	data = receiveByte();
     e3a:	0e 94 c9 02 	call	0x592	; 0x592 <_Z11receiveBytev>
     e3e:	c8 2f       	mov	r28, r24
	transmitByte(data);
     e40:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
	if(data < 0x30 || data > 0x39)
     e44:	80 ed       	ldi	r24, 0xD0	; 208
     e46:	8c 0f       	add	r24, r28
     e48:	8a 30       	cpi	r24, 0x0A	; 10
     e4a:	d8 f4       	brcc	.+54     	; 0xe82 <_Z14RTC_updateTimev+0x112>
	   goto TIME_ERROR;
	   
	time[7]= data; 
     e4c:	c0 93 36 01 	sts	0x0136, r28	; 0x800136 <time+0x7>
	
	 	  
  RTC_updateRegisters(); 
     e50:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <_Z19RTC_updateRegistersv>
  data = RTC_writeTime();
     e54:	0e 94 4c 06 	call	0xc98	; 0xc98 <_Z13RTC_writeTimev>
     e58:	c8 2f       	mov	r28, r24

  TX_NEWLINE;
     e5a:	8d e0       	ldi	r24, 0x0D	; 13
     e5c:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
     e60:	8a e0       	ldi	r24, 0x0A	; 10
     e62:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
  if(data == 0)
     e66:	c1 11       	cpse	r28, r1
     e68:	06 c0       	rjmp	.+12     	; 0xe76 <_Z14RTC_updateTimev+0x106>
  {     
  	 transmitString_F(PSTR("Time Updated sucessfully!")); 
     e6a:	8c e8       	ldi	r24, 0x8C	; 140
     e6c:	94 e0       	ldi	r25, 0x04	; 4
     e6e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
	 return 0;
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	11 c0       	rjmp	.+34     	; 0xe98 <_Z14RTC_updateTimev+0x128>
  }	
  else 
  { 
     transmitString_F(PSTR("Time Update Failed.."));
     e76:	87 e7       	ldi	r24, 0x77	; 119
     e78:	94 e0       	ldi	r25, 0x04	; 4
     e7a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
	 return 1;
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	0b c0       	rjmp	.+22     	; 0xe98 <_Z14RTC_updateTimev+0x128>
  }
TIME_ERROR:

  TX_NEWLINE;
     e82:	8d e0       	ldi	r24, 0x0D	; 13
     e84:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
     e88:	8a e0       	ldi	r24, 0x0A	; 10
     e8a:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
  transmitString_F(PSTR("Invalid Entry..")); 
     e8e:	87 e6       	ldi	r24, 0x67	; 103
     e90:	94 e0       	ldi	r25, 0x04	; 4
     e92:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
  return 1;
     e96:	81 e0       	ldi	r24, 0x01	; 1
}  
     e98:	cf 91       	pop	r28
     e9a:	1f 91       	pop	r17
     e9c:	0f 91       	pop	r16
     e9e:	08 95       	ret

00000ea0 <_Z14RTC_updateDatev>:
  
//******************************************************************
//Function to update RTC date by entering it at hyper terminal
//******************************************************************   
unsigned char RTC_updateDate(void)
{
     ea0:	cf 93       	push	r28
  unsigned char data;
  TX_NEWLINE;
     ea2:	8d e0       	ldi	r24, 0x0D	; 13
     ea4:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
     ea8:	8a e0       	ldi	r24, 0x0A	; 10
     eaa:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
  transmitString_F(PSTR("Enter Date (dd/mm/yy):")); 
     eae:	80 e5       	ldi	r24, 0x50	; 80
     eb0:	94 e0       	ldi	r25, 0x04	; 4
     eb2:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
  
    data = receiveByte(); 	   				  		//receive date
     eb6:	0e 94 c9 02 	call	0x592	; 0x592 <_Z11receiveBytev>
     eba:	c8 2f       	mov	r28, r24
	transmitByte(data); 	   	  	  				
     ebc:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
	if(data < 0x30 || data > 0x33)
     ec0:	80 ed       	ldi	r24, 0xD0	; 208
     ec2:	8c 0f       	add	r24, r28
     ec4:	84 30       	cpi	r24, 0x04	; 4
     ec6:	08 f0       	brcs	.+2      	; 0xeca <_Z14RTC_updateDatev+0x2a>
     ec8:	a7 c0       	rjmp	.+334    	; 0x1018 <_Z14RTC_updateDatev+0x178>
	   goto DATE_ERROR;
	   
	date[0]= data;
     eca:	c0 93 24 01 	sts	0x0124, r28	; 0x800124 <date>
	 
	data = receiveByte();
     ece:	0e 94 c9 02 	call	0x592	; 0x592 <_Z11receiveBytev>
     ed2:	c8 2f       	mov	r28, r24
	transmitByte(data);
     ed4:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
	if(data < 0x30 || data > 0x39)
     ed8:	80 ed       	ldi	r24, 0xD0	; 208
     eda:	8c 0f       	add	r24, r28
     edc:	8a 30       	cpi	r24, 0x0A	; 10
     ede:	08 f0       	brcs	.+2      	; 0xee2 <_Z14RTC_updateDatev+0x42>
     ee0:	9b c0       	rjmp	.+310    	; 0x1018 <_Z14RTC_updateDatev+0x178>
	   goto DATE_ERROR;
	   
	date[1]= data;
     ee2:	e4 e2       	ldi	r30, 0x24	; 36
     ee4:	f1 e0       	ldi	r31, 0x01	; 1
     ee6:	c1 83       	std	Z+1, r28	; 0x01
	
	if(((date[1] & 0x0f) + ((date[0] & 0x03)*10)) > 31)
     ee8:	cf 70       	andi	r28, 0x0F	; 15
     eea:	20 81       	ld	r18, Z
     eec:	23 70       	andi	r18, 0x03	; 3
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	c9 01       	movw	r24, r18
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	22 0f       	add	r18, r18
     ef8:	33 1f       	adc	r19, r19
     efa:	22 0f       	add	r18, r18
     efc:	33 1f       	adc	r19, r19
     efe:	22 0f       	add	r18, r18
     f00:	33 1f       	adc	r19, r19
     f02:	28 0f       	add	r18, r24
     f04:	39 1f       	adc	r19, r25
     f06:	2c 0f       	add	r18, r28
     f08:	31 1d       	adc	r19, r1
     f0a:	20 32       	cpi	r18, 0x20	; 32
     f0c:	31 05       	cpc	r19, r1
     f0e:	0c f0       	brlt	.+2      	; 0xf12 <_Z14RTC_updateDatev+0x72>
     f10:	83 c0       	rjmp	.+262    	; 0x1018 <_Z14RTC_updateDatev+0x178>
	   goto DATE_ERROR;
    transmitByte('/');
     f12:	8f e2       	ldi	r24, 0x2F	; 47
     f14:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
	
	date[2] = '/';
     f18:	8f e2       	ldi	r24, 0x2F	; 47
     f1a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <date+0x2>
	   
	
	data = receiveByte();			   			  //receive month
     f1e:	0e 94 c9 02 	call	0x592	; 0x592 <_Z11receiveBytev>
     f22:	c8 2f       	mov	r28, r24
	transmitByte(data);
     f24:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
	if(data < 0x30 || data > 0x31)
     f28:	80 ed       	ldi	r24, 0xD0	; 208
     f2a:	8c 0f       	add	r24, r28
     f2c:	82 30       	cpi	r24, 0x02	; 2
     f2e:	08 f0       	brcs	.+2      	; 0xf32 <_Z14RTC_updateDatev+0x92>
     f30:	73 c0       	rjmp	.+230    	; 0x1018 <_Z14RTC_updateDatev+0x178>
	  goto DATE_ERROR;
	  
	date[3]= data; 
     f32:	c0 93 27 01 	sts	0x0127, r28	; 0x800127 <date+0x3>
	
	data = receiveByte();
     f36:	0e 94 c9 02 	call	0x592	; 0x592 <_Z11receiveBytev>
     f3a:	c8 2f       	mov	r28, r24
	transmitByte(data);
     f3c:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
	if(data < 0x30 || data > 0x39)
     f40:	80 ed       	ldi	r24, 0xD0	; 208
     f42:	8c 0f       	add	r24, r28
     f44:	8a 30       	cpi	r24, 0x0A	; 10
     f46:	08 f0       	brcs	.+2      	; 0xf4a <_Z14RTC_updateDatev+0xaa>
     f48:	67 c0       	rjmp	.+206    	; 0x1018 <_Z14RTC_updateDatev+0x178>
	  goto DATE_ERROR;
	  
	date[4] = data; 
     f4a:	e4 e2       	ldi	r30, 0x24	; 36
     f4c:	f1 e0       	ldi	r31, 0x01	; 1
     f4e:	c4 83       	std	Z+4, r28	; 0x04
	
	if(((date[4] & 0x0f) + ((date[3] & 0x03)*10)) > 12)
     f50:	cf 70       	andi	r28, 0x0F	; 15
     f52:	23 81       	ldd	r18, Z+3	; 0x03
     f54:	23 70       	andi	r18, 0x03	; 3
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	c9 01       	movw	r24, r18
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	22 0f       	add	r18, r18
     f60:	33 1f       	adc	r19, r19
     f62:	22 0f       	add	r18, r18
     f64:	33 1f       	adc	r19, r19
     f66:	22 0f       	add	r18, r18
     f68:	33 1f       	adc	r19, r19
     f6a:	82 0f       	add	r24, r18
     f6c:	93 1f       	adc	r25, r19
     f6e:	8c 0f       	add	r24, r28
     f70:	91 1d       	adc	r25, r1
     f72:	0d 97       	sbiw	r24, 0x0d	; 13
     f74:	0c f0       	brlt	.+2      	; 0xf78 <_Z14RTC_updateDatev+0xd8>
     f76:	50 c0       	rjmp	.+160    	; 0x1018 <_Z14RTC_updateDatev+0x178>
	   goto DATE_ERROR;
	transmitByte('/');
     f78:	8f e2       	ldi	r24, 0x2F	; 47
     f7a:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
	   
	
	date[5] = '/';
     f7e:	e4 e2       	ldi	r30, 0x24	; 36
     f80:	f1 e0       	ldi	r31, 0x01	; 1
     f82:	8f e2       	ldi	r24, 0x2F	; 47
     f84:	85 83       	std	Z+5, r24	; 0x05
	
	date[6] = '2'; 	   	   	  	  //year is 20xx
     f86:	82 e3       	ldi	r24, 0x32	; 50
     f88:	86 83       	std	Z+6, r24	; 0x06
	date[7] = '0';
     f8a:	80 e3       	ldi	r24, 0x30	; 48
     f8c:	87 83       	std	Z+7, r24	; 0x07
	
	data = receiveByte();			   			 
     f8e:	0e 94 c9 02 	call	0x592	; 0x592 <_Z11receiveBytev>
     f92:	c8 2f       	mov	r28, r24
	transmitByte(data);
     f94:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
	if(data < 0x30 || data > 0x39)
     f98:	80 ed       	ldi	r24, 0xD0	; 208
     f9a:	8c 0f       	add	r24, r28
     f9c:	8a 30       	cpi	r24, 0x0A	; 10
     f9e:	e0 f5       	brcc	.+120    	; 0x1018 <_Z14RTC_updateDatev+0x178>
	   goto DATE_ERROR;
	   
	date[8]= data; 
     fa0:	c0 93 2c 01 	sts	0x012C, r28	; 0x80012c <date+0x8>
	
	data = receiveByte();
     fa4:	0e 94 c9 02 	call	0x592	; 0x592 <_Z11receiveBytev>
     fa8:	c8 2f       	mov	r28, r24
	transmitByte(data);
     faa:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
	if(data < 0x30 || data > 0x39)
     fae:	80 ed       	ldi	r24, 0xD0	; 208
     fb0:	8c 0f       	add	r24, r28
     fb2:	8a 30       	cpi	r24, 0x0A	; 10
     fb4:	88 f5       	brcc	.+98     	; 0x1018 <_Z14RTC_updateDatev+0x178>
	   goto DATE_ERROR;
	   
	date[9]= data; 
     fb6:	c0 93 2d 01 	sts	0x012D, r28	; 0x80012d <date+0x9>
	
	TX_NEWLINE;
     fba:	8d e0       	ldi	r24, 0x0D	; 13
     fbc:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
     fc0:	8a e0       	ldi	r24, 0x0A	; 10
     fc2:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
    transmitString_F(PSTR("Enter Day (Sunday:0, Monday:1...) (0-6):")); 
     fc6:	87 e2       	ldi	r24, 0x27	; 39
     fc8:	94 e0       	ldi	r25, 0x04	; 4
     fca:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
	
	data = receiveByte();				   //receive Day of the week
     fce:	0e 94 c9 02 	call	0x592	; 0x592 <_Z11receiveBytev>
     fd2:	c8 2f       	mov	r28, r24
	transmitByte(data);
     fd4:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
	if(data < 0x30 || data > 0x36)
     fd8:	80 ed       	ldi	r24, 0xD0	; 208
     fda:	8c 0f       	add	r24, r28
     fdc:	87 30       	cpi	r24, 0x07	; 7
     fde:	e0 f4       	brcc	.+56     	; 0x1018 <_Z14RTC_updateDatev+0x178>
	   goto DATE_ERROR;
	   
	date[10] = data & 0x0f;
     fe0:	cf 70       	andi	r28, 0x0F	; 15
     fe2:	c0 93 2e 01 	sts	0x012E, r28	; 0x80012e <date+0xa>
		 	  
  RTC_updateRegisters(); 
     fe6:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <_Z19RTC_updateRegistersv>
  data = RTC_writeDate();
     fea:	0e 94 82 06 	call	0xd04	; 0xd04 <_Z13RTC_writeDatev>
     fee:	c8 2f       	mov	r28, r24

  TX_NEWLINE;
     ff0:	8d e0       	ldi	r24, 0x0D	; 13
     ff2:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
     ff6:	8a e0       	ldi	r24, 0x0A	; 10
     ff8:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
  if(data == 0)
     ffc:	c1 11       	cpse	r28, r1
     ffe:	06 c0       	rjmp	.+12     	; 0x100c <_Z14RTC_updateDatev+0x16c>
  {
     
  	 transmitString_F(PSTR("Date Updated sucessfully!")); 
    1000:	8d e0       	ldi	r24, 0x0D	; 13
    1002:	94 e0       	ldi	r25, 0x04	; 4
    1004:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
	 return 0;
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	11 c0       	rjmp	.+34     	; 0x102e <_Z14RTC_updateDatev+0x18e>
  }	  
  else
  {
     transmitString_F(PSTR("Date Update Failed.."));
    100c:	88 ef       	ldi	r24, 0xF8	; 248
    100e:	93 e0       	ldi	r25, 0x03	; 3
    1010:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
     return 1;
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	0b c0       	rjmp	.+22     	; 0x102e <_Z14RTC_updateDatev+0x18e>
  }

  DATE_ERROR:

  TX_NEWLINE;
    1018:	8d e0       	ldi	r24, 0x0D	; 13
    101a:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
    101e:	8a e0       	ldi	r24, 0x0A	; 10
    1020:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
  transmitString_F(PSTR("Invalid Entry..")); 
    1024:	88 ee       	ldi	r24, 0xE8	; 232
    1026:	93 e0       	ldi	r25, 0x03	; 3
    1028:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
  return 1;
    102c:	81 e0       	ldi	r24, 0x01	; 1
}  
    102e:	cf 91       	pop	r28
    1030:	08 95       	ret

00001032 <_Z15getDateTime_FATv>:
{
  
   unsigned char mth, dt, hr, min, sec, error; 
   unsigned int yr;

   error = RTC_read();
    1032:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_Z8RTC_readv>
   if(error) return 1;
    1036:	81 11       	cpse	r24, r1
    1038:	78 c0       	rjmp	.+240    	; 0x112a <_Z15getDateTime_FATv+0xf8>

   yr = (YEAR & 0xf0) >> 4;
    103a:	e9 e1       	ldi	r30, 0x19	; 25
    103c:	f1 e0       	ldi	r31, 0x01	; 1
    103e:	26 81       	ldd	r18, Z+6	; 0x06
    1040:	42 2f       	mov	r20, r18
    1042:	42 95       	swap	r20
    1044:	4f 70       	andi	r20, 0x0F	; 15
    1046:	50 e0       	ldi	r21, 0x00	; 0
   yr = (yr * 10)+(YEAR & 0x0f);
    1048:	ca 01       	movw	r24, r20
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	44 0f       	add	r20, r20
    1050:	55 1f       	adc	r21, r21
    1052:	44 0f       	add	r20, r20
    1054:	55 1f       	adc	r21, r21
    1056:	44 0f       	add	r20, r20
    1058:	55 1f       	adc	r21, r21
    105a:	84 0f       	add	r24, r20
    105c:	95 1f       	adc	r25, r21
   yr = yr+2000;
   yr = yr - 1980;

   dateFAT = yr;

   mth = (MONTH & 0xf0) >> 4;
    105e:	55 81       	ldd	r21, Z+5	; 0x05
    1060:	35 2f       	mov	r19, r21
    1062:	32 95       	swap	r19
    1064:	3f 70       	andi	r19, 0x0F	; 15
   mth = (mth * 10)+(MONTH & 0x0f);
    1066:	33 0f       	add	r19, r19
    1068:	73 2f       	mov	r23, r19
    106a:	77 0f       	add	r23, r23
    106c:	77 0f       	add	r23, r23
    106e:	73 0f       	add	r23, r19

   dateFAT = (dateFAT << 4) | mth;

   dt = (DATE & 0xf0) >> 4;
    1070:	44 81       	ldd	r20, Z+4	; 0x04
    1072:	34 2f       	mov	r19, r20
    1074:	32 95       	swap	r19
    1076:	3f 70       	andi	r19, 0x0F	; 15
   dt = (dt * 10)+(DATE & 0x0f);
    1078:	33 0f       	add	r19, r19
    107a:	63 2f       	mov	r22, r19
    107c:	66 0f       	add	r22, r22
    107e:	66 0f       	add	r22, r22
    1080:	63 0f       	add	r22, r19

   error = RTC_read();
   if(error) return 1;

   yr = (YEAR & 0xf0) >> 4;
   yr = (yr * 10)+(YEAR & 0x0f);
    1082:	2f 70       	andi	r18, 0x0F	; 15
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	2c 5e       	subi	r18, 0xEC	; 236
    1088:	3f 4f       	sbci	r19, 0xFF	; 255
   yr = yr+2000;
   yr = yr - 1980;
    108a:	82 0f       	add	r24, r18
    108c:	93 1f       	adc	r25, r19
   dateFAT = yr;

   mth = (MONTH & 0xf0) >> 4;
   mth = (mth * 10)+(MONTH & 0x0f);

   dateFAT = (dateFAT << 4) | mth;
    108e:	82 95       	swap	r24
    1090:	92 95       	swap	r25
    1092:	90 7f       	andi	r25, 0xF0	; 240
    1094:	98 27       	eor	r25, r24
    1096:	80 7f       	andi	r24, 0xF0	; 240
    1098:	98 27       	eor	r25, r24
   yr = yr - 1980;

   dateFAT = yr;

   mth = (MONTH & 0xf0) >> 4;
   mth = (mth * 10)+(MONTH & 0x0f);
    109a:	5f 70       	andi	r21, 0x0F	; 15
    109c:	57 0f       	add	r21, r23

   dateFAT = (dateFAT << 4) | mth;
    109e:	85 2b       	or	r24, r21

   dt = (DATE & 0xf0) >> 4;
   dt = (dt * 10)+(DATE & 0x0f);

   dateFAT = (dateFAT << 5) | dt;
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	82 95       	swap	r24
    10a6:	92 95       	swap	r25
    10a8:	90 7f       	andi	r25, 0xF0	; 240
    10aa:	98 27       	eor	r25, r24
    10ac:	80 7f       	andi	r24, 0xF0	; 240
    10ae:	98 27       	eor	r25, r24
   mth = (mth * 10)+(MONTH & 0x0f);

   dateFAT = (dateFAT << 4) | mth;

   dt = (DATE & 0xf0) >> 4;
   dt = (dt * 10)+(DATE & 0x0f);
    10b0:	4f 70       	andi	r20, 0x0F	; 15
    10b2:	46 0f       	add	r20, r22

   dateFAT = (dateFAT << 5) | dt;
    10b4:	84 2b       	or	r24, r20
    10b6:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <dateFAT+0x1>
    10ba:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <dateFAT>


   hr = (HOURS & 0xf0) >> 4;
    10be:	92 81       	ldd	r25, Z+2	; 0x02
    10c0:	89 2f       	mov	r24, r25
    10c2:	82 95       	swap	r24
    10c4:	8f 70       	andi	r24, 0x0F	; 15
   hr = (hr * 10)+(HOURS & 0x0f);
    10c6:	88 0f       	add	r24, r24
    10c8:	28 2f       	mov	r18, r24
    10ca:	22 0f       	add	r18, r18
    10cc:	22 0f       	add	r18, r18
    10ce:	82 0f       	add	r24, r18

   timeFAT = hr;

   min = (MINUTES & 0xf0) >> 4;
    10d0:	31 81       	ldd	r19, Z+1	; 0x01
    10d2:	23 2f       	mov	r18, r19
    10d4:	22 95       	swap	r18
    10d6:	2f 70       	andi	r18, 0x0F	; 15
   min = (min * 10)+(MINUTES & 0x0f);
    10d8:	22 0f       	add	r18, r18
    10da:	52 2f       	mov	r21, r18
    10dc:	55 0f       	add	r21, r21
    10de:	55 0f       	add	r21, r21
    10e0:	52 0f       	add	r21, r18

   timeFAT = (timeFAT << 6) | min;

   sec = (SECONDS & 0xf0) >> 4;
    10e2:	20 81       	ld	r18, Z
    10e4:	42 2f       	mov	r20, r18
    10e6:	42 95       	swap	r20
    10e8:	4f 70       	andi	r20, 0x0F	; 15
   sec = (sec * 10)+(SECONDS & 0x0f);
    10ea:	44 0f       	add	r20, r20
    10ec:	64 2f       	mov	r22, r20
    10ee:	66 0f       	add	r22, r22
    10f0:	66 0f       	add	r22, r22
    10f2:	46 0f       	add	r20, r22
    10f4:	2f 70       	andi	r18, 0x0F	; 15
    10f6:	24 0f       	add	r18, r20

   dateFAT = (dateFAT << 5) | dt;


   hr = (HOURS & 0xf0) >> 4;
   hr = (hr * 10)+(HOURS & 0x0f);
    10f8:	9f 70       	andi	r25, 0x0F	; 15
    10fa:	89 0f       	add	r24, r25
   timeFAT = hr;

   min = (MINUTES & 0xf0) >> 4;
   min = (min * 10)+(MINUTES & 0x0f);

   timeFAT = (timeFAT << 6) | min;
    10fc:	40 e4       	ldi	r20, 0x40	; 64
    10fe:	84 9f       	mul	r24, r20
    1100:	c0 01       	movw	r24, r0
    1102:	11 24       	eor	r1, r1
   hr = (hr * 10)+(HOURS & 0x0f);

   timeFAT = hr;

   min = (MINUTES & 0xf0) >> 4;
   min = (min * 10)+(MINUTES & 0x0f);
    1104:	3f 70       	andi	r19, 0x0F	; 15
    1106:	35 0f       	add	r19, r21

   timeFAT = (timeFAT << 6) | min;
    1108:	83 2b       	or	r24, r19

   sec = (SECONDS & 0xf0) >> 4;
   sec = (sec * 10)+(SECONDS & 0x0f);
   sec = sec / 2;    //FAT32 fromat accepts dates with 2sec resolution (e.g. value 5 => 10sec)

   timeFAT = (timeFAT << 5) | sec;
    110a:	88 0f       	add	r24, r24
    110c:	99 1f       	adc	r25, r25
    110e:	82 95       	swap	r24
    1110:	92 95       	swap	r25
    1112:	90 7f       	andi	r25, 0xF0	; 240
    1114:	98 27       	eor	r25, r24
    1116:	80 7f       	andi	r24, 0xF0	; 240
    1118:	98 27       	eor	r25, r24

   timeFAT = (timeFAT << 6) | min;

   sec = (SECONDS & 0xf0) >> 4;
   sec = (sec * 10)+(SECONDS & 0x0f);
   sec = sec / 2;    //FAT32 fromat accepts dates with 2sec resolution (e.g. value 5 => 10sec)
    111a:	26 95       	lsr	r18

   timeFAT = (timeFAT << 5) | sec;
    111c:	82 2b       	or	r24, r18
    111e:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timeFAT+0x1>
    1122:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timeFAT>

   
   return 0;
    1126:	80 e0       	ldi	r24, 0x00	; 0
    1128:	08 95       	ret
  
   unsigned char mth, dt, hr, min, sec, error; 
   unsigned int yr;

   error = RTC_read();
   if(error) return 1;
    112a:	81 e0       	ldi	r24, 0x01	; 1

   timeFAT = (timeFAT << 5) | sec;

   
   return 0;
}
    112c:	08 95       	ret

0000112e <_Z8ADC_initv>:
void readTemperature(unsigned char);
void readVoltage(unsigned char);

void ADC_init(void)
{
  ADCSRA = 0x00; //disable adc
    112e:	16 b8       	out	0x06, r1	; 6
  ADMUX  = 0x40;  //select adc input 0, ref:AVCC
    1130:	80 e4       	ldi	r24, 0x40	; 64
    1132:	87 b9       	out	0x07, r24	; 7
  ADCSRA = 0x82; //prescaler:4, single conversion mode
    1134:	82 e8       	ldi	r24, 0x82	; 130
    1136:	86 b9       	out	0x06, r24	; 6
  ADC_ENABLE;
    1138:	37 9a       	sbi	0x06, 7	; 6
    113a:	08 95       	ret

0000113c <_Z8ADC_readv>:
//Purpose : Do an Analog to Digital Conversion
//Paramtr :	none
//return  : intger temperature value
//********************************************************************
unsigned int ADC_read(void)
{
    113c:	98 e0       	ldi	r25, 0x08	; 8
    char i;
    unsigned int ADC_temp, ADCH_temp;
    unsigned int ADC_var = 0;
    113e:	40 e0       	ldi	r20, 0x00	; 0
    1140:	50 e0       	ldi	r21, 0x00	; 0
    
            
    for(i=0;i<8;i++)             // do the ADC conversion 8 times for better accuracy 
    {
	 	ADC_START_CONVERSION;
    1142:	36 9a       	sbi	0x06, 6	; 6
        while(!(ADCSRA & 0x10)); // wait for conversion done, ADIF flag active
    1144:	34 9b       	sbis	0x06, 4	; 6
    1146:	fe cf       	rjmp	.-4      	; 0x1144 <_Z8ADC_readv+0x8>
        ADCSRA|=(1<<ADIF);
    1148:	34 9a       	sbi	0x06, 4	; 6
		
        ADC_temp = ADCL;         // read out ADCL register
    114a:	84 b1       	in	r24, 0x04	; 4
        ADCH_temp = ADCH;        // read out ADCH register        
    114c:	25 b1       	in	r18, 0x05	; 5
    114e:	30 e0       	ldi	r19, 0x00	; 0
		ADC_temp +=(ADCH_temp << 8);
    1150:	32 2f       	mov	r19, r18
    1152:	22 27       	eor	r18, r18
    1154:	28 0f       	add	r18, r24
    1156:	31 1d       	adc	r19, r1
        ADC_var += ADC_temp;      // accumulate result (8 samples) for later averaging
    1158:	42 0f       	add	r20, r18
    115a:	53 1f       	adc	r21, r19
    115c:	91 50       	subi	r25, 0x01	; 1
    char i;
    unsigned int ADC_temp, ADCH_temp;
    unsigned int ADC_var = 0;
    
            
    for(i=0;i<8;i++)             // do the ADC conversion 8 times for better accuracy 
    115e:	89 f7       	brne	.-30     	; 0x1142 <_Z8ADC_readv+0x6>
        ADCH_temp = ADCH;        // read out ADCH register        
		ADC_temp +=(ADCH_temp << 8);
        ADC_var += ADC_temp;      // accumulate result (8 samples) for later averaging
    }

    ADC_var = ADC_var >> 3;       // average the 8 samples
    1160:	ca 01       	movw	r24, r20
    1162:	96 95       	lsr	r25
    1164:	87 95       	ror	r24
    1166:	96 95       	lsr	r25
    1168:	87 95       	ror	r24
    116a:	96 95       	lsr	r25
    116c:	87 95       	ror	r24
    116e:	81 15       	cp	r24, r1
    1170:	24 e0       	ldi	r18, 0x04	; 4
    1172:	92 07       	cpc	r25, r18
    1174:	10 f0       	brcs	.+4      	; 0x117a <_Z8ADC_readv+0x3e>
    1176:	8f ef       	ldi	r24, 0xFF	; 255
    1178:	93 e0       	ldi	r25, 0x03	; 3

	if(ADC_var > 1023) ADC_var = 1023;
	
    return ADC_var;
}
    117a:	08 95       	ret

0000117c <_Z15readTemperatureh>:
//Purpose : Read temperature from LM35 connected to the ADC
//Paramtr : unsigned char ADC channel number
//returns : None (modifies the global string 'temperature')
//********************************************************************
void readTemperature(unsigned char channel)
{
    117c:	cf 92       	push	r12
    117e:	df 92       	push	r13
    1180:	ef 92       	push	r14
    1182:	ff 92       	push	r15
    1184:	cf 93       	push	r28
    1186:	df 93       	push	r29
   unsigned int value;
   float volt;

   ADMUX = 0x40 | channel;
    1188:	80 64       	ori	r24, 0x40	; 64
    118a:	87 b9       	out	0x07, r24	; 7
   value = ADC_read();
    118c:	0e 94 9e 08 	call	0x113c	; 0x113c <_Z8ADC_readv>

   volt = (float)(value * 5.0)/ 1024.0;
    1190:	bc 01       	movw	r22, r24
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__floatunsisf>
    119a:	20 e0       	ldi	r18, 0x00	; 0
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	40 ea       	ldi	r20, 0xA0	; 160
    11a0:	50 e4       	ldi	r21, 0x40	; 64
    11a2:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
    11a6:	20 e0       	ldi	r18, 0x00	; 0
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	40 e8       	ldi	r20, 0x80	; 128
    11ac:	5a e3       	ldi	r21, 0x3A	; 58
    11ae:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
   value = (unsigned int)(volt * 1000);
    11b2:	20 e0       	ldi	r18, 0x00	; 0
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	4a e7       	ldi	r20, 0x7A	; 122
    11b8:	54 e4       	ldi	r21, 0x44	; 68
    11ba:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
    11be:	0e 94 88 16 	call	0x2d10	; 0x2d10 <__fixunssfsi>
    11c2:	6b 01       	movw	r12, r22
    11c4:	7c 01       	movw	r14, r24

   temperature[6] = 'C';  //centigrade
    11c6:	e2 e1       	ldi	r30, 0x12	; 18
    11c8:	f1 e0       	ldi	r31, 0x01	; 1
    11ca:	83 e4       	ldi	r24, 0x43	; 67
    11cc:	86 83       	std	Z+6, r24	; 0x06
   temperature[5] = 0xb0; //ascii value for degree symbol
    11ce:	80 eb       	ldi	r24, 0xB0	; 176
    11d0:	85 83       	std	Z+5, r24	; 0x05
   temperature[4] = (value % 10) | 0x30;
    11d2:	96 01       	movw	r18, r12
    11d4:	ad ec       	ldi	r26, 0xCD	; 205
    11d6:	bc ec       	ldi	r27, 0xCC	; 204
    11d8:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__umulhisi3>
    11dc:	96 95       	lsr	r25
    11de:	87 95       	ror	r24
    11e0:	96 95       	lsr	r25
    11e2:	87 95       	ror	r24
    11e4:	96 95       	lsr	r25
    11e6:	87 95       	ror	r24
    11e8:	9c 01       	movw	r18, r24
    11ea:	22 0f       	add	r18, r18
    11ec:	33 1f       	adc	r19, r19
    11ee:	88 0f       	add	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	88 0f       	add	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	88 0f       	add	r24, r24
    11f8:	99 1f       	adc	r25, r25
    11fa:	82 0f       	add	r24, r18
    11fc:	93 1f       	adc	r25, r19
    11fe:	96 01       	movw	r18, r12
    1200:	28 1b       	sub	r18, r24
    1202:	39 0b       	sbc	r19, r25
    1204:	c9 01       	movw	r24, r18
    1206:	80 63       	ori	r24, 0x30	; 48
    1208:	84 83       	std	Z+4, r24	; 0x04
   temperature[3] = '.';  
    120a:	8e e2       	ldi	r24, 0x2E	; 46
    120c:	83 83       	std	Z+3, r24	; 0x03
   value = value / 10;
    120e:	96 01       	movw	r18, r12
    1210:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__umulhisi3>
    1214:	ec 01       	movw	r28, r24
    1216:	d6 95       	lsr	r29
    1218:	c7 95       	ror	r28
    121a:	d6 95       	lsr	r29
    121c:	c7 95       	ror	r28
    121e:	d6 95       	lsr	r29
    1220:	c7 95       	ror	r28
   temperature[2] = (value % 10) | 0x30;
    1222:	9e 01       	movw	r18, r28
    1224:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__umulhisi3>
    1228:	ac 01       	movw	r20, r24
    122a:	56 95       	lsr	r21
    122c:	47 95       	ror	r20
    122e:	56 95       	lsr	r21
    1230:	47 95       	ror	r20
    1232:	56 95       	lsr	r21
    1234:	47 95       	ror	r20
    1236:	ca 01       	movw	r24, r20
    1238:	88 0f       	add	r24, r24
    123a:	99 1f       	adc	r25, r25
    123c:	44 0f       	add	r20, r20
    123e:	55 1f       	adc	r21, r21
    1240:	44 0f       	add	r20, r20
    1242:	55 1f       	adc	r21, r21
    1244:	44 0f       	add	r20, r20
    1246:	55 1f       	adc	r21, r21
    1248:	48 0f       	add	r20, r24
    124a:	59 1f       	adc	r21, r25
    124c:	ce 01       	movw	r24, r28
    124e:	84 1b       	sub	r24, r20
    1250:	95 0b       	sbc	r25, r21
    1252:	80 63       	ori	r24, 0x30	; 48
    1254:	82 83       	std	Z+2, r24	; 0x02
   value = value / 10;
    1256:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__umulhisi3>
    125a:	ec 01       	movw	r28, r24
    125c:	d6 95       	lsr	r29
    125e:	c7 95       	ror	r28
    1260:	d6 95       	lsr	r29
    1262:	c7 95       	ror	r28
    1264:	d6 95       	lsr	r29
    1266:	c7 95       	ror	r28
   temperature[1] = (value % 10) | 0x30;
    1268:	9e 01       	movw	r18, r28
    126a:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__umulhisi3>
    126e:	ac 01       	movw	r20, r24
    1270:	56 95       	lsr	r21
    1272:	47 95       	ror	r20
    1274:	56 95       	lsr	r21
    1276:	47 95       	ror	r20
    1278:	56 95       	lsr	r21
    127a:	47 95       	ror	r20
    127c:	ca 01       	movw	r24, r20
    127e:	88 0f       	add	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	44 0f       	add	r20, r20
    1284:	55 1f       	adc	r21, r21
    1286:	44 0f       	add	r20, r20
    1288:	55 1f       	adc	r21, r21
    128a:	44 0f       	add	r20, r20
    128c:	55 1f       	adc	r21, r21
    128e:	48 0f       	add	r20, r24
    1290:	59 1f       	adc	r21, r25
    1292:	ce 01       	movw	r24, r28
    1294:	84 1b       	sub	r24, r20
    1296:	95 0b       	sbc	r25, r21
    1298:	80 63       	ori	r24, 0x30	; 48
    129a:	81 83       	std	Z+1, r24	; 0x01
   value = value / 10;
    129c:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__umulhisi3>
    12a0:	96 95       	lsr	r25
    12a2:	87 95       	ror	r24
    12a4:	96 95       	lsr	r25
    12a6:	87 95       	ror	r24
    12a8:	96 95       	lsr	r25
    12aa:	87 95       	ror	r24
   temperature[0] = value | 0x30;   
    12ac:	80 63       	ori	r24, 0x30	; 48
    12ae:	80 83       	st	Z, r24
}  
    12b0:	df 91       	pop	r29
    12b2:	cf 91       	pop	r28
    12b4:	ff 90       	pop	r15
    12b6:	ef 90       	pop	r14
    12b8:	df 90       	pop	r13
    12ba:	cf 90       	pop	r12
    12bc:	08 95       	ret

000012be <_Z11readVoltageh>:
//Purpose : Read voltage from ADC channels
//Paramtr : unsigned char ADC channel number
//returns : None (modifies the global string 'voltage')
//********************************************************************
void readVoltage(unsigned char channel)
{
    12be:	cf 92       	push	r12
    12c0:	df 92       	push	r13
    12c2:	ef 92       	push	r14
    12c4:	ff 92       	push	r15
    12c6:	cf 93       	push	r28
    12c8:	df 93       	push	r29
   unsigned int value;
   float volt;

   ADMUX = 0x40 | channel;
    12ca:	80 64       	ori	r24, 0x40	; 64
    12cc:	87 b9       	out	0x07, r24	; 7
   value = ADC_read();
    12ce:	0e 94 9e 08 	call	0x113c	; 0x113c <_Z8ADC_readv>

   volt = (float)(value * 5.0)/ 1024.0;
    12d2:	bc 01       	movw	r22, r24
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__floatunsisf>
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	40 ea       	ldi	r20, 0xA0	; 160
    12e2:	50 e4       	ldi	r21, 0x40	; 64
    12e4:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	40 e8       	ldi	r20, 0x80	; 128
    12ee:	5a e3       	ldi	r21, 0x3A	; 58
    12f0:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
   value = (unsigned int)(volt * 1000);
    12f4:	20 e0       	ldi	r18, 0x00	; 0
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	4a e7       	ldi	r20, 0x7A	; 122
    12fa:	54 e4       	ldi	r21, 0x44	; 68
    12fc:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
    1300:	0e 94 88 16 	call	0x2d10	; 0x2d10 <__fixunssfsi>
    1304:	6b 01       	movw	r12, r22
    1306:	7c 01       	movw	r14, r24

   voltage[6] = 'V';  //V for voltage
    1308:	eb e0       	ldi	r30, 0x0B	; 11
    130a:	f1 e0       	ldi	r31, 0x01	; 1
    130c:	86 e5       	ldi	r24, 0x56	; 86
    130e:	86 83       	std	Z+6, r24	; 0x06
   voltage[5] = ' '; 
    1310:	80 e2       	ldi	r24, 0x20	; 32
    1312:	85 83       	std	Z+5, r24	; 0x05
   voltage[4] = (value % 10) | 0x30;
    1314:	96 01       	movw	r18, r12
    1316:	ad ec       	ldi	r26, 0xCD	; 205
    1318:	bc ec       	ldi	r27, 0xCC	; 204
    131a:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__umulhisi3>
    131e:	96 95       	lsr	r25
    1320:	87 95       	ror	r24
    1322:	96 95       	lsr	r25
    1324:	87 95       	ror	r24
    1326:	96 95       	lsr	r25
    1328:	87 95       	ror	r24
    132a:	9c 01       	movw	r18, r24
    132c:	22 0f       	add	r18, r18
    132e:	33 1f       	adc	r19, r19
    1330:	88 0f       	add	r24, r24
    1332:	99 1f       	adc	r25, r25
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	88 0f       	add	r24, r24
    133a:	99 1f       	adc	r25, r25
    133c:	82 0f       	add	r24, r18
    133e:	93 1f       	adc	r25, r19
    1340:	96 01       	movw	r18, r12
    1342:	28 1b       	sub	r18, r24
    1344:	39 0b       	sbc	r19, r25
    1346:	c9 01       	movw	r24, r18
    1348:	80 63       	ori	r24, 0x30	; 48
    134a:	84 83       	std	Z+4, r24	; 0x04
   value = value / 10;
    134c:	96 01       	movw	r18, r12
    134e:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__umulhisi3>
    1352:	ec 01       	movw	r28, r24
    1354:	d6 95       	lsr	r29
    1356:	c7 95       	ror	r28
    1358:	d6 95       	lsr	r29
    135a:	c7 95       	ror	r28
    135c:	d6 95       	lsr	r29
    135e:	c7 95       	ror	r28
   voltage[3] = (value % 10) | 0x30;
    1360:	9e 01       	movw	r18, r28
    1362:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__umulhisi3>
    1366:	ac 01       	movw	r20, r24
    1368:	56 95       	lsr	r21
    136a:	47 95       	ror	r20
    136c:	56 95       	lsr	r21
    136e:	47 95       	ror	r20
    1370:	56 95       	lsr	r21
    1372:	47 95       	ror	r20
    1374:	ca 01       	movw	r24, r20
    1376:	88 0f       	add	r24, r24
    1378:	99 1f       	adc	r25, r25
    137a:	44 0f       	add	r20, r20
    137c:	55 1f       	adc	r21, r21
    137e:	44 0f       	add	r20, r20
    1380:	55 1f       	adc	r21, r21
    1382:	44 0f       	add	r20, r20
    1384:	55 1f       	adc	r21, r21
    1386:	48 0f       	add	r20, r24
    1388:	59 1f       	adc	r21, r25
    138a:	ce 01       	movw	r24, r28
    138c:	84 1b       	sub	r24, r20
    138e:	95 0b       	sbc	r25, r21
    1390:	80 63       	ori	r24, 0x30	; 48
    1392:	83 83       	std	Z+3, r24	; 0x03
   value = value / 10;
    1394:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__umulhisi3>
    1398:	ec 01       	movw	r28, r24
    139a:	d6 95       	lsr	r29
    139c:	c7 95       	ror	r28
    139e:	d6 95       	lsr	r29
    13a0:	c7 95       	ror	r28
    13a2:	d6 95       	lsr	r29
    13a4:	c7 95       	ror	r28
   voltage[2] = (value % 10) | 0x30;
    13a6:	9e 01       	movw	r18, r28
    13a8:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__umulhisi3>
    13ac:	ac 01       	movw	r20, r24
    13ae:	56 95       	lsr	r21
    13b0:	47 95       	ror	r20
    13b2:	56 95       	lsr	r21
    13b4:	47 95       	ror	r20
    13b6:	56 95       	lsr	r21
    13b8:	47 95       	ror	r20
    13ba:	ca 01       	movw	r24, r20
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	44 0f       	add	r20, r20
    13c2:	55 1f       	adc	r21, r21
    13c4:	44 0f       	add	r20, r20
    13c6:	55 1f       	adc	r21, r21
    13c8:	44 0f       	add	r20, r20
    13ca:	55 1f       	adc	r21, r21
    13cc:	48 0f       	add	r20, r24
    13ce:	59 1f       	adc	r21, r25
    13d0:	ce 01       	movw	r24, r28
    13d2:	84 1b       	sub	r24, r20
    13d4:	95 0b       	sbc	r25, r21
    13d6:	80 63       	ori	r24, 0x30	; 48
    13d8:	82 83       	std	Z+2, r24	; 0x02
   voltage[1] = '.';  
    13da:	8e e2       	ldi	r24, 0x2E	; 46
    13dc:	81 83       	std	Z+1, r24	; 0x01
   value = value / 10;
    13de:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__umulhisi3>
    13e2:	96 95       	lsr	r25
    13e4:	87 95       	ror	r24
    13e6:	96 95       	lsr	r25
    13e8:	87 95       	ror	r24
    13ea:	96 95       	lsr	r25
    13ec:	87 95       	ror	r24
   voltage[0] = value | 0x30;   
    13ee:	80 63       	ori	r24, 0x30	; 48
    13f0:	80 83       	st	Z, r24
}  
    13f2:	df 91       	pop	r29
    13f4:	cf 91       	pop	r28
    13f6:	ff 90       	pop	r15
    13f8:	ef 90       	pop	r14
    13fa:	df 90       	pop	r13
    13fc:	cf 90       	pop	r12
    13fe:	08 95       	ret

00001400 <_Z14getFirstSectorm>:
//Function: to calculate first sector address of any given cluster
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
    1400:	cf 92       	push	r12
    1402:	df 92       	push	r13
    1404:	ef 92       	push	r14
    1406:	ff 92       	push	r15
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    1408:	a0 91 fb 00 	lds	r26, 0x00FB	; 0x8000fb <sectorPerCluster>
    140c:	b0 91 fc 00 	lds	r27, 0x00FC	; 0x8000fc <sectorPerCluster+0x1>
    1410:	c0 90 07 01 	lds	r12, 0x0107	; 0x800107 <firstDataSector>
    1414:	d0 90 08 01 	lds	r13, 0x0108	; 0x800108 <firstDataSector+0x1>
    1418:	e0 90 09 01 	lds	r14, 0x0109	; 0x800109 <firstDataSector+0x2>
    141c:	f0 90 0a 01 	lds	r15, 0x010A	; 0x80010a <firstDataSector+0x3>
    1420:	9b 01       	movw	r18, r22
    1422:	ac 01       	movw	r20, r24
    1424:	22 50       	subi	r18, 0x02	; 2
    1426:	31 09       	sbc	r19, r1
    1428:	41 09       	sbc	r20, r1
    142a:	51 09       	sbc	r21, r1
    142c:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__muluhisi3>
    1430:	6c 0d       	add	r22, r12
    1432:	7d 1d       	adc	r23, r13
    1434:	8e 1d       	adc	r24, r14
    1436:	9f 1d       	adc	r25, r15
}
    1438:	ff 90       	pop	r15
    143a:	ef 90       	pop	r14
    143c:	df 90       	pop	r13
    143e:	cf 90       	pop	r12
    1440:	08 95       	ret

00001442 <_Z17getSetNextClustermhm>:
//return: next cluster number, if if argument#2 = GET, else 0
//****************************************************************************
unsigned long getSetNextCluster (unsigned long clusterNumber,
                                 unsigned char get_set,
                                 unsigned long clusterEntry)
{
    1442:	4f 92       	push	r4
    1444:	5f 92       	push	r5
    1446:	6f 92       	push	r6
    1448:	7f 92       	push	r7
    144a:	8f 92       	push	r8
    144c:	9f 92       	push	r9
    144e:	af 92       	push	r10
    1450:	bf 92       	push	r11
    1452:	cf 92       	push	r12
    1454:	df 92       	push	r13
    1456:	ef 92       	push	r14
    1458:	ff 92       	push	r15
    145a:	0f 93       	push	r16
    145c:	1f 93       	push	r17
    145e:	cf 93       	push	r28
    1460:	df 93       	push	r29
    1462:	d4 2f       	mov	r29, r20
    1464:	28 01       	movw	r4, r16
    1466:	39 01       	movw	r6, r18
unsigned long *FATEntryValue;
unsigned long FATEntrySector;
unsigned char retry = 0;

//get sector number of the cluster entry in the FAT
FATEntrySector = unusedSectors + reservedSectorCount + ((clusterNumber * 4) / bytesPerSector) ;
    1468:	40 91 f9 00 	lds	r20, 0x00F9	; 0x8000f9 <reservedSectorCount>
    146c:	50 91 fa 00 	lds	r21, 0x00FA	; 0x8000fa <reservedSectorCount+0x1>
    1470:	4b 01       	movw	r8, r22
    1472:	5c 01       	movw	r10, r24
    1474:	88 0c       	add	r8, r8
    1476:	99 1c       	adc	r9, r9
    1478:	aa 1c       	adc	r10, r10
    147a:	bb 1c       	adc	r11, r11
    147c:	88 0c       	add	r8, r8
    147e:	99 1c       	adc	r9, r9
    1480:	aa 1c       	adc	r10, r10
    1482:	bb 1c       	adc	r11, r11
    1484:	20 91 fd 00 	lds	r18, 0x00FD	; 0x8000fd <bytesPerSector>
    1488:	30 91 fe 00 	lds	r19, 0x00FE	; 0x8000fe <bytesPerSector+0x1>
    148c:	c0 90 f5 00 	lds	r12, 0x00F5	; 0x8000f5 <unusedSectors>
    1490:	d0 90 f6 00 	lds	r13, 0x00F6	; 0x8000f6 <unusedSectors+0x1>
    1494:	e0 90 f7 00 	lds	r14, 0x00F7	; 0x8000f7 <unusedSectors+0x2>
    1498:	f0 90 f8 00 	lds	r15, 0x00F8	; 0x8000f8 <unusedSectors+0x3>
    149c:	c4 0e       	add	r12, r20
    149e:	d5 1e       	adc	r13, r21
    14a0:	e1 1c       	adc	r14, r1
    14a2:	f1 1c       	adc	r15, r1
    14a4:	40 e0       	ldi	r20, 0x00	; 0
    14a6:	50 e0       	ldi	r21, 0x00	; 0
    14a8:	c5 01       	movw	r24, r10
    14aa:	b4 01       	movw	r22, r8
    14ac:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <__udivmodsi4>
    14b0:	c2 0e       	add	r12, r18
    14b2:	d3 1e       	adc	r13, r19
    14b4:	e4 1e       	adc	r14, r20
    14b6:	f5 1e       	adc	r15, r21

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);
    14b8:	20 91 fd 00 	lds	r18, 0x00FD	; 0x8000fd <bytesPerSector>
    14bc:	30 91 fe 00 	lds	r19, 0x00FE	; 0x8000fe <bytesPerSector+0x1>
    14c0:	40 e0       	ldi	r20, 0x00	; 0
    14c2:	50 e0       	ldi	r21, 0x00	; 0
    14c4:	c5 01       	movw	r24, r10
    14c6:	b4 01       	movw	r22, r8
    14c8:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <__udivmodsi4>
    14cc:	4b 01       	movw	r8, r22
    14ce:	5c 01       	movw	r10, r24
    14d0:	ca e0       	ldi	r28, 0x0A	; 10

//read the sector into a buffer
while(retry <10)
{ if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}
    14d2:	c7 01       	movw	r24, r14
    14d4:	b6 01       	movw	r22, r12
    14d6:	0e 94 02 04 	call	0x804	; 0x804 <_Z18SD_readSingleBlockm>
    14da:	88 23       	and	r24, r24
    14dc:	11 f0       	breq	.+4      	; 0x14e2 <_Z17getSetNextClustermhm+0xa0>
    14de:	c1 50       	subi	r28, 0x01	; 1

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);

//read the sector into a buffer
while(retry <10)
    14e0:	c1 f7       	brne	.-16     	; 0x14d2 <_Z17getSetNextClustermhm+0x90>
{ if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}

//get the cluster address from the buffer
FATEntryValue = (unsigned long *) &buffer[FATEntryOffset];
    14e2:	f4 01       	movw	r30, r8
    14e4:	e8 5c       	subi	r30, 0xC8	; 200
    14e6:	fe 4f       	sbci	r31, 0xFE	; 254

if(get_set == GET)
    14e8:	d1 11       	cpse	r29, r1
    14ea:	08 c0       	rjmp	.+16     	; 0x14fc <_Z17getSetNextClustermhm+0xba>
  return ((*FATEntryValue) & 0x0fffffff);
    14ec:	80 81       	ld	r24, Z
    14ee:	91 81       	ldd	r25, Z+1	; 0x01
    14f0:	a2 81       	ldd	r26, Z+2	; 0x02
    14f2:	b3 81       	ldd	r27, Z+3	; 0x03
    14f4:	bc 01       	movw	r22, r24
    14f6:	cd 01       	movw	r24, r26
    14f8:	9f 70       	andi	r25, 0x0F	; 15
    14fa:	0b c0       	rjmp	.+22     	; 0x1512 <_Z17getSetNextClustermhm+0xd0>


*FATEntryValue = clusterEntry;   //for setting new value in cluster entry in FAT
    14fc:	40 82       	st	Z, r4
    14fe:	51 82       	std	Z+1, r5	; 0x01
    1500:	62 82       	std	Z+2, r6	; 0x02
    1502:	73 82       	std	Z+3, r7	; 0x03

SD_writeSingleBlock(FATEntrySector);
    1504:	c7 01       	movw	r24, r14
    1506:	b6 01       	movw	r22, r12
    1508:	0e 94 34 04 	call	0x868	; 0x868 <_Z19SD_writeSingleBlockm>

return (0);
    150c:	60 e0       	ldi	r22, 0x00	; 0
    150e:	70 e0       	ldi	r23, 0x00	; 0
    1510:	cb 01       	movw	r24, r22
}
    1512:	df 91       	pop	r29
    1514:	cf 91       	pop	r28
    1516:	1f 91       	pop	r17
    1518:	0f 91       	pop	r16
    151a:	ff 90       	pop	r15
    151c:	ef 90       	pop	r14
    151e:	df 90       	pop	r13
    1520:	cf 90       	pop	r12
    1522:	bf 90       	pop	r11
    1524:	af 90       	pop	r10
    1526:	9f 90       	pop	r9
    1528:	8f 90       	pop	r8
    152a:	7f 90       	pop	r7
    152c:	6f 90       	pop	r6
    152e:	5f 90       	pop	r5
    1530:	4f 90       	pop	r4
    1532:	08 95       	ret

00001534 <_Z17getSetFreeClusterhhm>:
//return: next free cluster, if arg1 is NEXT_FREE & arg2 is GET
//        total number of free clusters, if arg1 is TOTAL_FREE & arg2 is GET
//		  0xffffffff, if any error or if arg2 is SET
//********************************************************************************************
unsigned long getSetFreeCluster(unsigned char totOrNext, unsigned char get_set, unsigned long FSEntry)
{
    1534:	cf 92       	push	r12
    1536:	df 92       	push	r13
    1538:	ef 92       	push	r14
    153a:	ff 92       	push	r15
    153c:	cf 93       	push	r28
    153e:	df 93       	push	r29
    1540:	d8 2f       	mov	r29, r24
    1542:	c6 2f       	mov	r28, r22
    1544:	69 01       	movw	r12, r18
    1546:	7a 01       	movw	r14, r20
struct FSInfo_Structure *FS = (struct FSInfo_Structure *) &buffer;
unsigned char error;

SD_readSingleBlock(unusedSectors + 1);
    1548:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <unusedSectors>
    154c:	90 91 f6 00 	lds	r25, 0x00F6	; 0x8000f6 <unusedSectors+0x1>
    1550:	a0 91 f7 00 	lds	r26, 0x00F7	; 0x8000f7 <unusedSectors+0x2>
    1554:	b0 91 f8 00 	lds	r27, 0x00F8	; 0x8000f8 <unusedSectors+0x3>
    1558:	bc 01       	movw	r22, r24
    155a:	cd 01       	movw	r24, r26
    155c:	6f 5f       	subi	r22, 0xFF	; 255
    155e:	7f 4f       	sbci	r23, 0xFF	; 255
    1560:	8f 4f       	sbci	r24, 0xFF	; 255
    1562:	9f 4f       	sbci	r25, 0xFF	; 255
    1564:	0e 94 02 04 	call	0x804	; 0x804 <_Z18SD_readSingleBlockm>

if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
    1568:	40 91 38 01 	lds	r20, 0x0138	; 0x800138 <buffer>
    156c:	50 91 39 01 	lds	r21, 0x0139	; 0x800139 <buffer+0x1>
    1570:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <buffer+0x2>
    1574:	70 91 3b 01 	lds	r23, 0x013B	; 0x80013b <buffer+0x3>
    1578:	42 35       	cpi	r20, 0x52	; 82
    157a:	52 45       	sbci	r21, 0x52	; 82
    157c:	61 46       	sbci	r22, 0x61	; 97
    157e:	71 44       	sbci	r23, 0x41	; 65
    1580:	09 f0       	breq	.+2      	; 0x1584 <_Z17getSetFreeClusterhhm+0x50>
    1582:	58 c0       	rjmp	.+176    	; 0x1634 <_Z17getSetFreeClusterhhm+0x100>
    1584:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <buffer+0x1e4>
    1588:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <buffer+0x1e5>
    158c:	a0 91 1e 03 	lds	r26, 0x031E	; 0x80031e <buffer+0x1e6>
    1590:	b0 91 1f 03 	lds	r27, 0x031F	; 0x80031f <buffer+0x1e7>
    1594:	82 37       	cpi	r24, 0x72	; 114
    1596:	92 47       	sbci	r25, 0x72	; 114
    1598:	a1 44       	sbci	r26, 0x41	; 65
    159a:	b1 46       	sbci	r27, 0x61	; 97
    159c:	09 f0       	breq	.+2      	; 0x15a0 <_Z17getSetFreeClusterhhm+0x6c>
    159e:	4e c0       	rjmp	.+156    	; 0x163c <_Z17getSetFreeClusterhhm+0x108>
    15a0:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <buffer+0x1fc>
    15a4:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <buffer+0x1fd>
    15a8:	a0 91 36 03 	lds	r26, 0x0336	; 0x800336 <buffer+0x1fe>
    15ac:	b0 91 37 03 	lds	r27, 0x0337	; 0x800337 <buffer+0x1ff>
    15b0:	00 97       	sbiw	r24, 0x00	; 0
    15b2:	a5 45       	sbci	r26, 0x55	; 85
    15b4:	ba 4a       	sbci	r27, 0xAA	; 170
    15b6:	09 f0       	breq	.+2      	; 0x15ba <_Z17getSetFreeClusterhhm+0x86>
    15b8:	45 c0       	rjmp	.+138    	; 0x1644 <_Z17getSetFreeClusterhhm+0x110>
  return 0xffffffff;

 if(get_set == GET)
    15ba:	c1 11       	cpse	r28, r1
    15bc:	14 c0       	rjmp	.+40     	; 0x15e6 <_Z17getSetFreeClusterhhm+0xb2>
 {
   if(totOrNext == TOTAL_FREE)
    15be:	d1 30       	cpi	r29, 0x01	; 1
    15c0:	49 f4       	brne	.+18     	; 0x15d4 <_Z17getSetFreeClusterhhm+0xa0>
      return(FS->freeClusterCount);
    15c2:	60 91 20 03 	lds	r22, 0x0320	; 0x800320 <buffer+0x1e8>
    15c6:	70 91 21 03 	lds	r23, 0x0321	; 0x800321 <buffer+0x1e9>
    15ca:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <buffer+0x1ea>
    15ce:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <buffer+0x1eb>
    15d2:	3b c0       	rjmp	.+118    	; 0x164a <_Z17getSetFreeClusterhhm+0x116>
   else // when totOrNext = NEXT_FREE
      return(FS->nextFreeCluster);
    15d4:	60 91 24 03 	lds	r22, 0x0324	; 0x800324 <buffer+0x1ec>
    15d8:	70 91 25 03 	lds	r23, 0x0325	; 0x800325 <buffer+0x1ed>
    15dc:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <buffer+0x1ee>
    15e0:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <buffer+0x1ef>
    15e4:	32 c0       	rjmp	.+100    	; 0x164a <_Z17getSetFreeClusterhhm+0x116>
 }
 else
 {
   if(totOrNext == TOTAL_FREE)
    15e6:	d1 30       	cpi	r29, 0x01	; 1
    15e8:	49 f4       	brne	.+18     	; 0x15fc <_Z17getSetFreeClusterhhm+0xc8>
      FS->freeClusterCount = FSEntry;
    15ea:	c0 92 20 03 	sts	0x0320, r12	; 0x800320 <buffer+0x1e8>
    15ee:	d0 92 21 03 	sts	0x0321, r13	; 0x800321 <buffer+0x1e9>
    15f2:	e0 92 22 03 	sts	0x0322, r14	; 0x800322 <buffer+0x1ea>
    15f6:	f0 92 23 03 	sts	0x0323, r15	; 0x800323 <buffer+0x1eb>
    15fa:	08 c0       	rjmp	.+16     	; 0x160c <_Z17getSetFreeClusterhhm+0xd8>
   else // when totOrNext = NEXT_FREE
	  FS->nextFreeCluster = FSEntry;
    15fc:	c0 92 24 03 	sts	0x0324, r12	; 0x800324 <buffer+0x1ec>
    1600:	d0 92 25 03 	sts	0x0325, r13	; 0x800325 <buffer+0x1ed>
    1604:	e0 92 26 03 	sts	0x0326, r14	; 0x800326 <buffer+0x1ee>
    1608:	f0 92 27 03 	sts	0x0327, r15	; 0x800327 <buffer+0x1ef>
 
   error = SD_writeSingleBlock(unusedSectors + 1);	//update FSinfo
    160c:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <unusedSectors>
    1610:	90 91 f6 00 	lds	r25, 0x00F6	; 0x8000f6 <unusedSectors+0x1>
    1614:	a0 91 f7 00 	lds	r26, 0x00F7	; 0x8000f7 <unusedSectors+0x2>
    1618:	b0 91 f8 00 	lds	r27, 0x00F8	; 0x8000f8 <unusedSectors+0x3>
    161c:	bc 01       	movw	r22, r24
    161e:	cd 01       	movw	r24, r26
    1620:	6f 5f       	subi	r22, 0xFF	; 255
    1622:	7f 4f       	sbci	r23, 0xFF	; 255
    1624:	8f 4f       	sbci	r24, 0xFF	; 255
    1626:	9f 4f       	sbci	r25, 0xFF	; 255
    1628:	0e 94 34 04 	call	0x868	; 0x868 <_Z19SD_writeSingleBlockm>
 }
 return 0xffffffff;
    162c:	6f ef       	ldi	r22, 0xFF	; 255
    162e:	7f ef       	ldi	r23, 0xFF	; 255
    1630:	cb 01       	movw	r24, r22
    1632:	0b c0       	rjmp	.+22     	; 0x164a <_Z17getSetFreeClusterhhm+0x116>
unsigned char error;

SD_readSingleBlock(unusedSectors + 1);

if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
  return 0xffffffff;
    1634:	6f ef       	ldi	r22, 0xFF	; 255
    1636:	7f ef       	ldi	r23, 0xFF	; 255
    1638:	cb 01       	movw	r24, r22
    163a:	07 c0       	rjmp	.+14     	; 0x164a <_Z17getSetFreeClusterhhm+0x116>
    163c:	6f ef       	ldi	r22, 0xFF	; 255
    163e:	7f ef       	ldi	r23, 0xFF	; 255
    1640:	cb 01       	movw	r24, r22
    1642:	03 c0       	rjmp	.+6      	; 0x164a <_Z17getSetFreeClusterhhm+0x116>
    1644:	6f ef       	ldi	r22, 0xFF	; 255
    1646:	7f ef       	ldi	r23, 0xFF	; 255
    1648:	cb 01       	movw	r24, r22
	  FS->nextFreeCluster = FSEntry;
 
   error = SD_writeSingleBlock(unusedSectors + 1);	//update FSinfo
 }
 return 0xffffffff;
}
    164a:	df 91       	pop	r29
    164c:	cf 91       	pop	r28
    164e:	ff 90       	pop	r15
    1650:	ef 90       	pop	r14
    1652:	df 90       	pop	r13
    1654:	cf 90       	pop	r12
    1656:	08 95       	ret

00001658 <_Z17getBootSectorDatav>:
void displayMemory (unsigned char flag, unsigned long memory);
void deleteFile (unsigned char *fileName);
void freeMemoryUpdate (unsigned char flag, unsigned long size);

unsigned char getBootSectorData (void)
{
    1658:	ef 92       	push	r14
    165a:	ff 92       	push	r15
    165c:	0f 93       	push	r16
    165e:	1f 93       	push	r17
    1660:	cf 93       	push	r28
    1662:	df 93       	push	r29
struct BS_Structure *bpb; //mapping the buffer onto the structure
struct MBRinfo_Structure *mbr;
struct partitionInfo_Structure *partition;
unsigned long dataSectors;

unusedSectors = 0;
    1664:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <unusedSectors>
    1668:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <unusedSectors+0x1>
    166c:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <unusedSectors+0x2>
    1670:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <unusedSectors+0x3>

SD_readSingleBlock(0);
    1674:	60 e0       	ldi	r22, 0x00	; 0
    1676:	70 e0       	ldi	r23, 0x00	; 0
    1678:	cb 01       	movw	r24, r22
    167a:	0e 94 02 04 	call	0x804	; 0x804 <_Z18SD_readSingleBlockm>
bpb = (struct BS_Structure *)buffer;

if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
    167e:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <buffer>
    1682:	8d 7f       	andi	r24, 0xFD	; 253
    1684:	89 3e       	cpi	r24, 0xE9	; 233
    1686:	01 f1       	breq	.+64     	; 0x16c8 <_Z17getBootSectorDatav+0x70>
{
  mbr = (struct MBRinfo_Structure *) buffer;       //if it is not boot sector, it must be MBR
  
  if(mbr->signature != 0xaa55) return 1;       //if it is not even MBR then it's not FAT32
    1688:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <buffer+0x1fe>
    168c:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <buffer+0x1ff>
    1690:	85 35       	cpi	r24, 0x55	; 85
    1692:	9a 4a       	sbci	r25, 0xAA	; 170
    1694:	09 f0       	breq	.+2      	; 0x1698 <_Z17getBootSectorDatav+0x40>
    1696:	97 c0       	rjmp	.+302    	; 0x17c6 <_Z17getBootSectorDatav+0x16e>
  	
  partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
  unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
    1698:	60 91 fe 02 	lds	r22, 0x02FE	; 0x8002fe <buffer+0x1c6>
    169c:	70 91 ff 02 	lds	r23, 0x02FF	; 0x8002ff <buffer+0x1c7>
    16a0:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <buffer+0x1c8>
    16a4:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <buffer+0x1c9>
    16a8:	60 93 f5 00 	sts	0x00F5, r22	; 0x8000f5 <unusedSectors>
    16ac:	70 93 f6 00 	sts	0x00F6, r23	; 0x8000f6 <unusedSectors+0x1>
    16b0:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <unusedSectors+0x2>
    16b4:	90 93 f8 00 	sts	0x00F8, r25	; 0x8000f8 <unusedSectors+0x3>
  
  SD_readSingleBlock(partition->firstSector);//read the bpb sector
    16b8:	0e 94 02 04 	call	0x804	; 0x804 <_Z18SD_readSingleBlockm>
  bpb = (struct BS_Structure *)buffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
    16bc:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <buffer>
    16c0:	8d 7f       	andi	r24, 0xFD	; 253
    16c2:	89 3e       	cpi	r24, 0xE9	; 233
    16c4:	09 f0       	breq	.+2      	; 0x16c8 <_Z17getBootSectorDatav+0x70>
    16c6:	81 c0       	rjmp	.+258    	; 0x17ca <_Z17getBootSectorDatav+0x172>
}

bytesPerSector = bpb->bytesPerSector;
    16c8:	e8 e3       	ldi	r30, 0x38	; 56
    16ca:	f1 e0       	ldi	r31, 0x01	; 1
    16cc:	83 85       	ldd	r24, Z+11	; 0x0b
    16ce:	94 85       	ldd	r25, Z+12	; 0x0c
    16d0:	90 93 fe 00 	sts	0x00FE, r25	; 0x8000fe <bytesPerSector+0x1>
    16d4:	80 93 fd 00 	sts	0x00FD, r24	; 0x8000fd <bytesPerSector>
//transmitHex(INT, bytesPerSector); transmitByte(' ');
sectorPerCluster = bpb->sectorPerCluster;
    16d8:	85 85       	ldd	r24, Z+13	; 0x0d
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	90 93 fc 00 	sts	0x00FC, r25	; 0x8000fc <sectorPerCluster+0x1>
    16e0:	80 93 fb 00 	sts	0x00FB, r24	; 0x8000fb <sectorPerCluster>
//transmitHex(INT, sectorPerCluster); transmitByte(' ');
reservedSectorCount = bpb->reservedSectorCount;
    16e4:	c6 85       	ldd	r28, Z+14	; 0x0e
    16e6:	d7 85       	ldd	r29, Z+15	; 0x0f
    16e8:	d0 93 fa 00 	sts	0x00FA, r29	; 0x8000fa <reservedSectorCount+0x1>
    16ec:	c0 93 f9 00 	sts	0x00F9, r28	; 0x8000f9 <reservedSectorCount>
rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
    16f0:	84 a5       	ldd	r24, Z+44	; 0x2c
    16f2:	95 a5       	ldd	r25, Z+45	; 0x2d
    16f4:	a6 a5       	ldd	r26, Z+46	; 0x2e
    16f6:	b7 a5       	ldd	r27, Z+47	; 0x2f
    16f8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <rootCluster>
    16fc:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <rootCluster+0x1>
    1700:	a0 93 05 01 	sts	0x0105, r26	; 0x800105 <rootCluster+0x2>
    1704:	b0 93 06 01 	sts	0x0106, r27	; 0x800106 <rootCluster+0x3>
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);
    1708:	00 91 f9 00 	lds	r16, 0x00F9	; 0x8000f9 <reservedSectorCount>
    170c:	10 91 fa 00 	lds	r17, 0x00FA	; 0x8000fa <reservedSectorCount+0x1>
    1710:	a0 89       	ldd	r26, Z+16	; 0x10
    1712:	24 a1       	ldd	r18, Z+36	; 0x24
    1714:	35 a1       	ldd	r19, Z+37	; 0x25
    1716:	46 a1       	ldd	r20, Z+38	; 0x26
    1718:	57 a1       	ldd	r21, Z+39	; 0x27
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__muluhisi3>
    1720:	ab 01       	movw	r20, r22
    1722:	bc 01       	movw	r22, r24
    1724:	84 8d       	ldd	r24, Z+28	; 0x1c
    1726:	95 8d       	ldd	r25, Z+29	; 0x1d
    1728:	a6 8d       	ldd	r26, Z+30	; 0x1e
    172a:	b7 8d       	ldd	r27, Z+31	; 0x1f
    172c:	80 0f       	add	r24, r16
    172e:	91 1f       	adc	r25, r17
    1730:	a1 1d       	adc	r26, r1
    1732:	b1 1d       	adc	r27, r1
    1734:	84 0f       	add	r24, r20
    1736:	95 1f       	adc	r25, r21
    1738:	a6 1f       	adc	r26, r22
    173a:	b7 1f       	adc	r27, r23
    173c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <firstDataSector>
    1740:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <firstDataSector+0x1>
    1744:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <firstDataSector+0x2>
    1748:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <firstDataSector+0x3>

dataSectors = bpb->totalSectors_F32
              - bpb->reservedSectorCount
              - ( bpb->numberofFATs * bpb->FATsize_F32);
totalClusters = dataSectors / sectorPerCluster;
    174c:	20 91 fb 00 	lds	r18, 0x00FB	; 0x8000fb <sectorPerCluster>
    1750:	30 91 fc 00 	lds	r19, 0x00FC	; 0x8000fc <sectorPerCluster+0x1>
reservedSectorCount = bpb->reservedSectorCount;
rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);

dataSectors = bpb->totalSectors_F32
              - bpb->reservedSectorCount
    1754:	80 a1       	ldd	r24, Z+32	; 0x20
    1756:	91 a1       	ldd	r25, Z+33	; 0x21
    1758:	a2 a1       	ldd	r26, Z+34	; 0x22
    175a:	b3 a1       	ldd	r27, Z+35	; 0x23
    175c:	8c 1b       	sub	r24, r28
    175e:	9d 0b       	sbc	r25, r29
    1760:	a1 09       	sbc	r26, r1
    1762:	b1 09       	sbc	r27, r1
              - ( bpb->numberofFATs * bpb->FATsize_F32);
    1764:	7c 01       	movw	r14, r24
    1766:	8d 01       	movw	r16, r26
    1768:	e4 1a       	sub	r14, r20
    176a:	f5 0a       	sbc	r15, r21
    176c:	06 0b       	sbc	r16, r22
    176e:	17 0b       	sbc	r17, r23
    1770:	c8 01       	movw	r24, r16
    1772:	b7 01       	movw	r22, r14
totalClusters = dataSectors / sectorPerCluster;
    1774:	40 e0       	ldi	r20, 0x00	; 0
    1776:	50 e0       	ldi	r21, 0x00	; 0
    1778:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <__udivmodsi4>
    177c:	20 93 ff 00 	sts	0x00FF, r18	; 0x8000ff <totalClusters>
    1780:	30 93 00 01 	sts	0x0100, r19	; 0x800100 <totalClusters+0x1>
    1784:	40 93 01 01 	sts	0x0101, r20	; 0x800101 <totalClusters+0x2>
    1788:	50 93 02 01 	sts	0x0102, r21	; 0x800102 <totalClusters+0x3>
//transmitHex(LONG, totalClusters); transmitByte(' ');

if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	a9 01       	movw	r20, r18
    1792:	60 e0       	ldi	r22, 0x00	; 0
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	0e 94 9a 0a 	call	0x1534	; 0x1534 <_Z17getSetFreeClusterhhm>
    179a:	00 91 ff 00 	lds	r16, 0x00FF	; 0x8000ff <totalClusters>
    179e:	10 91 00 01 	lds	r17, 0x0100	; 0x800100 <totalClusters+0x1>
    17a2:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <totalClusters+0x2>
    17a6:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <totalClusters+0x3>
    17aa:	06 17       	cp	r16, r22
    17ac:	17 07       	cpc	r17, r23
    17ae:	28 07       	cpc	r18, r24
    17b0:	39 07       	cpc	r19, r25
    17b2:	20 f4       	brcc	.+8      	; 0x17bc <_Z17getBootSectorDatav+0x164>
     freeClusterCountUpdated = 0;
    17b4:	10 92 e4 00 	sts	0x00E4, r1	; 0x8000e4 <freeClusterCountUpdated>
else
	 freeClusterCountUpdated = 1;
return 0;
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	08 c0       	rjmp	.+16     	; 0x17cc <_Z17getBootSectorDatav+0x174>
//transmitHex(LONG, totalClusters); transmitByte(' ');

if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     freeClusterCountUpdated = 0;
else
	 freeClusterCountUpdated = 1;
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <freeClusterCountUpdated>
return 0;
    17c2:	80 e0       	ldi	r24, 0x00	; 0
    17c4:	03 c0       	rjmp	.+6      	; 0x17cc <_Z17getBootSectorDatav+0x174>

if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
{
  mbr = (struct MBRinfo_Structure *) buffer;       //if it is not boot sector, it must be MBR
  
  if(mbr->signature != 0xaa55) return 1;       //if it is not even MBR then it's not FAT32
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	01 c0       	rjmp	.+2      	; 0x17cc <_Z17getBootSectorDatav+0x174>
  partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
  unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
  
  SD_readSingleBlock(partition->firstSector);//read the bpb sector
  bpb = (struct BS_Structure *)buffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
    17ca:	81 e0       	ldi	r24, 0x01	; 1
if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     freeClusterCountUpdated = 0;
else
	 freeClusterCountUpdated = 1;
return 0;
}
    17cc:	df 91       	pop	r29
    17ce:	cf 91       	pop	r28
    17d0:	1f 91       	pop	r17
    17d2:	0f 91       	pop	r16
    17d4:	ff 90       	pop	r15
    17d6:	ef 90       	pop	r14
    17d8:	08 95       	ret

000017da <_Z15convertFileNamePh>:
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
{
    17da:	cf 93       	push	r28
    17dc:	df 93       	push	r29
    17de:	cd b7       	in	r28, 0x3d	; 61
    17e0:	de b7       	in	r29, 0x3e	; 62
    17e2:	2b 97       	sbiw	r28, 0x0b	; 11
    17e4:	0f b6       	in	r0, 0x3f	; 63
    17e6:	f8 94       	cli
    17e8:	de bf       	out	0x3e, r29	; 62
    17ea:	0f be       	out	0x3f, r0	; 63
    17ec:	cd bf       	out	0x3d, r28	; 61
    17ee:	bc 01       	movw	r22, r24
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
if(fileName[j] == '.') break;
    17f0:	dc 01       	movw	r26, r24
    17f2:	8c 91       	ld	r24, X
    17f4:	8e 32       	cpi	r24, 0x2E	; 46
    17f6:	51 f1       	breq	.+84     	; 0x184c <_Z15convertFileNamePh+0x72>
    17f8:	fb 01       	movw	r30, r22
    17fa:	31 96       	adiw	r30, 0x01	; 1
unsigned char convertFileName (unsigned char *fileName)
{
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
    17fc:	91 e0       	ldi	r25, 0x01	; 1
if(fileName[j] == '.') break;
    17fe:	81 91       	ld	r24, Z+
    1800:	8e 32       	cpi	r24, 0x2E	; 46
    1802:	21 f0       	breq	.+8      	; 0x180c <_Z15convertFileNamePh+0x32>
unsigned char convertFileName (unsigned char *fileName)
{
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
    1804:	9f 5f       	subi	r25, 0xFF	; 255
    1806:	9c 30       	cpi	r25, 0x0C	; 12
    1808:	d1 f7       	brne	.-12     	; 0x17fe <_Z15convertFileNamePh+0x24>
    180a:	05 c0       	rjmp	.+10     	; 0x1816 <_Z15convertFileNamePh+0x3c>
if(fileName[j] == '.') break;

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}
    180c:	99 30       	cpi	r25, 0x09	; 9
    180e:	18 f4       	brcc	.+6      	; 0x1816 <_Z15convertFileNamePh+0x3c>

for(k=0; k<j; k++) //setting file name
    1810:	91 11       	cpse	r25, r1
    1812:	07 c0       	rjmp	.+14     	; 0x1822 <_Z15convertFileNamePh+0x48>
    1814:	1c c0       	rjmp	.+56     	; 0x184e <_Z15convertFileNamePh+0x74>
unsigned char j, k;

for(j=0; j<12; j++)
if(fileName[j] == '.') break;

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}
    1816:	8f e5       	ldi	r24, 0x5F	; 95
    1818:	93 e0       	ldi	r25, 0x03	; 3
    181a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	63 c0       	rjmp	.+198    	; 0x18e8 <_Z15convertFileNamePh+0x10e>
    1822:	fb 01       	movw	r30, r22
    1824:	9e 01       	movw	r18, r28
    1826:	2f 5f       	subi	r18, 0xFF	; 255
    1828:	3f 4f       	sbci	r19, 0xFF	; 255
    182a:	4f ef       	ldi	r20, 0xFF	; 255
    182c:	49 0f       	add	r20, r25
    182e:	50 e0       	ldi	r21, 0x00	; 0
    1830:	4f 5f       	subi	r20, 0xFF	; 255
    1832:	5f 4f       	sbci	r21, 0xFF	; 255
    1834:	46 0f       	add	r20, r22
    1836:	57 1f       	adc	r21, r23

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = fileName[k];
    1838:	81 91       	ld	r24, Z+
    183a:	d9 01       	movw	r26, r18
    183c:	8d 93       	st	X+, r24
    183e:	9d 01       	movw	r18, r26
for(j=0; j<12; j++)
if(fileName[j] == '.') break;

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}

for(k=0; k<j; k++) //setting file name
    1840:	e4 17       	cp	r30, r20
    1842:	f5 07       	cpc	r31, r21
    1844:	c9 f7       	brne	.-14     	; 0x1838 <_Z15convertFileNamePh+0x5e>
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
    1846:	98 30       	cpi	r25, 0x08	; 8
    1848:	10 f0       	brcs	.+4      	; 0x184e <_Z15convertFileNamePh+0x74>
    184a:	0d c0       	rjmp	.+26     	; 0x1866 <_Z15convertFileNamePh+0x8c>
unsigned char convertFileName (unsigned char *fileName)
{
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	29 2f       	mov	r18, r25

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';
    1850:	80 e2       	ldi	r24, 0x20	; 32
    1852:	e1 e0       	ldi	r30, 0x01	; 1
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	ec 0f       	add	r30, r28
    1858:	fd 1f       	adc	r31, r29
    185a:	e2 0f       	add	r30, r18
    185c:	f1 1d       	adc	r31, r1
    185e:	80 83       	st	Z, r24
if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
    1860:	2f 5f       	subi	r18, 0xFF	; 255
    1862:	28 30       	cpi	r18, 0x08	; 8
    1864:	b0 f3       	brcs	.-20     	; 0x1852 <_Z15convertFileNamePh+0x78>
  fileNameFAT[k] = ' ';

j++;
    1866:	21 e0       	ldi	r18, 0x01	; 1
    1868:	29 0f       	add	r18, r25
for(k=8; k<11; k++) //setting file extention
    186a:	98 e0       	ldi	r25, 0x08	; 8
{
  if(fileName[j] != 0)
    186c:	fb 01       	movw	r30, r22
    186e:	e2 0f       	add	r30, r18
    1870:	f1 1d       	adc	r31, r1
    1872:	80 81       	ld	r24, Z
    1874:	81 11       	cpse	r24, r1
    1876:	03 c0       	rjmp	.+6      	; 0x187e <_Z15convertFileNamePh+0xa4>
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
    1878:	9b 30       	cpi	r25, 0x0B	; 11
    187a:	50 f0       	brcs	.+20     	; 0x1890 <_Z15convertFileNamePh+0xb6>
    187c:	15 c0       	rjmp	.+42     	; 0x18a8 <_Z15convertFileNamePh+0xce>

j++;
for(k=8; k<11; k++) //setting file extention
{
  if(fileName[j] != 0)
    fileNameFAT[k] = fileName[j++];
    187e:	2f 5f       	subi	r18, 0xFF	; 255
    1880:	e1 e0       	ldi	r30, 0x01	; 1
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	ec 0f       	add	r30, r28
    1886:	fd 1f       	adc	r31, r29
    1888:	e9 0f       	add	r30, r25
    188a:	f1 1d       	adc	r31, r1
    188c:	80 83       	st	Z, r24
    188e:	0c c0       	rjmp	.+24     	; 0x18a8 <_Z15convertFileNamePh+0xce>
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
    1890:	20 e2       	ldi	r18, 0x20	; 32
    1892:	e1 e0       	ldi	r30, 0x01	; 1
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	ec 0f       	add	r30, r28
    1898:	fd 1f       	adc	r31, r29
    189a:	e9 0f       	add	r30, r25
    189c:	f1 1d       	adc	r31, r1
    189e:	20 83       	st	Z, r18
    18a0:	9f 5f       	subi	r25, 0xFF	; 255
for(k=8; k<11; k++) //setting file extention
{
  if(fileName[j] != 0)
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
    18a2:	9b 30       	cpi	r25, 0x0B	; 11
    18a4:	b1 f7       	brne	.-20     	; 0x1892 <_Z15convertFileNamePh+0xb8>
    18a6:	03 c0       	rjmp	.+6      	; 0x18ae <_Z15convertFileNamePh+0xd4>

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';

j++;
for(k=8; k<11; k++) //setting file extention
    18a8:	9f 5f       	subi	r25, 0xFF	; 255
    18aa:	9b 30       	cpi	r25, 0x0B	; 11
    18ac:	f8 f2       	brcs	.-66     	; 0x186c <_Z15convertFileNamePh+0x92>
    18ae:	9e 01       	movw	r18, r28
    18b0:	2f 5f       	subi	r18, 0xFF	; 255
    18b2:	3f 4f       	sbci	r19, 0xFF	; 255
    18b4:	ae 01       	movw	r20, r28
    18b6:	44 5f       	subi	r20, 0xF4	; 244
    18b8:	5f 4f       	sbci	r21, 0xFF	; 255
    18ba:	f9 01       	movw	r30, r18
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    18bc:	90 81       	ld	r25, Z
    18be:	8f e9       	ldi	r24, 0x9F	; 159
    18c0:	89 0f       	add	r24, r25
    18c2:	8a 31       	cpi	r24, 0x1A	; 26
    18c4:	10 f4       	brcc	.+4      	; 0x18ca <_Z15convertFileNamePh+0xf0>
    fileNameFAT[j] -= 0x20;
    18c6:	90 52       	subi	r25, 0x20	; 32
    18c8:	90 83       	st	Z, r25
    18ca:	31 96       	adiw	r30, 0x01	; 1
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
    18cc:	e4 17       	cp	r30, r20
    18ce:	f5 07       	cpc	r31, r21
    18d0:	a9 f7       	brne	.-22     	; 0x18bc <_Z15convertFileNamePh+0xe2>
    18d2:	fb 01       	movw	r30, r22
    18d4:	65 5f       	subi	r22, 0xF5	; 245
    18d6:	7f 4f       	sbci	r23, 0xFF	; 255
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
  fileName[j] = fileNameFAT[j];
    18d8:	d9 01       	movw	r26, r18
    18da:	8d 91       	ld	r24, X+
    18dc:	9d 01       	movw	r18, r26
    18de:	81 93       	st	Z+, r24

for(j=0; j<11; j++) //converting small letters to caps
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
    18e0:	e6 17       	cp	r30, r22
    18e2:	f7 07       	cpc	r31, r23
    18e4:	c9 f7       	brne	.-14     	; 0x18d8 <_Z15convertFileNamePh+0xfe>
  fileName[j] = fileNameFAT[j];

return 0;
    18e6:	80 e0       	ldi	r24, 0x00	; 0
}
    18e8:	2b 96       	adiw	r28, 0x0b	; 11
    18ea:	0f b6       	in	r0, 0x3f	; 63
    18ec:	f8 94       	cli
    18ee:	de bf       	out	0x3e, r29	; 62
    18f0:	0f be       	out	0x3f, r0	; 63
    18f2:	cd bf       	out	0x3d, r28	; 61
    18f4:	df 91       	pop	r29
    18f6:	cf 91       	pop	r28
    18f8:	08 95       	ret

000018fa <_Z21searchNextFreeClusterm>:
//          starting from a specified cluster
//Arguments: Starting cluster
//return: the next free cluster
//****************************************************************
unsigned long searchNextFreeCluster (unsigned long startCluster)
{
    18fa:	4f 92       	push	r4
    18fc:	5f 92       	push	r5
    18fe:	6f 92       	push	r6
    1900:	7f 92       	push	r7
    1902:	8f 92       	push	r8
    1904:	9f 92       	push	r9
    1906:	af 92       	push	r10
    1908:	bf 92       	push	r11
    190a:	cf 92       	push	r12
    190c:	df 92       	push	r13
    190e:	ef 92       	push	r14
    1910:	ff 92       	push	r15
    1912:	1f 93       	push	r17
    1914:	cf 93       	push	r28
    1916:	df 93       	push	r29
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    1918:	6b 01       	movw	r12, r22
    191a:	7c 01       	movw	r14, r24
    191c:	20 e8       	ldi	r18, 0x80	; 128
    191e:	c2 22       	and	r12, r18
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    1920:	80 91 ff 00 	lds	r24, 0x00FF	; 0x8000ff <totalClusters>
    1924:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <totalClusters+0x1>
    1928:	a0 91 01 01 	lds	r26, 0x0101	; 0x800101 <totalClusters+0x2>
    192c:	b0 91 02 01 	lds	r27, 0x0102	; 0x800102 <totalClusters+0x3>
    1930:	c8 16       	cp	r12, r24
    1932:	d9 06       	cpc	r13, r25
    1934:	ea 06       	cpc	r14, r26
    1936:	fb 06       	cpc	r15, r27
    1938:	08 f0       	brcs	.+2      	; 0x193c <_Z21searchNextFreeClusterm+0x42>
    193a:	71 c0       	rjmp	.+226    	; 0x1a1e <_Z21searchNextFreeClusterm+0x124>
    193c:	46 01       	movw	r8, r12
    193e:	57 01       	movw	r10, r14
    1940:	88 0c       	add	r8, r8
    1942:	99 1c       	adc	r9, r9
    1944:	aa 1c       	adc	r10, r10
    1946:	bb 1c       	adc	r11, r11
    1948:	88 0c       	add	r8, r8
    194a:	99 1c       	adc	r9, r9
    194c:	aa 1c       	adc	r10, r10
    194e:	bb 1c       	adc	r11, r11
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
      {
       	 value = (unsigned long *) &buffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
    1950:	c8 e3       	ldi	r28, 0x38	; 56
    1952:	d1 e0       	ldi	r29, 0x01	; 1
    1954:	11 e0       	ldi	r17, 0x01	; 1
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
    1956:	40 91 f9 00 	lds	r20, 0x00F9	; 0x8000f9 <reservedSectorCount>
    195a:	50 91 fa 00 	lds	r21, 0x00FA	; 0x8000fa <reservedSectorCount+0x1>
    195e:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <bytesPerSector>
    1962:	90 91 fe 00 	lds	r25, 0x00FE	; 0x8000fe <bytesPerSector+0x1>
    1966:	40 90 f5 00 	lds	r4, 0x00F5	; 0x8000f5 <unusedSectors>
    196a:	50 90 f6 00 	lds	r5, 0x00F6	; 0x8000f6 <unusedSectors+0x1>
    196e:	60 90 f7 00 	lds	r6, 0x00F7	; 0x8000f7 <unusedSectors+0x2>
    1972:	70 90 f8 00 	lds	r7, 0x00F8	; 0x8000f8 <unusedSectors+0x3>
    1976:	44 0e       	add	r4, r20
    1978:	55 1e       	adc	r5, r21
    197a:	61 1c       	adc	r6, r1
    197c:	71 1c       	adc	r7, r1
    197e:	9c 01       	movw	r18, r24
    1980:	40 e0       	ldi	r20, 0x00	; 0
    1982:	50 e0       	ldi	r21, 0x00	; 0
    1984:	c5 01       	movw	r24, r10
    1986:	b4 01       	movw	r22, r8
    1988:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <__udivmodsi4>
    198c:	c3 01       	movw	r24, r6
    198e:	b2 01       	movw	r22, r4
    1990:	62 0f       	add	r22, r18
    1992:	73 1f       	adc	r23, r19
    1994:	84 1f       	adc	r24, r20
    1996:	95 1f       	adc	r25, r21
      SD_readSingleBlock(sector);
    1998:	0e 94 02 04 	call	0x804	; 0x804 <_Z18SD_readSingleBlockm>
      for(i=0; i<128; i++)
      {
       	 value = (unsigned long *) &buffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
    199c:	88 81       	ld	r24, Y
    199e:	99 81       	ldd	r25, Y+1	; 0x01
    19a0:	aa 81       	ldd	r26, Y+2	; 0x02
    19a2:	bb 81       	ldd	r27, Y+3	; 0x03
    19a4:	bf 70       	andi	r27, 0x0F	; 15
    19a6:	89 2b       	or	r24, r25
    19a8:	8a 2b       	or	r24, r26
    19aa:	8b 2b       	or	r24, r27
    19ac:	99 f0       	breq	.+38     	; 0x19d4 <_Z21searchNextFreeClusterm+0xda>
    19ae:	21 2f       	mov	r18, r17
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
      {
       	 value = (unsigned long *) &buffer[i*4];
    19b0:	e2 2f       	mov	r30, r18
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	ee 0f       	add	r30, r30
    19b6:	ff 1f       	adc	r31, r31
    19b8:	ee 0f       	add	r30, r30
    19ba:	ff 1f       	adc	r31, r31
         if(((*value) & 0x0fffffff) == 0)
    19bc:	e8 5c       	subi	r30, 0xC8	; 200
    19be:	fe 4f       	sbci	r31, 0xFE	; 254
    19c0:	80 81       	ld	r24, Z
    19c2:	91 81       	ldd	r25, Z+1	; 0x01
    19c4:	a2 81       	ldd	r26, Z+2	; 0x02
    19c6:	b3 81       	ldd	r27, Z+3	; 0x03
    19c8:	bf 70       	andi	r27, 0x0F	; 15
    19ca:	89 2b       	or	r24, r25
    19cc:	8a 2b       	or	r24, r26
    19ce:	8b 2b       	or	r24, r27
    19d0:	49 f4       	brne	.+18     	; 0x19e4 <_Z21searchNextFreeClusterm+0xea>
    19d2:	01 c0       	rjmp	.+2      	; 0x19d6 <_Z21searchNextFreeClusterm+0xdc>
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
    19d4:	20 e0       	ldi	r18, 0x00	; 0
      {
       	 value = (unsigned long *) &buffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
            return(cluster+i);
    19d6:	c7 01       	movw	r24, r14
    19d8:	b6 01       	movw	r22, r12
    19da:	62 0f       	add	r22, r18
    19dc:	71 1d       	adc	r23, r1
    19de:	81 1d       	adc	r24, r1
    19e0:	91 1d       	adc	r25, r1
    19e2:	20 c0       	rjmp	.+64     	; 0x1a24 <_Z21searchNextFreeClusterm+0x12a>
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
    19e4:	2f 5f       	subi	r18, 0xFF	; 255
    19e6:	22 f7       	brpl	.-56     	; 0x19b0 <_Z21searchNextFreeClusterm+0xb6>
{
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    19e8:	80 e8       	ldi	r24, 0x80	; 128
    19ea:	c8 0e       	add	r12, r24
    19ec:	d1 1c       	adc	r13, r1
    19ee:	e1 1c       	adc	r14, r1
    19f0:	f1 1c       	adc	r15, r1
    19f2:	80 91 ff 00 	lds	r24, 0x00FF	; 0x8000ff <totalClusters>
    19f6:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <totalClusters+0x1>
    19fa:	a0 91 01 01 	lds	r26, 0x0101	; 0x800101 <totalClusters+0x2>
    19fe:	b0 91 02 01 	lds	r27, 0x0102	; 0x800102 <totalClusters+0x3>
    1a02:	22 e0       	ldi	r18, 0x02	; 2
    1a04:	92 0e       	add	r9, r18
    1a06:	a1 1c       	adc	r10, r1
    1a08:	b1 1c       	adc	r11, r1
    1a0a:	c8 16       	cp	r12, r24
    1a0c:	d9 06       	cpc	r13, r25
    1a0e:	ea 06       	cpc	r14, r26
    1a10:	fb 06       	cpc	r15, r27
    1a12:	08 f4       	brcc	.+2      	; 0x1a16 <_Z21searchNextFreeClusterm+0x11c>
    1a14:	a0 cf       	rjmp	.-192    	; 0x1956 <_Z21searchNextFreeClusterm+0x5c>
         if(((*value) & 0x0fffffff) == 0)
            return(cluster+i);
      }  
    } 

 return 0;
    1a16:	60 e0       	ldi	r22, 0x00	; 0
    1a18:	70 e0       	ldi	r23, 0x00	; 0
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	03 c0       	rjmp	.+6      	; 0x1a24 <_Z21searchNextFreeClusterm+0x12a>
    1a1e:	60 e0       	ldi	r22, 0x00	; 0
    1a20:	70 e0       	ldi	r23, 0x00	; 0
    1a22:	cb 01       	movw	r24, r22
}
    1a24:	df 91       	pop	r29
    1a26:	cf 91       	pop	r28
    1a28:	1f 91       	pop	r17
    1a2a:	ff 90       	pop	r15
    1a2c:	ef 90       	pop	r14
    1a2e:	df 90       	pop	r13
    1a30:	cf 90       	pop	r12
    1a32:	bf 90       	pop	r11
    1a34:	af 90       	pop	r10
    1a36:	9f 90       	pop	r9
    1a38:	8f 90       	pop	r8
    1a3a:	7f 90       	pop	r7
    1a3c:	6f 90       	pop	r6
    1a3e:	5f 90       	pop	r5
    1a40:	4f 90       	pop	r4
    1a42:	08 95       	ret

00001a44 <_Z13displayMemoryhm>:
//Arguments: 1. unsigned char flag. If flag is HIGH, memory will be displayed in KBytes, else in Bytes. 
//			 2. unsigned long memory value
//return: none
//************************************************************
void displayMemory (unsigned char flag, unsigned long memory)
{
    1a44:	8f 92       	push	r8
    1a46:	9f 92       	push	r9
    1a48:	af 92       	push	r10
    1a4a:	bf 92       	push	r11
    1a4c:	df 92       	push	r13
    1a4e:	ef 92       	push	r14
    1a50:	ff 92       	push	r15
    1a52:	0f 93       	push	r16
    1a54:	1f 93       	push	r17
    1a56:	cf 93       	push	r28
    1a58:	df 93       	push	r29
    1a5a:	cd b7       	in	r28, 0x3d	; 61
    1a5c:	de b7       	in	r29, 0x3e	; 62
    1a5e:	64 97       	sbiw	r28, 0x14	; 20
    1a60:	0f b6       	in	r0, 0x3f	; 63
    1a62:	f8 94       	cli
    1a64:	de bf       	out	0x3e, r29	; 62
    1a66:	0f be       	out	0x3f, r0	; 63
    1a68:	cd bf       	out	0x3d, r28	; 61
    1a6a:	d8 2e       	mov	r13, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	ba 01       	movw	r22, r20
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
    1a70:	24 e1       	ldi	r18, 0x14	; 20
    1a72:	eb e6       	ldi	r30, 0x6B	; 107
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	de 01       	movw	r26, r28
    1a78:	11 96       	adiw	r26, 0x01	; 1
    1a7a:	01 90       	ld	r0, Z+
    1a7c:	0d 92       	st	X+, r0
    1a7e:	2a 95       	dec	r18
    1a80:	e1 f7       	brne	.-8      	; 0x1a7a <_Z13displayMemoryhm+0x36>
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
    1a82:	1c e0       	ldi	r17, 0x0C	; 12
  {
    if(i==5 || i==9) 
	{
	   memoryString[i-1] = ',';  
    1a84:	0c e2       	ldi	r16, 0x2C	; 44
	   i--;
	}
    memoryString[i-1] = (memory % 10) | 0x30;
    1a86:	0f 2e       	mov	r0, r31
    1a88:	fa e0       	ldi	r31, 0x0A	; 10
    1a8a:	8f 2e       	mov	r8, r31
    1a8c:	91 2c       	mov	r9, r1
    1a8e:	a1 2c       	mov	r10, r1
    1a90:	b1 2c       	mov	r11, r1
    1a92:	f0 2d       	mov	r31, r0
{
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
  {
    if(i==5 || i==9) 
    1a94:	15 30       	cpi	r17, 0x05	; 5
    1a96:	11 f0       	breq	.+4      	; 0x1a9c <_Z13displayMemoryhm+0x58>
    1a98:	19 30       	cpi	r17, 0x09	; 9
    1a9a:	29 f4       	brne	.+10     	; 0x1aa6 <_Z13displayMemoryhm+0x62>
	{
	   memoryString[i-1] = ',';  
    1a9c:	fe 01       	movw	r30, r28
    1a9e:	e1 0f       	add	r30, r17
    1aa0:	f1 1d       	adc	r31, r1
    1aa2:	00 83       	st	Z, r16
	   i--;
    1aa4:	11 50       	subi	r17, 0x01	; 1
	}
    memoryString[i-1] = (memory % 10) | 0x30;
    1aa6:	7e 01       	movw	r14, r28
    1aa8:	e1 0e       	add	r14, r17
    1aaa:	f1 1c       	adc	r15, r1
    1aac:	a5 01       	movw	r20, r10
    1aae:	94 01       	movw	r18, r8
    1ab0:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <__udivmodsi4>
    1ab4:	60 63       	ori	r22, 0x30	; 48
    1ab6:	f7 01       	movw	r30, r14
    1ab8:	60 83       	st	Z, r22
    memory /= 10;
    1aba:	62 2f       	mov	r22, r18
    1abc:	73 2f       	mov	r23, r19
    1abe:	84 2f       	mov	r24, r20
    1ac0:	95 2f       	mov	r25, r21
	if(memory == 0) break;
    1ac2:	61 15       	cp	r22, r1
    1ac4:	71 05       	cpc	r23, r1
    1ac6:	81 05       	cpc	r24, r1
    1ac8:	91 05       	cpc	r25, r1
    1aca:	11 f0       	breq	.+4      	; 0x1ad0 <_Z13displayMemoryhm+0x8c>
//************************************************************
void displayMemory (unsigned char flag, unsigned long memory)
{
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
    1acc:	11 50       	subi	r17, 0x01	; 1
    1ace:	11 f7       	brne	.-60     	; 0x1a94 <_Z13displayMemoryhm+0x50>
	}
    memoryString[i-1] = (memory % 10) | 0x30;
    memory /= 10;
	if(memory == 0) break;
  }
  if(flag == HIGH)  memoryString[13] = 'K';
    1ad0:	f1 e0       	ldi	r31, 0x01	; 1
    1ad2:	df 12       	cpse	r13, r31
    1ad4:	02 c0       	rjmp	.+4      	; 0x1ada <_Z13displayMemoryhm+0x96>
    1ad6:	8b e4       	ldi	r24, 0x4B	; 75
    1ad8:	8e 87       	std	Y+14, r24	; 0x0e
  transmitString(memoryString);
    1ada:	ce 01       	movw	r24, r28
    1adc:	01 96       	adiw	r24, 0x01	; 1
    1ade:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_Z14transmitStringPh>
}
    1ae2:	64 96       	adiw	r28, 0x14	; 20
    1ae4:	0f b6       	in	r0, 0x3f	; 63
    1ae6:	f8 94       	cli
    1ae8:	de bf       	out	0x3e, r29	; 62
    1aea:	0f be       	out	0x3f, r0	; 63
    1aec:	cd bf       	out	0x3d, r28	; 61
    1aee:	df 91       	pop	r29
    1af0:	cf 91       	pop	r28
    1af2:	1f 91       	pop	r17
    1af4:	0f 91       	pop	r16
    1af6:	ff 90       	pop	r15
    1af8:	ef 90       	pop	r14
    1afa:	df 90       	pop	r13
    1afc:	bf 90       	pop	r11
    1afe:	af 90       	pop	r10
    1b00:	9f 90       	pop	r9
    1b02:	8f 90       	pop	r8
    1b04:	08 95       	ret

00001b06 <_Z16freeMemoryUpdatehm>:
//			to ADD or REMOVE clusters occupied by the file
//Arguments: #1.flag ADD or REMOVE #2.file size in Bytes
//return: none
//********************************************************************
void freeMemoryUpdate (unsigned char flag, unsigned long size)
{
    1b06:	cf 92       	push	r12
    1b08:	df 92       	push	r13
    1b0a:	ef 92       	push	r14
    1b0c:	ff 92       	push	r15
    1b0e:	cf 93       	push	r28
  unsigned long freeClusters;
  //convert file size into number of clusters occupied
  if((size % 512) == 0) size = size / 512;
    1b10:	6a 01       	movw	r12, r20
    1b12:	7b 01       	movw	r14, r22
    1b14:	91 e0       	ldi	r25, 0x01	; 1
    1b16:	d9 22       	and	r13, r25
    1b18:	ee 24       	eor	r14, r14
    1b1a:	ff 24       	eor	r15, r15
    1b1c:	cd 28       	or	r12, r13
    1b1e:	ce 28       	or	r12, r14
    1b20:	cf 28       	or	r12, r15
    1b22:	51 f4       	brne	.+20     	; 0x1b38 <_Z16freeMemoryUpdatehm+0x32>
    1b24:	03 2e       	mov	r0, r19
    1b26:	39 e0       	ldi	r19, 0x09	; 9
    1b28:	76 95       	lsr	r23
    1b2a:	67 95       	ror	r22
    1b2c:	57 95       	ror	r21
    1b2e:	47 95       	ror	r20
    1b30:	3a 95       	dec	r19
    1b32:	d1 f7       	brne	.-12     	; 0x1b28 <_Z16freeMemoryUpdatehm+0x22>
    1b34:	30 2d       	mov	r19, r0
    1b36:	0d c0       	rjmp	.+26     	; 0x1b52 <_Z16freeMemoryUpdatehm+0x4c>
  else size = (size / 512) +1;
    1b38:	03 2e       	mov	r0, r19
    1b3a:	39 e0       	ldi	r19, 0x09	; 9
    1b3c:	76 95       	lsr	r23
    1b3e:	67 95       	ror	r22
    1b40:	57 95       	ror	r21
    1b42:	47 95       	ror	r20
    1b44:	3a 95       	dec	r19
    1b46:	d1 f7       	brne	.-12     	; 0x1b3c <_Z16freeMemoryUpdatehm+0x36>
    1b48:	30 2d       	mov	r19, r0
    1b4a:	4f 5f       	subi	r20, 0xFF	; 255
    1b4c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b4e:	6f 4f       	sbci	r22, 0xFF	; 255
    1b50:	7f 4f       	sbci	r23, 0xFF	; 255
  if((size % 8) == 0) size = size / 8;
    1b52:	6a 01       	movw	r12, r20
    1b54:	7b 01       	movw	r14, r22
    1b56:	97 e0       	ldi	r25, 0x07	; 7
    1b58:	c9 22       	and	r12, r25
    1b5a:	dd 24       	eor	r13, r13
    1b5c:	ee 24       	eor	r14, r14
    1b5e:	ff 24       	eor	r15, r15
    1b60:	cd 28       	or	r12, r13
    1b62:	ce 28       	or	r12, r14
    1b64:	cf 28       	or	r12, r15
    1b66:	59 f4       	brne	.+22     	; 0x1b7e <_Z16freeMemoryUpdatehm+0x78>
    1b68:	6a 01       	movw	r12, r20
    1b6a:	7b 01       	movw	r14, r22
    1b6c:	68 94       	set
    1b6e:	12 f8       	bld	r1, 2
    1b70:	f6 94       	lsr	r15
    1b72:	e7 94       	ror	r14
    1b74:	d7 94       	ror	r13
    1b76:	c7 94       	ror	r12
    1b78:	16 94       	lsr	r1
    1b7a:	d1 f7       	brne	.-12     	; 0x1b70 <_Z16freeMemoryUpdatehm+0x6a>
    1b7c:	0f c0       	rjmp	.+30     	; 0x1b9c <_Z16freeMemoryUpdatehm+0x96>
  else size = (size / 8) +1;
    1b7e:	68 94       	set
    1b80:	12 f8       	bld	r1, 2
    1b82:	76 95       	lsr	r23
    1b84:	67 95       	ror	r22
    1b86:	57 95       	ror	r21
    1b88:	47 95       	ror	r20
    1b8a:	16 94       	lsr	r1
    1b8c:	d1 f7       	brne	.-12     	; 0x1b82 <_Z16freeMemoryUpdatehm+0x7c>
    1b8e:	6a 01       	movw	r12, r20
    1b90:	7b 01       	movw	r14, r22
    1b92:	9f ef       	ldi	r25, 0xFF	; 255
    1b94:	c9 1a       	sub	r12, r25
    1b96:	d9 0a       	sbc	r13, r25
    1b98:	e9 0a       	sbc	r14, r25
    1b9a:	f9 0a       	sbc	r15, r25

  if(freeClusterCountUpdated)
    1b9c:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <freeClusterCountUpdated>
    1ba0:	99 23       	and	r25, r25
    1ba2:	d9 f0       	breq	.+54     	; 0x1bda <_Z16freeMemoryUpdatehm+0xd4>
    1ba4:	c8 2f       	mov	r28, r24
  {
	freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	a9 01       	movw	r20, r18
    1bac:	60 e0       	ldi	r22, 0x00	; 0
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	0e 94 9a 0a 	call	0x1534	; 0x1534 <_Z17getSetFreeClusterhhm>
	if(flag == ADD)
    1bb4:	c1 11       	cpse	r28, r1
    1bb6:	07 c0       	rjmp	.+14     	; 0x1bc6 <_Z16freeMemoryUpdatehm+0xc0>
  	   freeClusters = freeClusters + size;
    1bb8:	9b 01       	movw	r18, r22
    1bba:	ac 01       	movw	r20, r24
    1bbc:	2c 0d       	add	r18, r12
    1bbe:	3d 1d       	adc	r19, r13
    1bc0:	4e 1d       	adc	r20, r14
    1bc2:	5f 1d       	adc	r21, r15
    1bc4:	06 c0       	rjmp	.+12     	; 0x1bd2 <_Z16freeMemoryUpdatehm+0xcc>
	else  //when flag = REMOVE
	   freeClusters = freeClusters - size;
    1bc6:	9b 01       	movw	r18, r22
    1bc8:	ac 01       	movw	r20, r24
    1bca:	2c 19       	sub	r18, r12
    1bcc:	3d 09       	sbc	r19, r13
    1bce:	4e 09       	sbc	r20, r14
    1bd0:	5f 09       	sbc	r21, r15
	getSetFreeCluster (TOTAL_FREE, SET, freeClusters);
    1bd2:	61 e0       	ldi	r22, 0x01	; 1
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	0e 94 9a 0a 	call	0x1534	; 0x1534 <_Z17getSetFreeClusterhhm>
  }
}
    1bda:	cf 91       	pop	r28
    1bdc:	ff 90       	pop	r15
    1bde:	ef 90       	pop	r14
    1be0:	df 90       	pop	r13
    1be2:	cf 90       	pop	r12
    1be4:	08 95       	ret

00001be6 <_Z9findFileshPh>:
//return: first cluster of the file, if flag = GET_FILE
//        print file/dir list of the root directory, if flag = GET_LIST
//		  Delete the file mentioned in arg#2, if flag = DELETE
//****************************************************************************
struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
{
    1be6:	2f 92       	push	r2
    1be8:	3f 92       	push	r3
    1bea:	4f 92       	push	r4
    1bec:	5f 92       	push	r5
    1bee:	6f 92       	push	r6
    1bf0:	7f 92       	push	r7
    1bf2:	8f 92       	push	r8
    1bf4:	9f 92       	push	r9
    1bf6:	af 92       	push	r10
    1bf8:	bf 92       	push	r11
    1bfa:	cf 92       	push	r12
    1bfc:	df 92       	push	r13
    1bfe:	ef 92       	push	r14
    1c00:	ff 92       	push	r15
    1c02:	0f 93       	push	r16
    1c04:	1f 93       	push	r17
    1c06:	cf 93       	push	r28
    1c08:	df 93       	push	r29
    1c0a:	cd b7       	in	r28, 0x3d	; 61
    1c0c:	de b7       	in	r29, 0x3e	; 62
    1c0e:	66 97       	sbiw	r28, 0x16	; 22
    1c10:	0f b6       	in	r0, 0x3f	; 63
    1c12:	f8 94       	cli
    1c14:	de bf       	out	0x3e, r29	; 62
    1c16:	0f be       	out	0x3f, r0	; 63
    1c18:	cd bf       	out	0x3d, r28	; 61
    1c1a:	8a 87       	std	Y+10, r24	; 0x0a
    1c1c:	2b 01       	movw	r4, r22
unsigned long cluster, sector, firstSector, firstCluster, nextCluster;
struct dir_Structure *dir;
unsigned int i;
unsigned char j;

cluster = rootCluster; //root cluster
    1c1e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rootCluster>
    1c22:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <rootCluster+0x1>
    1c26:	a0 91 05 01 	lds	r26, 0x0105	; 0x800105 <rootCluster+0x2>
    1c2a:	b0 91 06 01 	lds	r27, 0x0106	; 0x800106 <rootCluster+0x3>
    1c2e:	89 8b       	std	Y+17, r24	; 0x11
    1c30:	9a 8b       	std	Y+18, r25	; 0x12
    1c32:	ab 8b       	std	Y+19, r26	; 0x13
    1c34:	bc 8b       	std	Y+20, r27	; 0x14

     for(i=0; i<bytesPerSector; i+=32)
     {
	    dir = (struct dir_Structure *) &buffer[i];

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
    1c36:	a8 e3       	ldi	r26, 0x38	; 56
    1c38:	b1 e0       	ldi	r27, 0x01	; 1
    1c3a:	af 87       	std	Y+15, r26	; 0x0f
    1c3c:	b8 8b       	std	Y+16, r27	; 0x10
    1c3e:	9b 01       	movw	r18, r22
    1c40:	2f 5f       	subi	r18, 0xFF	; 255
    1c42:	3f 4f       	sbci	r19, 0xFF	; 255
    1c44:	3d 83       	std	Y+5, r19	; 0x05
    1c46:	2c 83       	std	Y+4, r18	; 0x04

cluster = rootCluster; //root cluster

while(1)
{
   firstSector = getFirstSector (cluster);
    1c48:	69 89       	ldd	r22, Y+17	; 0x11
    1c4a:	7a 89       	ldd	r23, Y+18	; 0x12
    1c4c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c4e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c50:	0e 94 00 0a 	call	0x1400	; 0x1400 <_Z14getFirstSectorm>
    1c54:	6b 87       	std	Y+11, r22	; 0x0b
    1c56:	7c 87       	std	Y+12, r23	; 0x0c
    1c58:	8d 87       	std	Y+13, r24	; 0x0d
    1c5a:	9e 87       	std	Y+14, r25	; 0x0e

   for(sector = 0; sector < sectorPerCluster; sector++)
    1c5c:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <sectorPerCluster>
    1c60:	90 91 fc 00 	lds	r25, 0x00FC	; 0x8000fc <sectorPerCluster+0x1>
    1c64:	89 2b       	or	r24, r25
    1c66:	09 f4       	brne	.+2      	; 0x1c6a <_Z9findFileshPh+0x84>
    1c68:	8b c1       	rjmp	.+790    	; 0x1f80 <_Z9findFileshPh+0x39a>
    1c6a:	81 2c       	mov	r8, r1
    1c6c:	91 2c       	mov	r9, r1
    1c6e:	a1 2c       	mov	r10, r1
    1c70:	b1 2c       	mov	r11, r1
		      transmitString_F(PSTR("File does not exist!"));
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
    1c72:	3a 85       	ldd	r19, Y+10	; 0x0a
    1c74:	31 50       	subi	r19, 0x01	; 1
    1c76:	39 83       	std	Y+1, r19	; 0x01
			  }
            }
          }
          else  //when flag = GET_LIST
		  {
		     TX_NEWLINE;
    1c78:	cc 24       	eor	r12, r12
    1c7a:	c3 94       	inc	r12
{
   firstSector = getFirstSector (cluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
    1c7c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c7e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c80:	ad 85       	ldd	r26, Y+13	; 0x0d
    1c82:	be 85       	ldd	r27, Y+14	; 0x0e
    1c84:	88 0d       	add	r24, r8
    1c86:	99 1d       	adc	r25, r9
    1c88:	aa 1d       	adc	r26, r10
    1c8a:	bb 1d       	adc	r27, r11
    1c8c:	8e 83       	std	Y+6, r24	; 0x06
    1c8e:	9f 83       	std	Y+7, r25	; 0x07
    1c90:	a8 87       	std	Y+8, r26	; 0x08
    1c92:	b9 87       	std	Y+9, r27	; 0x09
    1c94:	bc 01       	movw	r22, r24
    1c96:	cd 01       	movw	r24, r26
    1c98:	0e 94 02 04 	call	0x804	; 0x804 <_Z18SD_readSingleBlockm>
	

     for(i=0; i<bytesPerSector; i+=32)
    1c9c:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <bytesPerSector>
    1ca0:	90 91 fe 00 	lds	r25, 0x00FE	; 0x8000fe <bytesPerSector+0x1>
    1ca4:	89 2b       	or	r24, r25
    1ca6:	09 f4       	brne	.+2      	; 0x1caa <_Z9findFileshPh+0xc4>
    1ca8:	5a c1       	rjmp	.+692    	; 0x1f5e <_Z9findFileshPh+0x378>
     {
	    dir = (struct dir_Structure *) &buffer[i];

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
    1caa:	a8 e3       	ldi	r26, 0x38	; 56
    1cac:	b1 e0       	ldi	r27, 0x01	; 1
    1cae:	8c 91       	ld	r24, X
    1cb0:	81 11       	cpse	r24, r1
    1cb2:	15 c0       	rjmp	.+42     	; 0x1cde <_Z9findFileshPh+0xf8>
    1cb4:	09 c0       	rjmp	.+18     	; 0x1cc8 <_Z9findFileshPh+0xe2>
    1cb6:	b0 e2       	ldi	r27, 0x20	; 32
    1cb8:	2b 0e       	add	r2, r27
    1cba:	31 1c       	adc	r3, r1
    1cbc:	f1 01       	movw	r30, r2
    1cbe:	80 81       	ld	r24, Z
    1cc0:	00 5e       	subi	r16, 0xE0	; 224
    1cc2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc4:	81 11       	cpse	r24, r1
    1cc6:	11 c0       	rjmp	.+34     	; 0x1cea <_Z9findFileshPh+0x104>
		{
		  if(flag == DELETE)
    1cc8:	fa 85       	ldd	r31, Y+10	; 0x0a
    1cca:	f2 30       	cpi	r31, 0x02	; 2
    1ccc:	09 f0       	breq	.+2      	; 0x1cd0 <_Z9findFileshPh+0xea>
    1cce:	7a c1       	rjmp	.+756    	; 0x1fc4 <_Z9findFileshPh+0x3de>
		      transmitString_F(PSTR("File does not exist!"));
    1cd0:	83 ed       	ldi	r24, 0xD3	; 211
    1cd2:	93 e0       	ldi	r25, 0x03	; 3
    1cd4:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
		  return 0;   
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	78 c1       	rjmp	.+752    	; 0x1fce <_Z9findFileshPh+0x3e8>
    1cde:	03 e4       	ldi	r16, 0x43	; 67
    1ce0:	11 e0       	ldi	r17, 0x01	; 1

     for(i=0; i<bytesPerSector; i+=32)
     {
	    dir = (struct dir_Structure *) &buffer[i];

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
    1ce2:	2f 84       	ldd	r2, Y+15	; 0x0f
    1ce4:	38 88       	ldd	r3, Y+16	; 0x10
    1ce6:	61 2c       	mov	r6, r1
    1ce8:	71 2c       	mov	r7, r1
		{
		  if(flag == DELETE)
		      transmitString_F(PSTR("File does not exist!"));
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
    1cea:	85 3e       	cpi	r24, 0xE5	; 229
    1cec:	09 f4       	brne	.+2      	; 0x1cf0 <_Z9findFileshPh+0x10a>
    1cee:	2c c1       	rjmp	.+600    	; 0x1f48 <_Z9findFileshPh+0x362>
    1cf0:	78 01       	movw	r14, r16
    1cf2:	d8 01       	movw	r26, r16
    1cf4:	8c 91       	ld	r24, X
    1cf6:	8f 30       	cpi	r24, 0x0F	; 15
    1cf8:	09 f4       	brne	.+2      	; 0x1cfc <_Z9findFileshPh+0x116>
    1cfa:	26 c1       	rjmp	.+588    	; 0x1f48 <_Z9findFileshPh+0x362>
        {
          if((flag == GET_FILE) || (flag == DELETE))
    1cfc:	b9 81       	ldd	r27, Y+1	; 0x01
    1cfe:	b2 30       	cpi	r27, 0x02	; 2
    1d00:	08 f0       	brcs	.+2      	; 0x1d04 <_Z9findFileshPh+0x11e>
    1d02:	d2 c0       	rjmp	.+420    	; 0x1ea8 <_Z9findFileshPh+0x2c2>
          {
            for(j=0; j<11; j++)
            if(dir->name[j] != fileName[j]) break;
    1d04:	f1 01       	movw	r30, r2
    1d06:	90 81       	ld	r25, Z
    1d08:	d2 01       	movw	r26, r4
    1d0a:	8c 91       	ld	r24, X
    1d0c:	98 13       	cpse	r25, r24
    1d0e:	1c c1       	rjmp	.+568    	; 0x1f48 <_Z9findFileshPh+0x362>
    1d10:	d1 01       	movw	r26, r2
    1d12:	11 96       	adiw	r26, 0x01	; 1
    1d14:	2c 81       	ldd	r18, Y+4	; 0x04
    1d16:	3d 81       	ldd	r19, Y+5	; 0x05
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
          {
            for(j=0; j<11; j++)
    1d18:	8c 2d       	mov	r24, r12
    1d1a:	f9 01       	movw	r30, r18
            if(dir->name[j] != fileName[j]) break;
    1d1c:	2d 91       	ld	r18, X+
    1d1e:	91 91       	ld	r25, Z+
    1d20:	29 13       	cpse	r18, r25
    1d22:	05 c0       	rjmp	.+10     	; 0x1d2e <_Z9findFileshPh+0x148>
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
          {
            for(j=0; j<11; j++)
    1d24:	8f 5f       	subi	r24, 0xFF	; 255
    1d26:	8b 30       	cpi	r24, 0x0B	; 11
    1d28:	c9 f7       	brne	.-14     	; 0x1d1c <_Z9findFileshPh+0x136>
    1d2a:	81 01       	movw	r16, r2
    1d2c:	04 c0       	rjmp	.+8      	; 0x1d36 <_Z9findFileshPh+0x150>
            if(dir->name[j] != fileName[j]) break;
            if(j == 11)
    1d2e:	8b 30       	cpi	r24, 0x0B	; 11
    1d30:	09 f0       	breq	.+2      	; 0x1d34 <_Z9findFileshPh+0x14e>
    1d32:	0a c1       	rjmp	.+532    	; 0x1f48 <_Z9findFileshPh+0x362>
    1d34:	81 01       	movw	r16, r2
			{
			  if(flag == GET_FILE)
    1d36:	ba 85       	ldd	r27, Y+10	; 0x0a
    1d38:	b1 30       	cpi	r27, 0x01	; 1
    1d3a:	09 f0       	breq	.+2      	; 0x1d3e <_Z9findFileshPh+0x158>
    1d3c:	41 c0       	rjmp	.+130    	; 0x1dc0 <_Z9findFileshPh+0x1da>
              {
			    appendFileSector = firstSector + sector;
    1d3e:	8e 81       	ldd	r24, Y+6	; 0x06
    1d40:	9f 81       	ldd	r25, Y+7	; 0x07
    1d42:	a8 85       	ldd	r26, Y+8	; 0x08
    1d44:	b9 85       	ldd	r27, Y+9	; 0x09
    1d46:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <appendFileSector>
    1d4a:	90 93 f2 00 	sts	0x00F2, r25	; 0x8000f2 <appendFileSector+0x1>
    1d4e:	a0 93 f3 00 	sts	0x00F3, r26	; 0x8000f3 <appendFileSector+0x2>
    1d52:	b0 93 f4 00 	sts	0x00F4, r27	; 0x8000f4 <appendFileSector+0x3>
				appendFileLocation = i;
    1d56:	c3 01       	movw	r24, r6
    1d58:	a0 e0       	ldi	r26, 0x00	; 0
    1d5a:	b0 e0       	ldi	r27, 0x00	; 0
    1d5c:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <appendFileLocation>
    1d60:	90 93 ee 00 	sts	0x00EE, r25	; 0x8000ee <appendFileLocation+0x1>
    1d64:	a0 93 ef 00 	sts	0x00EF, r26	; 0x8000ef <appendFileLocation+0x2>
    1d68:	b0 93 f0 00 	sts	0x00F0, r27	; 0x8000f0 <appendFileLocation+0x3>
				appendStartCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    1d6c:	d8 01       	movw	r26, r16
    1d6e:	54 96       	adiw	r26, 0x14	; 20
    1d70:	8d 91       	ld	r24, X+
    1d72:	9c 91       	ld	r25, X
    1d74:	55 97       	sbiw	r26, 0x15	; 21
    1d76:	a0 e0       	ldi	r26, 0x00	; 0
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	dc 01       	movw	r26, r24
    1d7c:	99 27       	eor	r25, r25
    1d7e:	88 27       	eor	r24, r24
    1d80:	f8 01       	movw	r30, r16
    1d82:	42 8d       	ldd	r20, Z+26	; 0x1a
    1d84:	53 8d       	ldd	r21, Z+27	; 0x1b
    1d86:	60 e0       	ldi	r22, 0x00	; 0
    1d88:	70 e0       	ldi	r23, 0x00	; 0
    1d8a:	84 2b       	or	r24, r20
    1d8c:	95 2b       	or	r25, r21
    1d8e:	a6 2b       	or	r26, r22
    1d90:	b7 2b       	or	r27, r23
    1d92:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <appendStartCluster>
    1d96:	90 93 e6 00 	sts	0x00E6, r25	; 0x8000e6 <appendStartCluster+0x1>
    1d9a:	a0 93 e7 00 	sts	0x00E7, r26	; 0x8000e7 <appendStartCluster+0x2>
    1d9e:	b0 93 e8 00 	sts	0x00E8, r27	; 0x8000e8 <appendStartCluster+0x3>
				fileSize = dir->fileSize;
    1da2:	84 8d       	ldd	r24, Z+28	; 0x1c
    1da4:	95 8d       	ldd	r25, Z+29	; 0x1d
    1da6:	a6 8d       	ldd	r26, Z+30	; 0x1e
    1da8:	b7 8d       	ldd	r27, Z+31	; 0x1f
    1daa:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <fileSize>
    1dae:	90 93 ea 00 	sts	0x00EA, r25	; 0x8000ea <fileSize+0x1>
    1db2:	a0 93 eb 00 	sts	0x00EB, r26	; 0x8000eb <fileSize+0x2>
    1db6:	b0 93 ec 00 	sts	0x00EC, r27	; 0x8000ec <fileSize+0x3>
			    return (dir);
    1dba:	82 2d       	mov	r24, r2
    1dbc:	93 2d       	mov	r25, r3
    1dbe:	07 c1       	rjmp	.+526    	; 0x1fce <_Z9findFileshPh+0x3e8>
			  }	
			  else    //when flag = DELETE
			  {
			     TX_NEWLINE;
    1dc0:	8d e0       	ldi	r24, 0x0D	; 13
    1dc2:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
    1dc6:	8a e0       	ldi	r24, 0x0A	; 10
    1dc8:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
				 transmitString_F(PSTR("Deleting.."));
    1dcc:	88 ec       	ldi	r24, 0xC8	; 200
    1dce:	93 e0       	ldi	r25, 0x03	; 3
    1dd0:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
				 TX_NEWLINE;
    1dd4:	8d e0       	ldi	r24, 0x0D	; 13
    1dd6:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
    1dda:	8a e0       	ldi	r24, 0x0A	; 10
    1ddc:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
				 TX_NEWLINE;
    1de0:	8d e0       	ldi	r24, 0x0D	; 13
    1de2:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
    1de6:	8a e0       	ldi	r24, 0x0A	; 10
    1de8:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
				 firstCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    1dec:	d8 01       	movw	r26, r16
    1dee:	54 96       	adiw	r26, 0x14	; 20
    1df0:	cd 90       	ld	r12, X+
    1df2:	dc 90       	ld	r13, X
    1df4:	55 97       	sbiw	r26, 0x15	; 21
    1df6:	e1 2c       	mov	r14, r1
    1df8:	f1 2c       	mov	r15, r1
    1dfa:	d6 01       	movw	r26, r12
    1dfc:	99 27       	eor	r25, r25
    1dfe:	88 27       	eor	r24, r24
    1e00:	f8 01       	movw	r30, r16
    1e02:	c2 8c       	ldd	r12, Z+26	; 0x1a
    1e04:	d3 8c       	ldd	r13, Z+27	; 0x1b
    1e06:	e1 2c       	mov	r14, r1
    1e08:	f1 2c       	mov	r15, r1
    1e0a:	c8 2a       	or	r12, r24
    1e0c:	d9 2a       	or	r13, r25
    1e0e:	ea 2a       	or	r14, r26
    1e10:	fb 2a       	or	r15, r27
                
				 //mark file as 'deleted' in FAT table
				 dir->name[0] = DELETED;    
    1e12:	85 ee       	ldi	r24, 0xE5	; 229
    1e14:	80 83       	st	Z, r24
				 SD_writeSingleBlock (firstSector+sector);
    1e16:	6e 81       	ldd	r22, Y+6	; 0x06
    1e18:	7f 81       	ldd	r23, Y+7	; 0x07
    1e1a:	88 85       	ldd	r24, Y+8	; 0x08
    1e1c:	99 85       	ldd	r25, Y+9	; 0x09
    1e1e:	0e 94 34 04 	call	0x868	; 0x868 <_Z19SD_writeSingleBlockm>
				 			 
				 freeMemoryUpdate (ADD, dir->fileSize);
    1e22:	d8 01       	movw	r26, r16
    1e24:	5c 96       	adiw	r26, 0x1c	; 28
    1e26:	4d 91       	ld	r20, X+
    1e28:	5d 91       	ld	r21, X+
    1e2a:	6d 91       	ld	r22, X+
    1e2c:	7c 91       	ld	r23, X
    1e2e:	5f 97       	sbiw	r26, 0x1f	; 31
    1e30:	80 e0       	ldi	r24, 0x00	; 0
    1e32:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <_Z16freeMemoryUpdatehm>

				 //update next free cluster entry in FSinfo sector
				 cluster = getSetFreeCluster (NEXT_FREE, GET, 0); 
    1e36:	20 e0       	ldi	r18, 0x00	; 0
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	a9 01       	movw	r20, r18
    1e3c:	60 e0       	ldi	r22, 0x00	; 0
    1e3e:	82 e0       	ldi	r24, 0x02	; 2
    1e40:	0e 94 9a 0a 	call	0x1534	; 0x1534 <_Z17getSetFreeClusterhhm>
				 if(firstCluster < cluster)
    1e44:	c6 16       	cp	r12, r22
    1e46:	d7 06       	cpc	r13, r23
    1e48:	e8 06       	cpc	r14, r24
    1e4a:	f9 06       	cpc	r15, r25
    1e4c:	30 f4       	brcc	.+12     	; 0x1e5a <_Z9findFileshPh+0x274>
				     getSetFreeCluster (NEXT_FREE, SET, firstCluster);
    1e4e:	a7 01       	movw	r20, r14
    1e50:	96 01       	movw	r18, r12
    1e52:	61 e0       	ldi	r22, 0x01	; 1
    1e54:	82 e0       	ldi	r24, 0x02	; 2
    1e56:	0e 94 9a 0a 	call	0x1534	; 0x1534 <_Z17getSetFreeClusterhhm>

				 //mark all the clusters allocated to the file as 'free'
			     while(1)  
			     {
			        nextCluster = getSetNextCluster (firstCluster, GET, 0);
    1e5a:	00 e0       	ldi	r16, 0x00	; 0
    1e5c:	10 e0       	ldi	r17, 0x00	; 0
    1e5e:	98 01       	movw	r18, r16
    1e60:	40 e0       	ldi	r20, 0x00	; 0
    1e62:	c7 01       	movw	r24, r14
    1e64:	b6 01       	movw	r22, r12
    1e66:	0e 94 21 0a 	call	0x1442	; 0x1442 <_Z17getSetNextClustermhm>
    1e6a:	a6 2e       	mov	r10, r22
    1e6c:	b7 2e       	mov	r11, r23
    1e6e:	88 2e       	mov	r8, r24
    1e70:	99 2e       	mov	r9, r25
					getSetNextCluster (firstCluster, SET, 0);
    1e72:	00 e0       	ldi	r16, 0x00	; 0
    1e74:	10 e0       	ldi	r17, 0x00	; 0
    1e76:	98 01       	movw	r18, r16
    1e78:	41 e0       	ldi	r20, 0x01	; 1
    1e7a:	c7 01       	movw	r24, r14
    1e7c:	b6 01       	movw	r22, r12
    1e7e:	0e 94 21 0a 	call	0x1442	; 0x1442 <_Z17getSetNextClustermhm>
					if(nextCluster > 0x0ffffff6) 
					   {transmitString_F(PSTR("File deleted!"));return 0;}
					firstCluster = nextCluster;
    1e82:	ca 2c       	mov	r12, r10
    1e84:	db 2c       	mov	r13, r11
    1e86:	e8 2c       	mov	r14, r8
    1e88:	f9 2c       	mov	r15, r9
				 //mark all the clusters allocated to the file as 'free'
			     while(1)  
			     {
			        nextCluster = getSetNextCluster (firstCluster, GET, 0);
					getSetNextCluster (firstCluster, SET, 0);
					if(nextCluster > 0x0ffffff6) 
    1e8a:	b7 ef       	ldi	r27, 0xF7	; 247
    1e8c:	cb 16       	cp	r12, r27
    1e8e:	bf ef       	ldi	r27, 0xFF	; 255
    1e90:	db 06       	cpc	r13, r27
    1e92:	eb 06       	cpc	r14, r27
    1e94:	bf e0       	ldi	r27, 0x0F	; 15
    1e96:	fb 06       	cpc	r15, r27
    1e98:	00 f3       	brcs	.-64     	; 0x1e5a <_Z9findFileshPh+0x274>
					   {transmitString_F(PSTR("File deleted!"));return 0;}
    1e9a:	8a eb       	ldi	r24, 0xBA	; 186
    1e9c:	93 e0       	ldi	r25, 0x03	; 3
    1e9e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	93 c0       	rjmp	.+294    	; 0x1fce <_Z9findFileshPh+0x3e8>
			  }
            }
          }
          else  //when flag = GET_LIST
		  {
		     TX_NEWLINE;
    1ea8:	8d e0       	ldi	r24, 0x0D	; 13
    1eaa:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
    1eae:	8a e0       	ldi	r24, 0x0A	; 10
    1eb0:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
    1eb4:	3e 8a       	std	Y+22, r3	; 0x16
    1eb6:	2d 8a       	std	Y+21, r2	; 0x15
    1eb8:	1b 83       	std	Y+3, r17	; 0x03
    1eba:	0a 83       	std	Y+2, r16	; 0x02
    1ebc:	1c 2d       	mov	r17, r12
    1ebe:	06 c0       	rjmp	.+12     	; 0x1ecc <_Z9findFileshPh+0x2e6>
    1ec0:	1f 5f       	subi	r17, 0xFF	; 255
    1ec2:	ed 89       	ldd	r30, Y+21	; 0x15
    1ec4:	fe 89       	ldd	r31, Y+22	; 0x16
    1ec6:	31 96       	adiw	r30, 0x01	; 1
    1ec8:	fe 8b       	std	Y+22, r31	; 0x16
    1eca:	ed 8b       	std	Y+21, r30	; 0x15
    1ecc:	8d 89       	ldd	r24, Y+21	; 0x15
    1ece:	82 19       	sub	r24, r2
			 for(j=0; j<11; j++)
		     {
			   if(j == 8) transmitByte(' ');
    1ed0:	88 30       	cpi	r24, 0x08	; 8
    1ed2:	49 f4       	brne	.+18     	; 0x1ee6 <_Z9findFileshPh+0x300>
    1ed4:	80 e2       	ldi	r24, 0x20	; 32
    1ed6:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
			   transmitByte (dir->name[j]);
    1eda:	ad 89       	ldd	r26, Y+21	; 0x15
    1edc:	be 89       	ldd	r27, Y+22	; 0x16
    1ede:	8c 91       	ld	r24, X
    1ee0:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
    1ee4:	ed cf       	rjmp	.-38     	; 0x1ec0 <_Z9findFileshPh+0x2da>
    1ee6:	ed 89       	ldd	r30, Y+21	; 0x15
    1ee8:	fe 89       	ldd	r31, Y+22	; 0x16
    1eea:	80 81       	ld	r24, Z
    1eec:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
            }
          }
          else  //when flag = GET_LIST
		  {
		     TX_NEWLINE;
			 for(j=0; j<11; j++)
    1ef0:	1b 30       	cpi	r17, 0x0B	; 11
    1ef2:	30 f3       	brcs	.-52     	; 0x1ec0 <_Z9findFileshPh+0x2da>
    1ef4:	0a 81       	ldd	r16, Y+2	; 0x02
    1ef6:	1b 81       	ldd	r17, Y+3	; 0x03
		     {
			   if(j == 8) transmitByte(' ');
			   transmitByte (dir->name[j]);
			 }
		     transmitString_F (PSTR("   "));
    1ef8:	86 eb       	ldi	r24, 0xB6	; 182
    1efa:	93 e0       	ldi	r25, 0x03	; 3
    1efc:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
		     if((dir->attrib != 0x10) && (dir->attrib != 0x08))
    1f00:	d7 01       	movw	r26, r14
    1f02:	8c 91       	ld	r24, X
    1f04:	80 31       	cpi	r24, 0x10	; 16
    1f06:	99 f0       	breq	.+38     	; 0x1f2e <_Z9findFileshPh+0x348>
    1f08:	88 30       	cpi	r24, 0x08	; 8
    1f0a:	b9 f0       	breq	.+46     	; 0x1f3a <_Z9findFileshPh+0x354>
			 {
			     transmitString_F (PSTR("FILE" ));
    1f0c:	81 eb       	ldi	r24, 0xB1	; 177
    1f0e:	93 e0       	ldi	r25, 0x03	; 3
    1f10:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
		         transmitString_F (PSTR("   "));
    1f14:	8d ea       	ldi	r24, 0xAD	; 173
    1f16:	93 e0       	ldi	r25, 0x03	; 3
    1f18:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
			     displayMemory (LOW, dir->fileSize);
    1f1c:	f1 01       	movw	r30, r2
    1f1e:	44 8d       	ldd	r20, Z+28	; 0x1c
    1f20:	55 8d       	ldd	r21, Z+29	; 0x1d
    1f22:	66 8d       	ldd	r22, Z+30	; 0x1e
    1f24:	77 8d       	ldd	r23, Z+31	; 0x1f
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <_Z13displayMemoryhm>
    1f2c:	0d c0       	rjmp	.+26     	; 0x1f48 <_Z9findFileshPh+0x362>
			 }
			 else
			   transmitString_F ((dir->attrib == 0x10)? PSTR("DIR") : PSTR("ROOT"));
    1f2e:	29 ea       	ldi	r18, 0xA9	; 169
    1f30:	33 e0       	ldi	r19, 0x03	; 3
    1f32:	82 2f       	mov	r24, r18
    1f34:	d9 01       	movw	r26, r18
    1f36:	9b 2f       	mov	r25, r27
    1f38:	05 c0       	rjmp	.+10     	; 0x1f44 <_Z9findFileshPh+0x35e>
    1f3a:	e4 ea       	ldi	r30, 0xA4	; 164
    1f3c:	f3 e0       	ldi	r31, 0x03	; 3
    1f3e:	8e 2f       	mov	r24, r30
    1f40:	df 01       	movw	r26, r30
    1f42:	9b 2f       	mov	r25, r27
    1f44:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
    1f48:	b0 e2       	ldi	r27, 0x20	; 32
    1f4a:	6b 0e       	add	r6, r27
    1f4c:	71 1c       	adc	r7, r1
    1f4e:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <bytesPerSector>
    1f52:	90 91 fe 00 	lds	r25, 0x00FE	; 0x8000fe <bytesPerSector+0x1>
    1f56:	68 16       	cp	r6, r24
    1f58:	79 06       	cpc	r7, r25
    1f5a:	08 f4       	brcc	.+2      	; 0x1f5e <_Z9findFileshPh+0x378>
    1f5c:	ac ce       	rjmp	.-680    	; 0x1cb6 <_Z9findFileshPh+0xd0>

while(1)
{
   firstSector = getFirstSector (cluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    1f5e:	ef ef       	ldi	r30, 0xFF	; 255
    1f60:	8e 1a       	sub	r8, r30
    1f62:	9e 0a       	sbc	r9, r30
    1f64:	ae 0a       	sbc	r10, r30
    1f66:	be 0a       	sbc	r11, r30
    1f68:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <sectorPerCluster>
    1f6c:	90 91 fc 00 	lds	r25, 0x00FC	; 0x8000fc <sectorPerCluster+0x1>
    1f70:	a0 e0       	ldi	r26, 0x00	; 0
    1f72:	b0 e0       	ldi	r27, 0x00	; 0
    1f74:	88 16       	cp	r8, r24
    1f76:	99 06       	cpc	r9, r25
    1f78:	aa 06       	cpc	r10, r26
    1f7a:	bb 06       	cpc	r11, r27
    1f7c:	08 f4       	brcc	.+2      	; 0x1f80 <_Z9findFileshPh+0x39a>
    1f7e:	7e ce       	rjmp	.-772    	; 0x1c7c <_Z9findFileshPh+0x96>
		  }
       }
     }
   }

   cluster = (getSetNextCluster (cluster, GET, 0));
    1f80:	00 e0       	ldi	r16, 0x00	; 0
    1f82:	10 e0       	ldi	r17, 0x00	; 0
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	40 e0       	ldi	r20, 0x00	; 0
    1f8a:	69 89       	ldd	r22, Y+17	; 0x11
    1f8c:	7a 89       	ldd	r23, Y+18	; 0x12
    1f8e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f90:	9c 89       	ldd	r25, Y+20	; 0x14
    1f92:	0e 94 21 0a 	call	0x1442	; 0x1442 <_Z17getSetNextClustermhm>
    1f96:	69 8b       	std	Y+17, r22	; 0x11
    1f98:	7a 8b       	std	Y+18, r23	; 0x12
    1f9a:	8b 8b       	std	Y+19, r24	; 0x13
    1f9c:	9c 8b       	std	Y+20, r25	; 0x14

   if(cluster > 0x0ffffff6)
    1f9e:	67 3f       	cpi	r22, 0xF7	; 247
    1fa0:	ff ef       	ldi	r31, 0xFF	; 255
    1fa2:	7f 07       	cpc	r23, r31
    1fa4:	8f 07       	cpc	r24, r31
    1fa6:	ff e0       	ldi	r31, 0x0F	; 15
    1fa8:	9f 07       	cpc	r25, r31
    1faa:	78 f4       	brcc	.+30     	; 0x1fca <_Z9findFileshPh+0x3e4>
   	 return 0;
   if(cluster == 0) 
    1fac:	67 2b       	or	r22, r23
    1fae:	68 2b       	or	r22, r24
    1fb0:	69 2b       	or	r22, r25
    1fb2:	09 f0       	breq	.+2      	; 0x1fb6 <_Z9findFileshPh+0x3d0>
    1fb4:	49 ce       	rjmp	.-878    	; 0x1c48 <_Z9findFileshPh+0x62>
   {transmitString_F(PSTR("Error in getting cluster"));  return 0;}
    1fb6:	8b e8       	ldi	r24, 0x8B	; 139
    1fb8:	93 e0       	ldi	r25, 0x03	; 3
    1fba:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
    1fbe:	80 e0       	ldi	r24, 0x00	; 0
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	05 c0       	rjmp	.+10     	; 0x1fce <_Z9findFileshPh+0x3e8>

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
		{
		  if(flag == DELETE)
		      transmitString_F(PSTR("File does not exist!"));
		  return 0;   
    1fc4:	80 e0       	ldi	r24, 0x00	; 0
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	02 c0       	rjmp	.+4      	; 0x1fce <_Z9findFileshPh+0x3e8>
   }

   cluster = (getSetNextCluster (cluster, GET, 0));

   if(cluster > 0x0ffffff6)
   	 return 0;
    1fca:	80 e0       	ldi	r24, 0x00	; 0
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
   if(cluster == 0) 
   {transmitString_F(PSTR("Error in getting cluster"));  return 0;}
 }
return 0;
}
    1fce:	66 96       	adiw	r28, 0x16	; 22
    1fd0:	0f b6       	in	r0, 0x3f	; 63
    1fd2:	f8 94       	cli
    1fd4:	de bf       	out	0x3e, r29	; 62
    1fd6:	0f be       	out	0x3f, r0	; 63
    1fd8:	cd bf       	out	0x3d, r28	; 61
    1fda:	df 91       	pop	r29
    1fdc:	cf 91       	pop	r28
    1fde:	1f 91       	pop	r17
    1fe0:	0f 91       	pop	r16
    1fe2:	ff 90       	pop	r15
    1fe4:	ef 90       	pop	r14
    1fe6:	df 90       	pop	r13
    1fe8:	cf 90       	pop	r12
    1fea:	bf 90       	pop	r11
    1fec:	af 90       	pop	r10
    1fee:	9f 90       	pop	r9
    1ff0:	8f 90       	pop	r8
    1ff2:	7f 90       	pop	r7
    1ff4:	6f 90       	pop	r6
    1ff6:	5f 90       	pop	r5
    1ff8:	4f 90       	pop	r4
    1ffa:	3f 90       	pop	r3
    1ffc:	2f 90       	pop	r2
    1ffe:	08 95       	ret

00002000 <_Z8readFilehPh>:
//return: 0, if normal operation or flag is READ
//	      1, if file is already existing and flag = VERIFY; or if flag=READ and file does not exist
//		  2, if file name is incompatible
//***************************************************************************
unsigned char readFile (unsigned char flag, unsigned char *fileName)
{
    2000:	3f 92       	push	r3
    2002:	4f 92       	push	r4
    2004:	5f 92       	push	r5
    2006:	6f 92       	push	r6
    2008:	7f 92       	push	r7
    200a:	8f 92       	push	r8
    200c:	9f 92       	push	r9
    200e:	af 92       	push	r10
    2010:	bf 92       	push	r11
    2012:	cf 92       	push	r12
    2014:	df 92       	push	r13
    2016:	ef 92       	push	r14
    2018:	ff 92       	push	r15
    201a:	0f 93       	push	r16
    201c:	1f 93       	push	r17
    201e:	cf 93       	push	r28
    2020:	df 93       	push	r29
    2022:	cd b7       	in	r28, 0x3d	; 61
    2024:	de b7       	in	r29, 0x3e	; 62
    2026:	2c 97       	sbiw	r28, 0x0c	; 12
    2028:	0f b6       	in	r0, 0x3f	; 63
    202a:	f8 94       	cli
    202c:	de bf       	out	0x3e, r29	; 62
    202e:	0f be       	out	0x3f, r0	; 63
    2030:	cd bf       	out	0x3d, r28	; 61
    2032:	18 2f       	mov	r17, r24
    2034:	7b 01       	movw	r14, r22
struct dir_Structure *dir;
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
unsigned int k;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
    2036:	cb 01       	movw	r24, r22
    2038:	0e 94 ed 0b 	call	0x17da	; 0x17da <_Z15convertFileNamePh>
if(error) return 2;
    203c:	81 11       	cpse	r24, r1
    203e:	aa c0       	rjmp	.+340    	; 0x2194 <_Z8readFilehPh+0x194>

dir = findFiles (GET_FILE, fileName); //get the file location
    2040:	b7 01       	movw	r22, r14
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <_Z9findFileshPh>
if(dir == 0) 
    2048:	00 97       	sbiw	r24, 0x00	; 0
    204a:	31 f4       	brne	.+12     	; 0x2058 <_Z8readFilehPh+0x58>
{
  if(flag == READ) return (1);
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	11 23       	and	r17, r17
    2050:	09 f4       	brne	.+2      	; 0x2054 <_Z8readFilehPh+0x54>
    2052:	a5 c0       	rjmp	.+330    	; 0x219e <_Z8readFilehPh+0x19e>
    2054:	80 e0       	ldi	r24, 0x00	; 0
    2056:	a3 c0       	rjmp	.+326    	; 0x219e <_Z8readFilehPh+0x19e>
  else return (0);
}

if(flag == VERIFY) return (1);	//specified file name is already existing
    2058:	11 30       	cpi	r17, 0x01	; 1
    205a:	09 f4       	brne	.+2      	; 0x205e <_Z8readFilehPh+0x5e>
    205c:	9d c0       	rjmp	.+314    	; 0x2198 <_Z8readFilehPh+0x198>

cluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    205e:	dc 01       	movw	r26, r24
    2060:	54 96       	adiw	r26, 0x14	; 20
    2062:	4d 91       	ld	r20, X+
    2064:	5c 91       	ld	r21, X
    2066:	55 97       	sbiw	r26, 0x15	; 21
    2068:	60 e0       	ldi	r22, 0x00	; 0
    206a:	70 e0       	ldi	r23, 0x00	; 0
    206c:	ba 01       	movw	r22, r20
    206e:	55 27       	eor	r21, r21
    2070:	44 27       	eor	r20, r20
    2072:	5a 96       	adiw	r26, 0x1a	; 26
    2074:	cd 90       	ld	r12, X+
    2076:	dc 90       	ld	r13, X
    2078:	5b 97       	sbiw	r26, 0x1b	; 27
    207a:	e1 2c       	mov	r14, r1
    207c:	f1 2c       	mov	r15, r1
    207e:	8a 01       	movw	r16, r20
    2080:	9b 01       	movw	r18, r22
    2082:	0c 29       	or	r16, r12
    2084:	1d 29       	or	r17, r13
    2086:	2e 29       	or	r18, r14
    2088:	3f 29       	or	r19, r15
    208a:	09 87       	std	Y+9, r16	; 0x09
    208c:	1a 87       	std	Y+10, r17	; 0x0a
    208e:	2b 87       	std	Y+11, r18	; 0x0b
    2090:	3c 87       	std	Y+12, r19	; 0x0c

fileSize = dir->fileSize;
    2092:	5c 96       	adiw	r26, 0x1c	; 28
    2094:	8d 90       	ld	r8, X+
    2096:	9d 90       	ld	r9, X+
    2098:	ad 90       	ld	r10, X+
    209a:	bc 90       	ld	r11, X
    209c:	5f 97       	sbiw	r26, 0x1f	; 31

TX_NEWLINE;
    209e:	8d e0       	ldi	r24, 0x0D	; 13
    20a0:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
    20a4:	8a e0       	ldi	r24, 0x0A	; 10
    20a6:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
TX_NEWLINE;
    20aa:	8d e0       	ldi	r24, 0x0D	; 13
    20ac:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
    20b0:	8a e0       	ldi	r24, 0x0A	; 10
    20b2:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
//		  2, if file name is incompatible
//***************************************************************************
unsigned char readFile (unsigned char flag, unsigned char *fileName)
{
struct dir_Structure *dir;
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
    20b6:	19 82       	std	Y+1, r1	; 0x01
    20b8:	1a 82       	std	Y+2, r1	; 0x02
    20ba:	1b 82       	std	Y+3, r1	; 0x03
    20bc:	1c 82       	std	Y+4, r1	; 0x04

while(1)
{
  firstSector = getFirstSector (cluster);

  for(j=0; j<sectorPerCluster; j++)
    20be:	31 2c       	mov	r3, r1
TX_NEWLINE;
TX_NEWLINE;

while(1)
{
  firstSector = getFirstSector (cluster);
    20c0:	69 85       	ldd	r22, Y+9	; 0x09
    20c2:	7a 85       	ldd	r23, Y+10	; 0x0a
    20c4:	8b 85       	ldd	r24, Y+11	; 0x0b
    20c6:	9c 85       	ldd	r25, Y+12	; 0x0c
    20c8:	0e 94 00 0a 	call	0x1400	; 0x1400 <_Z14getFirstSectorm>
    20cc:	6d 83       	std	Y+5, r22	; 0x05
    20ce:	7e 83       	std	Y+6, r23	; 0x06
    20d0:	8f 83       	std	Y+7, r24	; 0x07
    20d2:	98 87       	std	Y+8, r25	; 0x08

  for(j=0; j<sectorPerCluster; j++)
    20d4:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <sectorPerCluster>
    20d8:	90 91 fc 00 	lds	r25, 0x00FC	; 0x8000fc <sectorPerCluster+0x1>
    20dc:	89 2b       	or	r24, r25
    20de:	09 f4       	brne	.+2      	; 0x20e2 <_Z8readFilehPh+0xe2>
    20e0:	40 c0       	rjmp	.+128    	; 0x2162 <_Z8readFilehPh+0x162>
    20e2:	13 2d       	mov	r17, r3
  {
    SD_readSingleBlock(firstSector + j);
    20e4:	6d 81       	ldd	r22, Y+5	; 0x05
    20e6:	7e 81       	ldd	r23, Y+6	; 0x06
    20e8:	8f 81       	ldd	r24, Y+7	; 0x07
    20ea:	98 85       	ldd	r25, Y+8	; 0x08
    20ec:	61 0f       	add	r22, r17
    20ee:	71 1d       	adc	r23, r1
    20f0:	81 1d       	adc	r24, r1
    20f2:	91 1d       	adc	r25, r1
    20f4:	0e 94 02 04 	call	0x804	; 0x804 <_Z18SD_readSingleBlockm>
    20f8:	49 80       	ldd	r4, Y+1	; 0x01
    20fa:	5a 80       	ldd	r5, Y+2	; 0x02
    20fc:	6b 80       	ldd	r6, Y+3	; 0x03
    20fe:	7c 80       	ldd	r7, Y+4	; 0x04
    2100:	22 e0       	ldi	r18, 0x02	; 2
    2102:	52 0e       	add	r5, r18
    2104:	61 1c       	adc	r6, r1
    2106:	71 1c       	adc	r7, r1
    2108:	c9 80       	ldd	r12, Y+1	; 0x01
    210a:	da 80       	ldd	r13, Y+2	; 0x02
    210c:	eb 80       	ldd	r14, Y+3	; 0x03
    210e:	fc 80       	ldd	r15, Y+4	; 0x04
    2110:	f6 01       	movw	r30, r12
    2112:	89 81       	ldd	r24, Y+1	; 0x01
    2114:	9a 81       	ldd	r25, Y+2	; 0x02
    2116:	e8 1b       	sub	r30, r24
    2118:	f9 0b       	sbc	r31, r25
    
	for(k=0; k<512; k++)
    {
      transmitByte(buffer[k]);
    211a:	e8 5c       	subi	r30, 0xC8	; 200
    211c:	fe 4f       	sbci	r31, 0xFE	; 254
    211e:	80 81       	ld	r24, Z
    2120:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
      if ((byteCounter++) >= fileSize ) return 0;
    2124:	d7 01       	movw	r26, r14
    2126:	c6 01       	movw	r24, r12
    2128:	01 96       	adiw	r24, 0x01	; 1
    212a:	a1 1d       	adc	r26, r1
    212c:	b1 1d       	adc	r27, r1
    212e:	c8 14       	cp	r12, r8
    2130:	d9 04       	cpc	r13, r9
    2132:	ea 04       	cpc	r14, r10
    2134:	fb 04       	cpc	r15, r11
    2136:	90 f5       	brcc	.+100    	; 0x219c <_Z8readFilehPh+0x19c>
    2138:	6c 01       	movw	r12, r24
    213a:	7d 01       	movw	r14, r26

  for(j=0; j<sectorPerCluster; j++)
  {
    SD_readSingleBlock(firstSector + j);
    
	for(k=0; k<512; k++)
    213c:	84 15       	cp	r24, r4
    213e:	95 05       	cpc	r25, r5
    2140:	a6 05       	cpc	r26, r6
    2142:	b7 05       	cpc	r27, r7
    2144:	29 f7       	brne	.-54     	; 0x2110 <_Z8readFilehPh+0x110>

while(1)
{
  firstSector = getFirstSector (cluster);

  for(j=0; j<sectorPerCluster; j++)
    2146:	1f 5f       	subi	r17, 0xFF	; 255
    2148:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <sectorPerCluster>
    214c:	90 91 fc 00 	lds	r25, 0x00FC	; 0x8000fc <sectorPerCluster+0x1>
    SD_readSingleBlock(firstSector + j);
    
	for(k=0; k<512; k++)
    {
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    2150:	49 82       	std	Y+1, r4	; 0x01
    2152:	5a 82       	std	Y+2, r5	; 0x02
    2154:	6b 82       	std	Y+3, r6	; 0x03
    2156:	7c 82       	std	Y+4, r7	; 0x04

while(1)
{
  firstSector = getFirstSector (cluster);

  for(j=0; j<sectorPerCluster; j++)
    2158:	21 2f       	mov	r18, r17
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	28 17       	cp	r18, r24
    215e:	39 07       	cpc	r19, r25
    2160:	08 f2       	brcs	.-126    	; 0x20e4 <_Z8readFilehPh+0xe4>
    {
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    }
  }
  cluster = getSetNextCluster (cluster, GET, 0);
    2162:	00 e0       	ldi	r16, 0x00	; 0
    2164:	10 e0       	ldi	r17, 0x00	; 0
    2166:	98 01       	movw	r18, r16
    2168:	43 2d       	mov	r20, r3
    216a:	69 85       	ldd	r22, Y+9	; 0x09
    216c:	7a 85       	ldd	r23, Y+10	; 0x0a
    216e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2170:	9c 85       	ldd	r25, Y+12	; 0x0c
    2172:	0e 94 21 0a 	call	0x1442	; 0x1442 <_Z17getSetNextClustermhm>
    2176:	69 87       	std	Y+9, r22	; 0x09
    2178:	7a 87       	std	Y+10, r23	; 0x0a
    217a:	8b 87       	std	Y+11, r24	; 0x0b
    217c:	9c 87       	std	Y+12, r25	; 0x0c
  if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return 0;}
    217e:	67 2b       	or	r22, r23
    2180:	68 2b       	or	r22, r24
    2182:	69 2b       	or	r22, r25
    2184:	09 f0       	breq	.+2      	; 0x2188 <_Z8readFilehPh+0x188>
    2186:	9c cf       	rjmp	.-200    	; 0x20c0 <_Z8readFilehPh+0xc0>
    2188:	82 e7       	ldi	r24, 0x72	; 114
    218a:	93 e0       	ldi	r25, 0x03	; 3
    218c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
    2190:	80 e0       	ldi	r24, 0x00	; 0
    2192:	05 c0       	rjmp	.+10     	; 0x219e <_Z8readFilehPh+0x19e>
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
unsigned int k;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
if(error) return 2;
    2194:	82 e0       	ldi	r24, 0x02	; 2
    2196:	03 c0       	rjmp	.+6      	; 0x219e <_Z8readFilehPh+0x19e>
{
  if(flag == READ) return (1);
  else return (0);
}

if(flag == VERIFY) return (1);	//specified file name is already existing
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	01 c0       	rjmp	.+2      	; 0x219e <_Z8readFilehPh+0x19e>
    SD_readSingleBlock(firstSector + j);
    
	for(k=0; k<512; k++)
    {
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    219c:	80 e0       	ldi	r24, 0x00	; 0
  }
  cluster = getSetNextCluster (cluster, GET, 0);
  if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return 0;}
}
return 0;
}
    219e:	2c 96       	adiw	r28, 0x0c	; 12
    21a0:	0f b6       	in	r0, 0x3f	; 63
    21a2:	f8 94       	cli
    21a4:	de bf       	out	0x3e, r29	; 62
    21a6:	0f be       	out	0x3f, r0	; 63
    21a8:	cd bf       	out	0x3d, r28	; 61
    21aa:	df 91       	pop	r29
    21ac:	cf 91       	pop	r28
    21ae:	1f 91       	pop	r17
    21b0:	0f 91       	pop	r16
    21b2:	ff 90       	pop	r15
    21b4:	ef 90       	pop	r14
    21b6:	df 90       	pop	r13
    21b8:	cf 90       	pop	r12
    21ba:	bf 90       	pop	r11
    21bc:	af 90       	pop	r10
    21be:	9f 90       	pop	r9
    21c0:	8f 90       	pop	r8
    21c2:	7f 90       	pop	r7
    21c4:	6f 90       	pop	r6
    21c6:	5f 90       	pop	r5
    21c8:	4f 90       	pop	r4
    21ca:	3f 90       	pop	r3
    21cc:	08 95       	ret

000021ce <_Z10deleteFilePh>:
//Function: to delete a specified file from the root directory
//Arguments: pointer to the file name
//return: none
//********************************************************************
void deleteFile (unsigned char *fileName)
{
    21ce:	cf 93       	push	r28
    21d0:	df 93       	push	r29
    21d2:	ec 01       	movw	r28, r24
  unsigned char error;

  error = convertFileName (fileName);
    21d4:	0e 94 ed 0b 	call	0x17da	; 0x17da <_Z15convertFileNamePh>
  if(error) return;
    21d8:	81 11       	cpse	r24, r1
    21da:	04 c0       	rjmp	.+8      	; 0x21e4 <_Z10deleteFilePh+0x16>

  findFiles (DELETE, fileName);
    21dc:	be 01       	movw	r22, r28
    21de:	82 e0       	ldi	r24, 0x02	; 2
    21e0:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <_Z9findFileshPh>
}
    21e4:	df 91       	pop	r29
    21e6:	cf 91       	pop	r28
    21e8:	08 95       	ret

000021ea <_Z9writeFilePh>:
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: none
//************************************************************************************
unsigned char writeFile (unsigned char *fileName)
{
    21ea:	2f 92       	push	r2
    21ec:	3f 92       	push	r3
    21ee:	4f 92       	push	r4
    21f0:	5f 92       	push	r5
    21f2:	6f 92       	push	r6
    21f4:	7f 92       	push	r7
    21f6:	8f 92       	push	r8
    21f8:	9f 92       	push	r9
    21fa:	af 92       	push	r10
    21fc:	bf 92       	push	r11
    21fe:	cf 92       	push	r12
    2200:	df 92       	push	r13
    2202:	ef 92       	push	r14
    2204:	ff 92       	push	r15
    2206:	0f 93       	push	r16
    2208:	1f 93       	push	r17
    220a:	cf 93       	push	r28
    220c:	df 93       	push	r29
    220e:	cd b7       	in	r28, 0x3d	; 61
    2210:	de b7       	in	r29, 0x3e	; 62
    2212:	2e 97       	sbiw	r28, 0x0e	; 14
    2214:	0f b6       	in	r0, 0x3f	; 63
    2216:	f8 94       	cli
    2218:	de bf       	out	0x3e, r29	; 62
    221a:	0f be       	out	0x3f, r0	; 63
    221c:	cd bf       	out	0x3d, r28	; 61
    221e:	9a 87       	std	Y+10, r25	; 0x0a
    2220:	89 87       	std	Y+9, r24	; 0x09
unsigned char j,k, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sector=0;
unsigned int i, firstClusterHigh=0, firstClusterLow=0;  //value 0 is assigned just to avoid warning in compilation
struct dir_Structure *dir;
unsigned long cluster, nextCluster, prevCluster, firstSector, clusterCount, extraMemory;

j = readFile (VERIFY, fileName);
    2222:	bc 01       	movw	r22, r24
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	0e 94 00 10 	call	0x2000	; 0x2000 <_Z8readFilehPh>

if(j == 1) 
    222a:	81 30       	cpi	r24, 0x01	; 1
    222c:	09 f0       	breq	.+2      	; 0x2230 <_Z9writeFilePh+0x46>
    222e:	53 c0       	rjmp	.+166    	; 0x22d6 <_Z9writeFilePh+0xec>
{
  //transmitString_F(PSTR(" File already exists, appending data..")); 
  appendFile = 1;
  cluster = appendStartCluster;
    2230:	c0 90 e5 00 	lds	r12, 0x00E5	; 0x8000e5 <appendStartCluster>
    2234:	d0 90 e6 00 	lds	r13, 0x00E6	; 0x8000e6 <appendStartCluster+0x1>
    2238:	e0 90 e7 00 	lds	r14, 0x00E7	; 0x8000e7 <appendStartCluster+0x2>
    223c:	f0 90 e8 00 	lds	r15, 0x00E8	; 0x8000e8 <appendStartCluster+0x3>
  clusterCount=0;
    2240:	81 2c       	mov	r8, r1
    2242:	91 2c       	mov	r9, r1
    2244:	54 01       	movw	r10, r8
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    2246:	00 e0       	ldi	r16, 0x00	; 0
    2248:	10 e0       	ldi	r17, 0x00	; 0
    224a:	98 01       	movw	r18, r16
    224c:	40 e0       	ldi	r20, 0x00	; 0
    224e:	c7 01       	movw	r24, r14
    2250:	b6 01       	movw	r22, r12
    2252:	0e 94 21 0a 	call	0x1442	; 0x1442 <_Z17getSetNextClustermhm>
    if(nextCluster == EOF) break;
    2256:	6f 3f       	cpi	r22, 0xFF	; 255
    2258:	2f ef       	ldi	r18, 0xFF	; 255
    225a:	72 07       	cpc	r23, r18
    225c:	82 07       	cpc	r24, r18
    225e:	2f e0       	ldi	r18, 0x0F	; 15
    2260:	92 07       	cpc	r25, r18
    2262:	41 f0       	breq	.+16     	; 0x2274 <_Z9writeFilePh+0x8a>
	cluster = nextCluster;
	clusterCount++;
    2264:	3f ef       	ldi	r19, 0xFF	; 255
    2266:	83 1a       	sub	r8, r19
    2268:	93 0a       	sbc	r9, r19
    226a:	a3 0a       	sbc	r10, r19
    226c:	b3 0a       	sbc	r11, r19
  clusterCount=0;
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    if(nextCluster == EOF) break;
	cluster = nextCluster;
    226e:	6b 01       	movw	r12, r22
    2270:	7c 01       	movw	r14, r24
struct dir_Structure *dir;
unsigned long cluster, nextCluster, prevCluster, firstSector, clusterCount, extraMemory;

j = readFile (VERIFY, fileName);

if(j == 1) 
    2272:	e9 cf       	rjmp	.-46     	; 0x2246 <_Z9writeFilePh+0x5c>
    if(nextCluster == EOF) break;
	cluster = nextCluster;
	clusterCount++;
  }

  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
    2274:	a0 91 fb 00 	lds	r26, 0x00FB	; 0x8000fb <sectorPerCluster>
    2278:	b0 91 fc 00 	lds	r27, 0x00FC	; 0x8000fc <sectorPerCluster+0x1>
    227c:	20 91 fd 00 	lds	r18, 0x00FD	; 0x8000fd <bytesPerSector>
    2280:	30 91 fe 00 	lds	r19, 0x00FE	; 0x8000fe <bytesPerSector+0x1>
    2284:	e0 91 fd 00 	lds	r30, 0x00FD	; 0x8000fd <bytesPerSector>
    2288:	f0 91 fe 00 	lds	r31, 0x00FE	; 0x8000fe <bytesPerSector+0x1>
    228c:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__umulhisi3>
    2290:	9b 01       	movw	r18, r22
    2292:	ac 01       	movw	r20, r24
    2294:	c5 01       	movw	r24, r10
    2296:	b4 01       	movw	r22, r8
    2298:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <__mulsi3>
    229c:	80 90 e9 00 	lds	r8, 0x00E9	; 0x8000e9 <fileSize>
    22a0:	90 90 ea 00 	lds	r9, 0x00EA	; 0x8000ea <fileSize+0x1>
    22a4:	a0 90 eb 00 	lds	r10, 0x00EB	; 0x8000eb <fileSize+0x2>
    22a8:	b0 90 ec 00 	lds	r11, 0x00EC	; 0x8000ec <fileSize+0x3>
    22ac:	a5 01       	movw	r20, r10
    22ae:	94 01       	movw	r18, r8
    22b0:	26 1b       	sub	r18, r22
    22b2:	37 0b       	sbc	r19, r23
    22b4:	48 0b       	sbc	r20, r24
    22b6:	59 0b       	sbc	r21, r25
    22b8:	ca 01       	movw	r24, r20
    22ba:	b9 01       	movw	r22, r18
    22bc:	9f 01       	movw	r18, r30
    22be:	40 e0       	ldi	r20, 0x00	; 0
    22c0:	50 e0       	ldi	r21, 0x00	; 0
    22c2:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <__udivmodsi4>
    22c6:	92 2f       	mov	r25, r18
//return: none
//************************************************************************************
unsigned char writeFile (unsigned char *fileName)
{
unsigned char j,k, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sector=0;
unsigned int i, firstClusterHigh=0, firstClusterLow=0;  //value 0 is assigned just to avoid warning in compilation
    22c8:	1d 86       	std	Y+13, r1	; 0x0d
    22ca:	1c 86       	std	Y+12, r1	; 0x0c
    22cc:	21 2c       	mov	r2, r1
    22ce:	31 2c       	mov	r3, r1
	cluster = nextCluster;
	clusterCount++;
  }

  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
  start = 1;
    22d0:	31 e0       	ldi	r19, 0x01	; 1
    22d2:	3b 87       	std	Y+11, r19	; 0x0b
    22d4:	48 c0       	rjmp	.+144    	; 0x2366 <_Z9writeFilePh+0x17c>
}
else if(j == 2) 
    22d6:	82 30       	cpi	r24, 0x02	; 2
    22d8:	09 f4       	brne	.+2      	; 0x22dc <_Z9writeFilePh+0xf2>
    22da:	c0 c2       	rjmp	.+1408   	; 0x285c <_Z9writeFilePh+0x672>
else
{
 // TX_NEWLINE;
 // transmitString_F(PSTR(" Creating File.."));

  cluster = getSetFreeCluster (NEXT_FREE, GET, 0);
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	a9 01       	movw	r20, r18
    22e2:	60 e0       	ldi	r22, 0x00	; 0
    22e4:	82 e0       	ldi	r24, 0x02	; 2
    22e6:	0e 94 9a 0a 	call	0x1534	; 0x1534 <_Z17getSetFreeClusterhhm>
  if(cluster > totalClusters)
    22ea:	c0 90 ff 00 	lds	r12, 0x00FF	; 0x8000ff <totalClusters>
    22ee:	d0 90 00 01 	lds	r13, 0x0100	; 0x800100 <totalClusters+0x1>
    22f2:	e0 90 01 01 	lds	r14, 0x0101	; 0x800101 <totalClusters+0x2>
    22f6:	f0 90 02 01 	lds	r15, 0x0102	; 0x800102 <totalClusters+0x3>
    22fa:	c6 16       	cp	r12, r22
    22fc:	d7 06       	cpc	r13, r23
    22fe:	e8 06       	cpc	r14, r24
    2300:	f9 06       	cpc	r15, r25
    2302:	40 f4       	brcc	.+16     	; 0x2314 <_Z9writeFilePh+0x12a>
     cluster = rootCluster;
    2304:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <rootCluster>
    2308:	70 91 04 01 	lds	r23, 0x0104	; 0x800104 <rootCluster+0x1>
    230c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <rootCluster+0x2>
    2310:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <rootCluster+0x3>

  cluster = searchNextFreeCluster(cluster);
    2314:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_Z21searchNextFreeClusterm>
    2318:	6b 01       	movw	r12, r22
    231a:	7c 01       	movw	r14, r24
   if(cluster == 0)
    231c:	61 15       	cp	r22, r1
    231e:	71 05       	cpc	r23, r1
    2320:	81 05       	cpc	r24, r1
    2322:	91 05       	cpc	r25, r1
    2324:	61 f4       	brne	.+24     	; 0x233e <_Z9writeFilePh+0x154>
   {
      TX_NEWLINE;
    2326:	8d e0       	ldi	r24, 0x0D	; 13
    2328:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
    232c:	8a e0       	ldi	r24, 0x0A	; 10
    232e:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
      transmitString_F(PSTR(" No free cluster!"));
    2332:	8d e4       	ldi	r24, 0x4D	; 77
    2334:	93 e0       	ldi	r25, 0x03	; 3
    2336:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
	  return 1;
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	98 c2       	rjmp	.+1328   	; 0x286e <_Z9writeFilePh+0x684>
   }
  getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    233e:	0f ef       	ldi	r16, 0xFF	; 255
    2340:	1f ef       	ldi	r17, 0xFF	; 255
    2342:	2f ef       	ldi	r18, 0xFF	; 255
    2344:	3f e0       	ldi	r19, 0x0F	; 15
    2346:	41 e0       	ldi	r20, 0x01	; 1
    2348:	0e 94 21 0a 	call	0x1442	; 0x1442 <_Z17getSetNextClustermhm>
   
  firstClusterHigh = (unsigned int) ((cluster & 0xffff0000) >> 16 );
    234c:	17 01       	movw	r2, r14
  firstClusterLow = (unsigned int) ( cluster & 0x0000ffff);
    234e:	dd 86       	std	Y+13, r13	; 0x0d
    2350:	cc 86       	std	Y+12, r12	; 0x0c
  fileSize = 0;
    2352:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <fileSize>
    2356:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <fileSize+0x1>
    235a:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <fileSize+0x2>
    235e:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <fileSize+0x3>
//Arguments: pointer to the file name
//return: none
//************************************************************************************
unsigned char writeFile (unsigned char *fileName)
{
unsigned char j,k, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sector=0;
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	1b 86       	std	Y+11, r1	; 0x0b
    2366:	8b 85       	ldd	r24, Y+11	; 0x0b
  firstClusterHigh = (unsigned int) ((cluster & 0xffff0000) >> 16 );
  firstClusterLow = (unsigned int) ( cluster & 0x0000ffff);
  fileSize = 0;
}

k=0;
    2368:	00 e0       	ldi	r16, 0x00	; 0
	  j = sector;
   }
   else
   {
      startBlock = getFirstSector (cluster);
	  i=0;
    236a:	81 2c       	mov	r8, r1
	  j=0;
    236c:	91 2c       	mov	r9, r1
while(1)
{
   if(start)
   {
      start = 0;
	  startBlock = getFirstSector (cluster) + sector;
    236e:	29 2f       	mov	r18, r25
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	40 e0       	ldi	r20, 0x00	; 0
    2374:	50 e0       	ldi	r21, 0x00	; 0
    2376:	29 83       	std	Y+1, r18	; 0x01
    2378:	3a 83       	std	Y+2, r19	; 0x02
    237a:	4b 83       	std	Y+3, r20	; 0x03
    237c:	5c 83       	std	Y+4, r21	; 0x04
	  SD_readSingleBlock (startBlock);
	  i = fileSize % bytesPerSector;
	  j = sector;
    237e:	9d 83       	std	Y+5, r25	; 0x05
     buffer[i++] = data;
	 fileSize++;
     
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
	 {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	   i=0;
    2380:	a8 2c       	mov	r10, r8
    2382:	b1 2c       	mov	r11, r1

k=0;

while(1)
{
   if(start)
    2384:	88 23       	and	r24, r24
    2386:	81 f1       	breq	.+96     	; 0x23e8 <_Z9writeFilePh+0x1fe>
   {
      start = 0;
	  startBlock = getFirstSector (cluster) + sector;
    2388:	c7 01       	movw	r24, r14
    238a:	b6 01       	movw	r22, r12
    238c:	0e 94 00 0a 	call	0x1400	; 0x1400 <_Z14getFirstSectorm>
    2390:	29 81       	ldd	r18, Y+1	; 0x01
    2392:	3a 81       	ldd	r19, Y+2	; 0x02
    2394:	4b 81       	ldd	r20, Y+3	; 0x03
    2396:	5c 81       	ldd	r21, Y+4	; 0x04
    2398:	26 0f       	add	r18, r22
    239a:	37 1f       	adc	r19, r23
    239c:	48 1f       	adc	r20, r24
    239e:	59 1f       	adc	r21, r25
    23a0:	20 93 3a 03 	sts	0x033A, r18	; 0x80033a <startBlock>
    23a4:	30 93 3b 03 	sts	0x033B, r19	; 0x80033b <startBlock+0x1>
    23a8:	40 93 3c 03 	sts	0x033C, r20	; 0x80033c <startBlock+0x2>
    23ac:	50 93 3d 03 	sts	0x033D, r21	; 0x80033d <startBlock+0x3>
	  SD_readSingleBlock (startBlock);
    23b0:	60 91 3a 03 	lds	r22, 0x033A	; 0x80033a <startBlock>
    23b4:	70 91 3b 03 	lds	r23, 0x033B	; 0x80033b <startBlock+0x1>
    23b8:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <startBlock+0x2>
    23bc:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <startBlock+0x3>
    23c0:	0e 94 02 04 	call	0x804	; 0x804 <_Z18SD_readSingleBlockm>
	  i = fileSize % bytesPerSector;
    23c4:	20 91 fd 00 	lds	r18, 0x00FD	; 0x8000fd <bytesPerSector>
    23c8:	30 91 fe 00 	lds	r19, 0x00FE	; 0x8000fe <bytesPerSector+0x1>
    23cc:	40 e0       	ldi	r20, 0x00	; 0
    23ce:	50 e0       	ldi	r21, 0x00	; 0
    23d0:	60 91 e9 00 	lds	r22, 0x00E9	; 0x8000e9 <fileSize>
    23d4:	70 91 ea 00 	lds	r23, 0x00EA	; 0x8000ea <fileSize+0x1>
    23d8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <fileSize+0x2>
    23dc:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <fileSize+0x3>
    23e0:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <__udivmodsi4>
	  j = sector;
    23e4:	1d 81       	ldd	r17, Y+5	; 0x05
    23e6:	0f c0       	rjmp	.+30     	; 0x2406 <_Z9writeFilePh+0x21c>
   }
   else
   {
      startBlock = getFirstSector (cluster);
    23e8:	c7 01       	movw	r24, r14
    23ea:	b6 01       	movw	r22, r12
    23ec:	0e 94 00 0a 	call	0x1400	; 0x1400 <_Z14getFirstSectorm>
    23f0:	60 93 3a 03 	sts	0x033A, r22	; 0x80033a <startBlock>
    23f4:	70 93 3b 03 	sts	0x033B, r23	; 0x80033b <startBlock+0x1>
    23f8:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <startBlock+0x2>
    23fc:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <startBlock+0x3>
	  i=0;
    2400:	68 2d       	mov	r22, r8
    2402:	70 e0       	ldi	r23, 0x00	; 0
	  j=0;
    2404:	19 2d       	mov	r17, r9
    2406:	e0 2f       	mov	r30, r16
   
   
   do
   {

	 data = dataString[k++];
    2408:	77 24       	eor	r7, r7
    240a:	73 94       	inc	r7
    240c:	7e 0e       	add	r7, r30
    240e:	f0 e0       	ldi	r31, 0x00	; 0
    2410:	e0 58       	subi	r30, 0x80	; 128
    2412:	ff 4f       	sbci	r31, 0xFF	; 255
    2414:	00 81       	ld	r16, Z
	 //transmitByte(data);
     buffer[i++] = data;
    2416:	cb 01       	movw	r24, r22
    2418:	01 96       	adiw	r24, 0x01	; 1
    241a:	fb 01       	movw	r30, r22
    241c:	e8 5c       	subi	r30, 0xC8	; 200
    241e:	fe 4f       	sbci	r31, 0xFE	; 254
    2420:	00 83       	st	Z, r16
	 fileSize++;
    2422:	40 91 e9 00 	lds	r20, 0x00E9	; 0x8000e9 <fileSize>
    2426:	50 91 ea 00 	lds	r21, 0x00EA	; 0x8000ea <fileSize+0x1>
    242a:	60 91 eb 00 	lds	r22, 0x00EB	; 0x8000eb <fileSize+0x2>
    242e:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <fileSize+0x3>
    2432:	4f 5f       	subi	r20, 0xFF	; 255
    2434:	5f 4f       	sbci	r21, 0xFF	; 255
    2436:	6f 4f       	sbci	r22, 0xFF	; 255
    2438:	7f 4f       	sbci	r23, 0xFF	; 255
    243a:	40 93 e9 00 	sts	0x00E9, r20	; 0x8000e9 <fileSize>
    243e:	50 93 ea 00 	sts	0x00EA, r21	; 0x8000ea <fileSize+0x1>
    2442:	60 93 eb 00 	sts	0x00EB, r22	; 0x8000eb <fileSize+0x2>
    2446:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <fileSize+0x3>
     
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
    244a:	81 15       	cp	r24, r1
    244c:	32 e0       	ldi	r19, 0x02	; 2
    244e:	93 07       	cpc	r25, r19
    2450:	50 f1       	brcs	.+84     	; 0x24a6 <_Z9writeFilePh+0x2bc>
	 {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	   i=0;
	   error = SD_writeSingleBlock (startBlock);
    2452:	60 91 3a 03 	lds	r22, 0x033A	; 0x80033a <startBlock>
    2456:	70 91 3b 03 	lds	r23, 0x033B	; 0x80033b <startBlock+0x1>
    245a:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <startBlock+0x2>
    245e:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <startBlock+0x3>
    2462:	0e 94 34 04 	call	0x868	; 0x868 <_Z19SD_writeSingleBlockm>
       j++;
    2466:	1f 5f       	subi	r17, 0xFF	; 255
	   if(j == sectorPerCluster) {j = 0; break;}
    2468:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <sectorPerCluster>
    246c:	90 91 fc 00 	lds	r25, 0x00FC	; 0x8000fc <sectorPerCluster+0x1>
    2470:	21 2f       	mov	r18, r17
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	28 17       	cp	r18, r24
    2476:	39 07       	cpc	r19, r25
    2478:	f9 f0       	breq	.+62     	; 0x24b8 <_Z9writeFilePh+0x2ce>
	   startBlock++; 
    247a:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <startBlock>
    247e:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <startBlock+0x1>
    2482:	a0 91 3c 03 	lds	r26, 0x033C	; 0x80033c <startBlock+0x2>
    2486:	b0 91 3d 03 	lds	r27, 0x033D	; 0x80033d <startBlock+0x3>
    248a:	01 96       	adiw	r24, 0x01	; 1
    248c:	a1 1d       	adc	r26, r1
    248e:	b1 1d       	adc	r27, r1
    2490:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <startBlock>
    2494:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <startBlock+0x1>
    2498:	a0 93 3c 03 	sts	0x033C, r26	; 0x80033c <startBlock+0x2>
    249c:	b0 93 3d 03 	sts	0x033D, r27	; 0x80033d <startBlock+0x3>
     buffer[i++] = data;
	 fileSize++;
     
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
	 {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	   i=0;
    24a0:	6a 2d       	mov	r22, r10
    24a2:	7b 2d       	mov	r23, r11
    24a4:	01 c0       	rjmp	.+2      	; 0x24a8 <_Z9writeFilePh+0x2be>
   do
   {

	 data = dataString[k++];
	 //transmitByte(data);
     buffer[i++] = data;
    24a6:	bc 01       	movw	r22, r24
	  i=0;
	  j=0;
   }
   
   
   do
    24a8:	0a 30       	cpi	r16, 0x0A	; 10
    24aa:	59 f0       	breq	.+22     	; 0x24c2 <_Z9writeFilePh+0x2d8>
   {

	 data = dataString[k++];
    24ac:	e7 2d       	mov	r30, r7
	   error = SD_writeSingleBlock (startBlock);
       j++;
	   if(j == sectorPerCluster) {j = 0; break;}
	   startBlock++; 
     }
   } while((data != '\n') && (k < MAX_STRING_SIZE)); //stop when newline character is found
    24ae:	e4 36       	cpi	r30, 0x64	; 100
    24b0:	08 f4       	brcc	.+2      	; 0x24b4 <_Z9writeFilePh+0x2ca>
    24b2:	aa cf       	rjmp	.-172    	; 0x2408 <_Z9writeFilePh+0x21e>
    24b4:	cb 01       	movw	r24, r22
    24b6:	06 c0       	rjmp	.+12     	; 0x24c4 <_Z9writeFilePh+0x2da>
    24b8:	7e 86       	std	Y+14, r7	; 0x0e
   
   
   do
   {

	 data = dataString[k++];
    24ba:	87 2d       	mov	r24, r7
	   startBlock++; 
     }
   } while((data != '\n') && (k < MAX_STRING_SIZE)); //stop when newline character is found
   													 //or when string size limit reached

   if((data == '\n') || (k >= MAX_STRING_SIZE))
    24bc:	0a 30       	cpi	r16, 0x0A	; 10
    24be:	39 f4       	brne	.+14     	; 0x24ce <_Z9writeFilePh+0x2e4>
    24c0:	d3 c1       	rjmp	.+934    	; 0x2868 <_Z9writeFilePh+0x67e>
    24c2:	cb 01       	movw	r24, r22
   {
      for(;i<512;i++)  //fill the rest of the buffer with 0x00
    24c4:	81 15       	cp	r24, r1
    24c6:	42 e0       	ldi	r20, 0x02	; 2
    24c8:	94 07       	cpc	r25, r20
    24ca:	20 f0       	brcs	.+8      	; 0x24d4 <_Z9writeFilePh+0x2ea>
    24cc:	0c c0       	rjmp	.+24     	; 0x24e6 <_Z9writeFilePh+0x2fc>
	   startBlock++; 
     }
   } while((data != '\n') && (k < MAX_STRING_SIZE)); //stop when newline character is found
   													 //or when string size limit reached

   if((data == '\n') || (k >= MAX_STRING_SIZE))
    24ce:	84 36       	cpi	r24, 0x64	; 100
    24d0:	f8 f0       	brcs	.+62     	; 0x2510 <_Z9writeFilePh+0x326>
    24d2:	ca c1       	rjmp	.+916    	; 0x2868 <_Z9writeFilePh+0x67e>
   {
      for(;i<512;i++)  //fill the rest of the buffer with 0x00
        buffer[i]= 0x00;
    24d4:	fc 01       	movw	r30, r24
    24d6:	e8 5c       	subi	r30, 0xC8	; 200
    24d8:	fe 4f       	sbci	r31, 0xFE	; 254
    24da:	10 82       	st	Z, r1
   } while((data != '\n') && (k < MAX_STRING_SIZE)); //stop when newline character is found
   													 //or when string size limit reached

   if((data == '\n') || (k >= MAX_STRING_SIZE))
   {
      for(;i<512;i++)  //fill the rest of the buffer with 0x00
    24dc:	01 96       	adiw	r24, 0x01	; 1
    24de:	81 15       	cp	r24, r1
    24e0:	52 e0       	ldi	r21, 0x02	; 2
    24e2:	95 07       	cpc	r25, r21
    24e4:	b8 f3       	brcs	.-18     	; 0x24d4 <_Z9writeFilePh+0x2ea>
        buffer[i]= 0x00;
   	  error = SD_writeSingleBlock (startBlock);
    24e6:	60 91 3a 03 	lds	r22, 0x033A	; 0x80033a <startBlock>
    24ea:	70 91 3b 03 	lds	r23, 0x033B	; 0x80033b <startBlock+0x1>
    24ee:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <startBlock+0x2>
    24f2:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <startBlock+0x3>
    24f6:	0e 94 34 04 	call	0x868	; 0x868 <_Z19SD_writeSingleBlockm>

   getSetNextCluster(prevCluster, SET, cluster);
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
}        

getSetFreeCluster (NEXT_FREE, SET, cluster); //update FSinfo next free cluster entry
    24fa:	a7 01       	movw	r20, r14
    24fc:	96 01       	movw	r18, r12
    24fe:	61 e0       	ldi	r22, 0x01	; 1
    2500:	82 e0       	ldi	r24, 0x02	; 2
    2502:	0e 94 9a 0a 	call	0x1534	; 0x1534 <_Z17getSetFreeClusterhhm>

error = getDateTime_FAT();    //get current date & time from the RTC
    2506:	0e 94 19 08 	call	0x1032	; 0x1032 <_Z15getDateTime_FATv>
if(error) { dateFAT = 0; timeFAT = 0;}
    250a:	81 11       	cpse	r24, r1
    250c:	2d c0       	rjmp	.+90     	; 0x2568 <_Z9writeFilePh+0x37e>
    250e:	34 c0       	rjmp	.+104    	; 0x2578 <_Z9writeFilePh+0x38e>
      break;
   } 
 
   prevCluster = cluster;

   cluster = searchNextFreeCluster(prevCluster); //look for a free cluster starting from the current cluster
    2510:	c7 01       	movw	r24, r14
    2512:	b6 01       	movw	r22, r12
    2514:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_Z21searchNextFreeClusterm>
    2518:	2b 01       	movw	r4, r22
    251a:	3c 01       	movw	r6, r24

   if(cluster == 0)
    251c:	61 15       	cp	r22, r1
    251e:	71 05       	cpc	r23, r1
    2520:	81 05       	cpc	r24, r1
    2522:	91 05       	cpc	r25, r1
    2524:	61 f4       	brne	.+24     	; 0x253e <_Z9writeFilePh+0x354>
   {
      TX_NEWLINE;
    2526:	8d e0       	ldi	r24, 0x0D	; 13
    2528:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
    252c:	8a e0       	ldi	r24, 0x0A	; 10
    252e:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
      transmitString_F(PSTR(" No free cluster!"));
    2532:	8b e3       	ldi	r24, 0x3B	; 59
    2534:	93 e0       	ldi	r25, 0x03	; 3
    2536:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
	  return 1;
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	98 c1       	rjmp	.+816    	; 0x286e <_Z9writeFilePh+0x684>
   }

   getSetNextCluster(prevCluster, SET, cluster);
    253e:	8b 01       	movw	r16, r22
    2540:	9c 01       	movw	r18, r24
    2542:	41 e0       	ldi	r20, 0x01	; 1
    2544:	c7 01       	movw	r24, r14
    2546:	b6 01       	movw	r22, r12
    2548:	0e 94 21 0a 	call	0x1442	; 0x1442 <_Z17getSetNextClustermhm>
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    254c:	0f ef       	ldi	r16, 0xFF	; 255
    254e:	1f ef       	ldi	r17, 0xFF	; 255
    2550:	2f ef       	ldi	r18, 0xFF	; 255
    2552:	3f e0       	ldi	r19, 0x0F	; 15
    2554:	41 e0       	ldi	r20, 0x01	; 1
    2556:	c3 01       	movw	r24, r6
    2558:	b2 01       	movw	r22, r4
    255a:	0e 94 21 0a 	call	0x1442	; 0x1442 <_Z17getSetNextClustermhm>
    255e:	89 2d       	mov	r24, r9
      break;
   } 
 
   prevCluster = cluster;

   cluster = searchNextFreeCluster(prevCluster); //look for a free cluster starting from the current cluster
    2560:	73 01       	movw	r14, r6
    2562:	62 01       	movw	r12, r4
   
   
   do
   {

	 data = dataString[k++];
    2564:	0e 85       	ldd	r16, Y+14	; 0x0e
   if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return 1;}
   
   prevCluster = cluster;
 }
 
 return 0;
    2566:	0e cf       	rjmp	.-484    	; 0x2384 <_Z9writeFilePh+0x19a>
}        

getSetFreeCluster (NEXT_FREE, SET, cluster); //update FSinfo next free cluster entry

error = getDateTime_FAT();    //get current date & time from the RTC
if(error) { dateFAT = 0; timeFAT = 0;}
    2568:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <dateFAT+0x1>
    256c:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <dateFAT>
    2570:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <timeFAT+0x1>
    2574:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <timeFAT>

if(appendFile)  //executes this loop if file is to be appended
    2578:	8b 85       	ldd	r24, Y+11	; 0x0b
    257a:	88 23       	and	r24, r24
    257c:	09 f4       	brne	.+2      	; 0x2580 <_Z9writeFilePh+0x396>
    257e:	45 c0       	rjmp	.+138    	; 0x260a <_Z9writeFilePh+0x420>
{
  SD_readSingleBlock (appendFileSector);    
    2580:	60 91 f1 00 	lds	r22, 0x00F1	; 0x8000f1 <appendFileSector>
    2584:	70 91 f2 00 	lds	r23, 0x00F2	; 0x8000f2 <appendFileSector+0x1>
    2588:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <appendFileSector+0x2>
    258c:	90 91 f4 00 	lds	r25, 0x00F4	; 0x8000f4 <appendFileSector+0x3>
    2590:	0e 94 02 04 	call	0x804	; 0x804 <_Z18SD_readSingleBlockm>
  dir = (struct dir_Structure *) &buffer[appendFileLocation]; 
    2594:	e0 91 ed 00 	lds	r30, 0x00ED	; 0x8000ed <appendFileLocation>
    2598:	f0 91 ee 00 	lds	r31, 0x00EE	; 0x8000ee <appendFileLocation+0x1>
    259c:	e8 5c       	subi	r30, 0xC8	; 200
    259e:	fe 4f       	sbci	r31, 0xFE	; 254

  dir->lastAccessDate = 0;   //date of last access ignored
    25a0:	13 8a       	std	Z+19, r1	; 0x13
    25a2:	12 8a       	std	Z+18, r1	; 0x12
  dir->writeTime = timeFAT;  //setting new time of last write, obtained from RTC
    25a4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <timeFAT>
    25a8:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <timeFAT+0x1>
    25ac:	97 8b       	std	Z+23, r25	; 0x17
    25ae:	86 8b       	std	Z+22, r24	; 0x16
  dir->writeDate = dateFAT;  //setting new date of last write, obtained from RTC
    25b0:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <dateFAT>
    25b4:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <dateFAT+0x1>
    25b8:	91 8f       	std	Z+25, r25	; 0x19
    25ba:	80 8f       	std	Z+24, r24	; 0x18
  extraMemory = fileSize - dir->fileSize;
    25bc:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <fileSize>
    25c0:	90 91 ea 00 	lds	r25, 0x00EA	; 0x8000ea <fileSize+0x1>
    25c4:	a0 91 eb 00 	lds	r26, 0x00EB	; 0x8000eb <fileSize+0x2>
    25c8:	b0 91 ec 00 	lds	r27, 0x00EC	; 0x8000ec <fileSize+0x3>
    25cc:	44 8d       	ldd	r20, Z+28	; 0x1c
    25ce:	55 8d       	ldd	r21, Z+29	; 0x1d
    25d0:	66 8d       	ldd	r22, Z+30	; 0x1e
    25d2:	77 8d       	ldd	r23, Z+31	; 0x1f
    25d4:	6c 01       	movw	r12, r24
    25d6:	7d 01       	movw	r14, r26
    25d8:	c4 1a       	sub	r12, r20
    25da:	d5 0a       	sbc	r13, r21
    25dc:	e6 0a       	sbc	r14, r22
    25de:	f7 0a       	sbc	r15, r23
  dir->fileSize = fileSize;
    25e0:	84 8f       	std	Z+28, r24	; 0x1c
    25e2:	95 8f       	std	Z+29, r25	; 0x1d
    25e4:	a6 8f       	std	Z+30, r26	; 0x1e
    25e6:	b7 8f       	std	Z+31, r27	; 0x1f
  SD_writeSingleBlock (appendFileSector);
    25e8:	60 91 f1 00 	lds	r22, 0x00F1	; 0x8000f1 <appendFileSector>
    25ec:	70 91 f2 00 	lds	r23, 0x00F2	; 0x8000f2 <appendFileSector+0x1>
    25f0:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <appendFileSector+0x2>
    25f4:	90 91 f4 00 	lds	r25, 0x00F4	; 0x8000f4 <appendFileSector+0x3>
    25f8:	0e 94 34 04 	call	0x868	; 0x868 <_Z19SD_writeSingleBlockm>
  freeMemoryUpdate (REMOVE, extraMemory); //updating free memory count in FSinfo sector;
    25fc:	b7 01       	movw	r22, r14
    25fe:	a6 01       	movw	r20, r12
    2600:	81 e0       	ldi	r24, 0x01	; 1
    2602:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <_Z16freeMemoryUpdatehm>

  
 // TX_NEWLINE;
 // transmitString_F(PSTR(" File appended!"));

  return 0;
    2606:	80 e0       	ldi	r24, 0x00	; 0
    2608:	32 c1       	rjmp	.+612    	; 0x286e <_Z9writeFilePh+0x684>
}

//executes following portion when new file is created

prevCluster = rootCluster; //root cluster
    260a:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <rootCluster>
    260e:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <rootCluster+0x1>
    2612:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <rootCluster+0x2>
    2616:	50 91 06 01 	lds	r21, 0x0106	; 0x800106 <rootCluster+0x3>
    261a:	29 83       	std	Y+1, r18	; 0x01
    261c:	3a 83       	std	Y+2, r19	; 0x02
    261e:	4b 83       	std	Y+3, r20	; 0x03
    2620:	5c 83       	std	Y+4, r21	; 0x04
//Arguments: pointer to the file name
//return: none
//************************************************************************************
unsigned char writeFile (unsigned char *fileName)
{
unsigned char j,k, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sector=0;
    2622:	81 2c       	mov	r8, r1
    2624:	49 84       	ldd	r4, Y+9	; 0x09
    2626:	5a 84       	ldd	r5, Y+10	; 0x0a
    2628:	3b e0       	ldi	r19, 0x0B	; 11
    262a:	43 0e       	add	r4, r19
    262c:	51 1c       	adc	r5, r1

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
  			dir->name[j] = fileName[j];
		  dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
    262e:	68 94       	set
    2630:	dd 24       	eor	r13, r13
    2632:	d5 f8       	bld	r13, 5
    2634:	c9 84       	ldd	r12, Y+9	; 0x09
    2636:	9a 84       	ldd	r9, Y+10	; 0x0a
    2638:	ac 84       	ldd	r10, Y+12	; 0x0c
    263a:	bd 84       	ldd	r11, Y+13	; 0x0d

prevCluster = rootCluster; //root cluster

while(1)
{
   firstSector = getFirstSector (prevCluster);
    263c:	69 81       	ldd	r22, Y+1	; 0x01
    263e:	7a 81       	ldd	r23, Y+2	; 0x02
    2640:	8b 81       	ldd	r24, Y+3	; 0x03
    2642:	9c 81       	ldd	r25, Y+4	; 0x04
    2644:	0e 94 00 0a 	call	0x1400	; 0x1400 <_Z14getFirstSectorm>
    2648:	6d 83       	std	Y+5, r22	; 0x05
    264a:	7e 83       	std	Y+6, r23	; 0x06
    264c:	8f 83       	std	Y+7, r24	; 0x07
    264e:	98 87       	std	Y+8, r25	; 0x08

   for(sector = 0; sector < sectorPerCluster; sector++)
    2650:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <sectorPerCluster>
    2654:	90 91 fc 00 	lds	r25, 0x00FC	; 0x8000fc <sectorPerCluster+0x1>
    2658:	89 2b       	or	r24, r25
    265a:	09 f4       	brne	.+2      	; 0x265e <_Z9writeFilePh+0x474>
    265c:	ab c0       	rjmp	.+342    	; 0x27b4 <_Z9writeFilePh+0x5ca>
    265e:	10 e0       	ldi	r17, 0x00	; 0
    2660:	08 2d       	mov	r16, r8
    2662:	5a 86       	std	Y+10, r5	; 0x0a
    2664:	49 86       	std	Y+9, r4	; 0x09
   {
     SD_readSingleBlock (firstSector + sector);
    2666:	4d 80       	ldd	r4, Y+5	; 0x05
    2668:	5e 80       	ldd	r5, Y+6	; 0x06
    266a:	6f 80       	ldd	r6, Y+7	; 0x07
    266c:	78 84       	ldd	r7, Y+8	; 0x08
    266e:	41 0e       	add	r4, r17
    2670:	51 1c       	adc	r5, r1
    2672:	61 1c       	adc	r6, r1
    2674:	71 1c       	adc	r7, r1
    2676:	c3 01       	movw	r24, r6
    2678:	b2 01       	movw	r22, r4
    267a:	0e 94 02 04 	call	0x804	; 0x804 <_Z18SD_readSingleBlockm>
	

     for(i=0; i<bytesPerSector; i+=32)
    267e:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <bytesPerSector>
    2682:	90 91 fe 00 	lds	r25, 0x00FE	; 0x8000fe <bytesPerSector+0x1>
    2686:	89 2b       	or	r24, r25
    2688:	09 f4       	brne	.+2      	; 0x268c <_Z9writeFilePh+0x4a2>
    268a:	86 c0       	rjmp	.+268    	; 0x2798 <_Z9writeFilePh+0x5ae>
     {
	    dir = (struct dir_Structure *) &buffer[i];

		if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
    268c:	01 11       	cpse	r16, r1
    268e:	e8 c0       	rjmp	.+464    	; 0x2860 <_Z9writeFilePh+0x676>
    2690:	88 e3       	ldi	r24, 0x38	; 56
    2692:	91 e0       	ldi	r25, 0x01	; 1
    2694:	e1 2c       	mov	r14, r1
    2696:	f1 2c       	mov	r15, r1
    2698:	fc 01       	movw	r30, r24
    269a:	29 85       	ldd	r18, Y+9	; 0x09
    269c:	3a 85       	ldd	r19, Y+10	; 0x0a
    269e:	01 c0       	rjmp	.+2      	; 0x26a2 <_Z9writeFilePh+0x4b8>
    26a0:	b0 96       	adiw	r30, 0x20	; 32
		   //dir->name[0] = EMPTY;
		   //SD_writeSingleBlock (firstSector + sector);
           return 0;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
    26a2:	80 81       	ld	r24, Z
    26a4:	88 23       	and	r24, r24
    26a6:	19 f0       	breq	.+6      	; 0x26ae <_Z9writeFilePh+0x4c4>
    26a8:	85 3e       	cpi	r24, 0xE5	; 229
    26aa:	09 f0       	breq	.+2      	; 0x26ae <_Z9writeFilePh+0x4c4>
    26ac:	68 c0       	rjmp	.+208    	; 0x277e <_Z9writeFilePh+0x594>
    26ae:	cf 01       	movw	r24, r30
    26b0:	3a 87       	std	Y+10, r19	; 0x0a
    26b2:	29 87       	std	Y+9, r18	; 0x09
    26b4:	ec 2d       	mov	r30, r12
    26b6:	f9 2d       	mov	r31, r9
    26b8:	dc 01       	movw	r26, r24
    26ba:	9c 01       	movw	r18, r24
    26bc:	49 85       	ldd	r20, Y+9	; 0x09
    26be:	5a 85       	ldd	r21, Y+10	; 0x0a
		{
		  for(j=0; j<11; j++)
  			dir->name[j] = fileName[j];
    26c0:	91 91       	ld	r25, Z+
    26c2:	9d 93       	st	X+, r25
           return 0;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
    26c4:	e4 17       	cp	r30, r20
    26c6:	f5 07       	cpc	r31, r21
    26c8:	d9 f7       	brne	.-10     	; 0x26c0 <_Z9writeFilePh+0x4d6>
    26ca:	c9 01       	movw	r24, r18
    26cc:	5a 87       	std	Y+10, r21	; 0x0a
    26ce:	49 87       	std	Y+9, r20	; 0x09
  			dir->name[j] = fileName[j];
		  dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
    26d0:	d9 01       	movw	r26, r18
    26d2:	1b 96       	adiw	r26, 0x0b	; 11
    26d4:	dc 92       	st	X, r13
    26d6:	1b 97       	sbiw	r26, 0x0b	; 11
		  dir->NTreserved = 0;			//always set to 0
    26d8:	1c 96       	adiw	r26, 0x0c	; 12
    26da:	1c 92       	st	X, r1
    26dc:	1c 97       	sbiw	r26, 0x0c	; 12
		  dir->timeTenth = 0;			//always set to 0
    26de:	1d 96       	adiw	r26, 0x0d	; 13
    26e0:	1c 92       	st	X, r1
    26e2:	1d 97       	sbiw	r26, 0x0d	; 13
		  dir->createTime = timeFAT; 	//setting time of file creation, obtained from RTC
    26e4:	40 91 20 01 	lds	r20, 0x0120	; 0x800120 <timeFAT>
    26e8:	50 91 21 01 	lds	r21, 0x0121	; 0x800121 <timeFAT+0x1>
    26ec:	1f 96       	adiw	r26, 0x0f	; 15
    26ee:	5c 93       	st	X, r21
    26f0:	4e 93       	st	-X, r20
    26f2:	1e 97       	sbiw	r26, 0x0e	; 14
		  dir->createDate = dateFAT; 	//setting date of file creation, obtained from RTC
    26f4:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <dateFAT>
    26f8:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <dateFAT+0x1>
    26fc:	51 96       	adiw	r26, 0x11	; 17
    26fe:	3c 93       	st	X, r19
    2700:	2e 93       	st	-X, r18
    2702:	50 97       	sbiw	r26, 0x10	; 16
		  dir->lastAccessDate = 0;   	//date of last access ignored
    2704:	53 96       	adiw	r26, 0x13	; 19
    2706:	1c 92       	st	X, r1
    2708:	1e 92       	st	-X, r1
    270a:	52 97       	sbiw	r26, 0x12	; 18
		  dir->writeTime = timeFAT;  	//setting new time of last write, obtained from RTC
    270c:	57 96       	adiw	r26, 0x17	; 23
    270e:	5c 93       	st	X, r21
    2710:	4e 93       	st	-X, r20
    2712:	56 97       	sbiw	r26, 0x16	; 22
		  dir->writeDate = dateFAT;  	//setting new date of last write, obtained from RTC
    2714:	59 96       	adiw	r26, 0x19	; 25
    2716:	3c 93       	st	X, r19
    2718:	2e 93       	st	-X, r18
    271a:	58 97       	sbiw	r26, 0x18	; 24
		  dir->firstClusterHI = firstClusterHigh;
    271c:	55 96       	adiw	r26, 0x15	; 21
    271e:	3c 92       	st	X, r3
    2720:	2e 92       	st	-X, r2
    2722:	54 97       	sbiw	r26, 0x14	; 20
		  dir->firstClusterLO = firstClusterLow;
    2724:	5b 96       	adiw	r26, 0x1b	; 27
    2726:	bc 92       	st	X, r11
    2728:	ae 92       	st	-X, r10
    272a:	5a 97       	sbiw	r26, 0x1a	; 26
		  dir->fileSize = fileSize;
    272c:	40 91 e9 00 	lds	r20, 0x00E9	; 0x8000e9 <fileSize>
    2730:	50 91 ea 00 	lds	r21, 0x00EA	; 0x8000ea <fileSize+0x1>
    2734:	60 91 eb 00 	lds	r22, 0x00EB	; 0x8000eb <fileSize+0x2>
    2738:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <fileSize+0x3>
    273c:	fc 01       	movw	r30, r24
    273e:	44 8f       	std	Z+28, r20	; 0x1c
    2740:	55 8f       	std	Z+29, r21	; 0x1d
    2742:	66 8f       	std	Z+30, r22	; 0x1e
    2744:	77 8f       	std	Z+31, r23	; 0x1f

		  SD_writeSingleBlock (firstSector + sector);
    2746:	c3 01       	movw	r24, r6
    2748:	b2 01       	movw	r22, r4
    274a:	0e 94 34 04 	call	0x868	; 0x868 <_Z19SD_writeSingleBlockm>

		  //TX_NEWLINE;
		  //TX_NEWLINE;
		  //transmitString_F(PSTR(" File Created! "));

		  freeMemoryUpdate (REMOVE, fileSize); //updating free memory count in FSinfo sector
    274e:	40 91 e9 00 	lds	r20, 0x00E9	; 0x8000e9 <fileSize>
    2752:	50 91 ea 00 	lds	r21, 0x00EA	; 0x8000ea <fileSize+0x1>
    2756:	60 91 eb 00 	lds	r22, 0x00EB	; 0x8000eb <fileSize+0x2>
    275a:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <fileSize+0x3>
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <_Z16freeMemoryUpdatehm>
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
    2764:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <bytesPerSector>
    2768:	90 91 fe 00 	lds	r25, 0x00FE	; 0x8000fe <bytesPerSector+0x1>
    276c:	f0 e2       	ldi	r31, 0x20	; 32
    276e:	ef 0e       	add	r14, r31
    2770:	f1 1c       	adc	r15, r1
    2772:	e8 16       	cp	r14, r24
    2774:	f9 06       	cpc	r15, r25
    2776:	08 f4       	brcc	.+2      	; 0x277a <_Z9writeFilePh+0x590>
    2778:	75 c0       	rjmp	.+234    	; 0x2864 <_Z9writeFilePh+0x67a>
		  dir->firstClusterHI = firstClusterHigh;
		  dir->firstClusterLO = firstClusterLow;
		  dir->fileSize = fileSize;

		  SD_writeSingleBlock (firstSector + sector);
		  fileCreatedFlag = 1;
    277a:	01 e0       	ldi	r16, 0x01	; 1
    277c:	0d c0       	rjmp	.+26     	; 0x2798 <_Z9writeFilePh+0x5ae>
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
    277e:	40 e2       	ldi	r20, 0x20	; 32
    2780:	e4 0e       	add	r14, r20
    2782:	f1 1c       	adc	r15, r1
    2784:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <bytesPerSector>
    2788:	90 91 fe 00 	lds	r25, 0x00FE	; 0x8000fe <bytesPerSector+0x1>
    278c:	e8 16       	cp	r14, r24
    278e:	f9 06       	cpc	r15, r25
    2790:	08 f4       	brcc	.+2      	; 0x2794 <_Z9writeFilePh+0x5aa>
    2792:	86 cf       	rjmp	.-244    	; 0x26a0 <_Z9writeFilePh+0x4b6>
    2794:	3a 87       	std	Y+10, r19	; 0x0a
    2796:	29 87       	std	Y+9, r18	; 0x09

while(1)
{
   firstSector = getFirstSector (prevCluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    2798:	1f 5f       	subi	r17, 0xFF	; 255
    279a:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <sectorPerCluster>
    279e:	90 91 fc 00 	lds	r25, 0x00FC	; 0x8000fc <sectorPerCluster+0x1>
    27a2:	21 2f       	mov	r18, r17
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	28 17       	cp	r18, r24
    27a8:	39 07       	cpc	r19, r25
    27aa:	08 f4       	brcc	.+2      	; 0x27ae <_Z9writeFilePh+0x5c4>
    27ac:	5c cf       	rjmp	.-328    	; 0x2666 <_Z9writeFilePh+0x47c>
    27ae:	80 2e       	mov	r8, r16
    27b0:	49 84       	ldd	r4, Y+9	; 0x09
    27b2:	5a 84       	ldd	r5, Y+10	; 0x0a
	     
        }
     }
   }

   cluster = getSetNextCluster (prevCluster, GET, 0);
    27b4:	00 e0       	ldi	r16, 0x00	; 0
    27b6:	10 e0       	ldi	r17, 0x00	; 0
    27b8:	98 01       	movw	r18, r16
    27ba:	40 e0       	ldi	r20, 0x00	; 0
    27bc:	69 81       	ldd	r22, Y+1	; 0x01
    27be:	7a 81       	ldd	r23, Y+2	; 0x02
    27c0:	8b 81       	ldd	r24, Y+3	; 0x03
    27c2:	9c 81       	ldd	r25, Y+4	; 0x04
    27c4:	0e 94 21 0a 	call	0x1442	; 0x1442 <_Z17getSetNextClustermhm>

   if(cluster > 0x0ffffff6)
    27c8:	67 3f       	cpi	r22, 0xF7	; 247
    27ca:	5f ef       	ldi	r21, 0xFF	; 255
    27cc:	75 07       	cpc	r23, r21
    27ce:	85 07       	cpc	r24, r21
    27d0:	5f e0       	ldi	r21, 0x0F	; 15
    27d2:	95 07       	cpc	r25, r21
    27d4:	80 f1       	brcs	.+96     	; 0x2836 <_Z9writeFilePh+0x64c>
   {
      if(cluster == EOF)   //this situation will come when total files in root is multiple of (32*sectorPerCluster)
    27d6:	6f 3f       	cpi	r22, 0xFF	; 255
    27d8:	7f 4f       	sbci	r23, 0xFF	; 255
    27da:	8f 4f       	sbci	r24, 0xFF	; 255
    27dc:	9f 40       	sbci	r25, 0x0F	; 15
    27de:	29 f5       	brne	.+74     	; 0x282a <_Z9writeFilePh+0x640>
	  {  
		cluster = searchNextFreeCluster(prevCluster); //find next cluster for root directory entries
    27e0:	69 81       	ldd	r22, Y+1	; 0x01
    27e2:	7a 81       	ldd	r23, Y+2	; 0x02
    27e4:	8b 81       	ldd	r24, Y+3	; 0x03
    27e6:	9c 81       	ldd	r25, Y+4	; 0x04
    27e8:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_Z21searchNextFreeClusterm>
    27ec:	66 2e       	mov	r6, r22
    27ee:	77 2e       	mov	r7, r23
    27f0:	e8 2e       	mov	r14, r24
    27f2:	f9 2e       	mov	r15, r25
		getSetNextCluster(prevCluster, SET, cluster); //link the new cluster of root to the previous cluster
    27f4:	06 2f       	mov	r16, r22
    27f6:	17 2f       	mov	r17, r23
    27f8:	28 2f       	mov	r18, r24
    27fa:	39 2f       	mov	r19, r25
    27fc:	41 e0       	ldi	r20, 0x01	; 1
    27fe:	69 81       	ldd	r22, Y+1	; 0x01
    2800:	7a 81       	ldd	r23, Y+2	; 0x02
    2802:	8b 81       	ldd	r24, Y+3	; 0x03
    2804:	9c 81       	ldd	r25, Y+4	; 0x04
    2806:	0e 94 21 0a 	call	0x1442	; 0x1442 <_Z17getSetNextClustermhm>
		getSetNextCluster(cluster, SET, EOF);  //set the new cluster as end of the root directory
    280a:	0f ef       	ldi	r16, 0xFF	; 255
    280c:	1f ef       	ldi	r17, 0xFF	; 255
    280e:	2f ef       	ldi	r18, 0xFF	; 255
    2810:	3f e0       	ldi	r19, 0x0F	; 15
    2812:	41 e0       	ldi	r20, 0x01	; 1
    2814:	66 2d       	mov	r22, r6
    2816:	77 2d       	mov	r23, r7
    2818:	8e 2d       	mov	r24, r14
    281a:	9f 2d       	mov	r25, r15
    281c:	0e 94 21 0a 	call	0x1442	; 0x1442 <_Z17getSetNextClustermhm>

   if(cluster > 0x0ffffff6)
   {
      if(cluster == EOF)   //this situation will come when total files in root is multiple of (32*sectorPerCluster)
	  {  
		cluster = searchNextFreeCluster(prevCluster); //find next cluster for root directory entries
    2820:	69 82       	std	Y+1, r6	; 0x01
    2822:	7a 82       	std	Y+2, r7	; 0x02
    2824:	eb 82       	std	Y+3, r14	; 0x03
    2826:	fc 82       	std	Y+4, r15	; 0x04
    2828:	0a c0       	rjmp	.+20     	; 0x283e <_Z9writeFilePh+0x654>
		getSetNextCluster(cluster, SET, EOF);  //set the new cluster as end of the root directory
      } 

      else
      {	
	    transmitString_F(PSTR("End of Cluster Chain")); 
    282a:	86 e2       	ldi	r24, 0x26	; 38
    282c:	93 e0       	ldi	r25, 0x03	; 3
    282e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
	    return 1;
    2832:	81 e0       	ldi	r24, 0x01	; 1
    2834:	1c c0       	rjmp	.+56     	; 0x286e <_Z9writeFilePh+0x684>
	     
        }
     }
   }

   cluster = getSetNextCluster (prevCluster, GET, 0);
    2836:	69 83       	std	Y+1, r22	; 0x01
    2838:	7a 83       	std	Y+2, r23	; 0x02
    283a:	8b 83       	std	Y+3, r24	; 0x03
    283c:	9c 83       	std	Y+4, r25	; 0x04
      {	
	    transmitString_F(PSTR("End of Cluster Chain")); 
	    return 1;
      }
   }
   if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return 1;}
    283e:	29 81       	ldd	r18, Y+1	; 0x01
    2840:	3a 81       	ldd	r19, Y+2	; 0x02
    2842:	4b 81       	ldd	r20, Y+3	; 0x03
    2844:	5c 81       	ldd	r21, Y+4	; 0x04
    2846:	23 2b       	or	r18, r19
    2848:	24 2b       	or	r18, r20
    284a:	25 2b       	or	r18, r21
    284c:	09 f0       	breq	.+2      	; 0x2850 <_Z9writeFilePh+0x666>
    284e:	f6 ce       	rjmp	.-532    	; 0x263c <_Z9writeFilePh+0x452>
    2850:	8d e0       	ldi	r24, 0x0D	; 13
    2852:	93 e0       	ldi	r25, 0x03	; 3
    2854:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
    2858:	81 e0       	ldi	r24, 0x01	; 1
    285a:	09 c0       	rjmp	.+18     	; 0x286e <_Z9writeFilePh+0x684>

  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
  start = 1;
}
else if(j == 2) 
   return 1; //invalid file name
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	07 c0       	rjmp	.+14     	; 0x286e <_Z9writeFilePh+0x684>

		if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
		 { 					  //indicating end of the directory file list
		   //dir->name[0] = EMPTY;
		   //SD_writeSingleBlock (firstSector + sector);
           return 0;
    2860:	80 e0       	ldi	r24, 0x00	; 0
    2862:	05 c0       	rjmp	.+10     	; 0x286e <_Z9writeFilePh+0x684>
    2864:	80 e0       	ldi	r24, 0x00	; 0
    2866:	03 c0       	rjmp	.+6      	; 0x286e <_Z9writeFilePh+0x684>
   
   
   do
   {

	 data = dataString[k++];
    2868:	80 e0       	ldi	r24, 0x00	; 0
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	33 ce       	rjmp	.-922    	; 0x24d4 <_Z9writeFilePh+0x2ea>
   
   prevCluster = cluster;
 }
 
 return 0;
}
    286e:	2e 96       	adiw	r28, 0x0e	; 14
    2870:	0f b6       	in	r0, 0x3f	; 63
    2872:	f8 94       	cli
    2874:	de bf       	out	0x3e, r29	; 62
    2876:	0f be       	out	0x3f, r0	; 63
    2878:	cd bf       	out	0x3d, r28	; 61
    287a:	df 91       	pop	r29
    287c:	cf 91       	pop	r28
    287e:	1f 91       	pop	r17
    2880:	0f 91       	pop	r16
    2882:	ff 90       	pop	r15
    2884:	ef 90       	pop	r14
    2886:	df 90       	pop	r13
    2888:	cf 90       	pop	r12
    288a:	bf 90       	pop	r11
    288c:	af 90       	pop	r10
    288e:	9f 90       	pop	r9
    2890:	8f 90       	pop	r8
    2892:	7f 90       	pop	r7
    2894:	6f 90       	pop	r6
    2896:	5f 90       	pop	r5
    2898:	4f 90       	pop	r4
    289a:	3f 90       	pop	r3
    289c:	2f 90       	pop	r2
    289e:	08 95       	ret

000028a0 <_Z9port_initv>:
#define RED_LED_OFF		PORTC &= ~0x40


void port_init(void)
{
  PORTA = 0x00;
    28a0:	1b ba       	out	0x1b, r1	; 27
  DDRA  = 0x00;
    28a2:	1a ba       	out	0x1a, r1	; 26
  PORTB = 0x00; //pull-up on for pushbutton
    28a4:	18 ba       	out	0x18, r1	; 24
  DDRB  = 0xBF; //MISO line i/p, rest o/p
    28a6:	8f eb       	ldi	r24, 0xBF	; 191
    28a8:	87 bb       	out	0x17, r24	; 23
  PORTC = 0x80; //pull-up for push-button
    28aa:	80 e8       	ldi	r24, 0x80	; 128
    28ac:	85 bb       	out	0x15, r24	; 21
  DDRC  = 0x60; //PC7- i/p (pushbutton), PC6, PC5 - o/p (two LEDs)
    28ae:	80 e6       	ldi	r24, 0x60	; 96
    28b0:	84 bb       	out	0x14, r24	; 20
  PORTD = 0x00;
    28b2:	12 ba       	out	0x12, r1	; 18
  DDRD  = 0x00;
    28b4:	11 ba       	out	0x11, r1	; 17
    28b6:	08 95       	ret

000028b8 <_Z12init_devicesv>:


//call this routine to initialize all peripherals
void init_devices(void)
{
  cli();  //all interrupts disabled
    28b8:	f8 94       	cli
  port_init();
    28ba:	0e 94 50 14 	call	0x28a0	; 0x28a0 <_Z9port_initv>
  spi_init();
    28be:	0e 94 b0 02 	call	0x560	; 0x560 <_Z8spi_initv>
  twi_init();
    28c2:	0e 94 7e 04 	call	0x8fc	; 0x8fc <_Z8twi_initv>
  uart0_init();
    28c6:	0e 94 bf 02 	call	0x57e	; 0x57e <_Z10uart0_initv>
  ADC_init();
    28ca:	0e 94 97 08 	call	0x112e	; 0x112e <_Z8ADC_initv>

  MCUCR = 0x00;
    28ce:	15 be       	out	0x35, r1	; 53
  GICR  = 0x00;
    28d0:	1b be       	out	0x3b, r1	; 59
  TIMSK = 0x00; //timer interrupt sources
    28d2:	19 be       	out	0x39, r1	; 57
    28d4:	08 95       	ret

000028d6 <_Z11blinkRedLEDv>:
//function to blink LED in case of any error
void blinkRedLED(void)
{
  while(1)  //blink red LED continuously, if error
  {
    RED_LED_ON;
    28d6:	ae 9a       	sbi	0x15, 6	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    28d8:	2f ef       	ldi	r18, 0xFF	; 255
    28da:	83 ec       	ldi	r24, 0xC3	; 195
    28dc:	99 e0       	ldi	r25, 0x09	; 9
    28de:	21 50       	subi	r18, 0x01	; 1
    28e0:	80 40       	sbci	r24, 0x00	; 0
    28e2:	90 40       	sbci	r25, 0x00	; 0
    28e4:	e1 f7       	brne	.-8      	; 0x28de <_Z11blinkRedLEDv+0x8>
    28e6:	00 c0       	rjmp	.+0      	; 0x28e8 <_Z11blinkRedLEDv+0x12>
    28e8:	00 00       	nop
	_delay_ms(400);
	RED_LED_OFF;
    28ea:	ae 98       	cbi	0x15, 6	; 21
    28ec:	2f ef       	ldi	r18, 0xFF	; 255
    28ee:	83 ec       	ldi	r24, 0xC3	; 195
    28f0:	99 e0       	ldi	r25, 0x09	; 9
    28f2:	21 50       	subi	r18, 0x01	; 1
    28f4:	80 40       	sbci	r24, 0x00	; 0
    28f6:	90 40       	sbci	r25, 0x00	; 0
    28f8:	e1 f7       	brne	.-8      	; 0x28f2 <_Z11blinkRedLEDv+0x1c>
    28fa:	00 c0       	rjmp	.+0      	; 0x28fc <_Z11blinkRedLEDv+0x26>
    28fc:	00 00       	nop
    28fe:	eb cf       	rjmp	.-42     	; 0x28d6 <_Z11blinkRedLEDv>

00002900 <main>:
}



int main(void)
{
    2900:	cf 93       	push	r28
    2902:	df 93       	push	r29
    2904:	cd b7       	in	r28, 0x3d	; 61
    2906:	de b7       	in	r29, 0x3e	; 62
    2908:	2d 97       	sbiw	r28, 0x0d	; 13
    290a:	0f b6       	in	r0, 0x3f	; 63
    290c:	f8 94       	cli
    290e:	de bf       	out	0x3e, r29	; 62
    2910:	0f be       	out	0x3f, r0	; 63
    2912:	cd bf       	out	0x3d, r28	; 61
    2914:	2f ef       	ldi	r18, 0xFF	; 255
    2916:	30 e7       	ldi	r19, 0x70	; 112
    2918:	42 e0       	ldi	r20, 0x02	; 2
    291a:	21 50       	subi	r18, 0x01	; 1
    291c:	30 40       	sbci	r19, 0x00	; 0
    291e:	40 40       	sbci	r20, 0x00	; 0
    2920:	e1 f7       	brne	.-8      	; 0x291a <main+0x1a>
    2922:	00 c0       	rjmp	.+0      	; 0x2924 <main+0x24>
    2924:	00 00       	nop
  unsigned char fileName[13];
  unsigned int delay, k;

  _delay_ms(100);  //delay for VCC stabilization

  init_devices();
    2926:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <_Z12init_devicesv>

  GREEN_LED_ON;  //turn on green LED to indicate power on
    292a:	ad 9a       	sbi	0x15, 5	; 21
  RED_LED_OFF; 	 //keep red LED off for now
    292c:	ae 98       	cbi	0x15, 6	; 21


  transmitString_F(PSTR("\n\r\n\r****************************************************"));
    292e:	84 ed       	ldi	r24, 0xD4	; 212
    2930:	92 e0       	ldi	r25, 0x02	; 2
    2932:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
  transmitString_F(PSTR("\n\r         microSD Datalogger - Emancipator "));
    2936:	87 ea       	ldi	r24, 0xA7	; 167
    2938:	92 e0       	ldi	r25, 0x02	; 2
    293a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
  transmitString_F(PSTR("\n\r****************************************************\n\r"));
    293e:	8e e6       	ldi	r24, 0x6E	; 110
    2940:	92 e0       	ldi	r25, 0x02	; 2
    2942:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>

  cardType = 0;
    2946:	10 92 38 03 	sts	0x0338, r1	; 0x800338 <cardType>
    294a:	1a e0       	ldi	r17, 0x0A	; 10

  for (i=0; i<10; i++)
  {
  	error = SD_init();
    294c:	0e 94 5d 03 	call	0x6ba	; 0x6ba <_Z7SD_initv>
  	if(!error) break;
    2950:	88 23       	and	r24, r24
    2952:	09 f4       	brne	.+2      	; 0x2956 <main+0x56>
    2954:	b0 c1       	rjmp	.+864    	; 0x2cb6 <main+0x3b6>
    2956:	11 50       	subi	r17, 0x01	; 1
  transmitString_F(PSTR("\n\r         microSD Datalogger - Emancipator "));
  transmitString_F(PSTR("\n\r****************************************************\n\r"));

  cardType = 0;

  for (i=0; i<10; i++)
    2958:	c9 f7       	brne	.-14     	; 0x294c <main+0x4c>
    295a:	b9 c1       	rjmp	.+882    	; 0x2cce <main+0x3ce>
  	if(!error) break;
  }

  if(error)
  {
  	if(error == 1) transmitString_F(PSTR("SD card not detected.."));
    295c:	87 e5       	ldi	r24, 0x57	; 87
    295e:	92 e0       	ldi	r25, 0x02	; 2
    2960:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
    2964:	06 c0       	rjmp	.+12     	; 0x2972 <main+0x72>
  	if(error == 2) transmitString_F(PSTR("Card Initialization failed.."));
    2966:	82 30       	cpi	r24, 0x02	; 2
    2968:	21 f4       	brne	.+8      	; 0x2972 <main+0x72>
    296a:	8a e3       	ldi	r24, 0x3A	; 58
    296c:	92 e0       	ldi	r25, 0x02	; 2
    296e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
  
  	blinkRedLED();
    2972:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <_Z11blinkRedLEDv>
  }

  switch (cardType)
  {
  	case 1:transmitString_F(PSTR("Standard Capacity Card (Ver 1.x) Detected!"));
    2976:	8f e0       	ldi	r24, 0x0F	; 15
    2978:	92 e0       	ldi	r25, 0x02	; 2
    297a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
  		   break;
    297e:	0e c0       	rjmp	.+28     	; 0x299c <main+0x9c>
  	case 2:transmitString_F(PSTR("High Capacity Card Detected!"));
    2980:	82 ef       	ldi	r24, 0xF2	; 242
    2982:	91 e0       	ldi	r25, 0x01	; 1
    2984:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
  		   break;
    2988:	09 c0       	rjmp	.+18     	; 0x299c <main+0x9c>
  	case 3:transmitString_F(PSTR("Standard Capacity Card (Ver 2.x) Detected!"));
    298a:	87 ec       	ldi	r24, 0xC7	; 199
    298c:	91 e0       	ldi	r25, 0x01	; 1
    298e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
  		   break;
    2992:	04 c0       	rjmp	.+8      	; 0x299c <main+0x9c>
  	default:transmitString_F(PSTR("Unknown SD Card Detected!"));
    2994:	8d ea       	ldi	r24, 0xAD	; 173
    2996:	91 e0       	ldi	r25, 0x01	; 1
    2998:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
  		   break; 
  }

  error = getBootSectorData (); //read boot sector and keep necessary data in global variables
    299c:	0e 94 2c 0b 	call	0x1658	; 0x1658 <_Z17getBootSectorDatav>
  if(error) 
    29a0:	88 23       	and	r24, r24
    29a2:	31 f0       	breq	.+12     	; 0x29b0 <main+0xb0>
  {
   	transmitString_F (PSTR("\n\rFAT32 not found!"));  //FAT32 incompatible drive
    29a4:	8a e9       	ldi	r24, 0x9A	; 154
    29a6:	91 e0       	ldi	r25, 0x01	; 1
    29a8:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
   	blinkRedLED();
    29ac:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <_Z11blinkRedLEDv>
  }

  SPI_HIGH_SPEED;	//SCK - 4 MHz
    29b0:	80 e5       	ldi	r24, 0x50	; 80
    29b2:	8d b9       	out	0x0d, r24	; 13
    29b4:	70 9a       	sbi	0x0e, 0	; 14
    29b6:	8f ec       	ldi	r24, 0xCF	; 207
    29b8:	97 e0       	ldi	r25, 0x07	; 7
    29ba:	01 97       	sbiw	r24, 0x01	; 1
    29bc:	f1 f7       	brne	.-4      	; 0x29ba <main+0xba>
    29be:	00 c0       	rjmp	.+0      	; 0x29c0 <main+0xc0>
    29c0:	00 00       	nop

 //For displaying menu on hyper terminal, the key (psh-button) must be kept pressed while 
 //powering ON or while reset. If key is not kept pressed, the program will not display menu and it will 
 //simply wait for start recording command (i.e. pressing of key afterwards)

  if(KEY_PRESSED)
    29c2:	9f 99       	sbic	0x13, 7	; 19
    29c4:	b0 c0       	rjmp	.+352    	; 0x2b26 <main+0x226>
    29c6:	7e 01       	movw	r14, r28
    29c8:	9e e0       	ldi	r25, 0x0E	; 14
    29ca:	e9 0e       	add	r14, r25
    29cc:	f1 1c       	adc	r15, r1
    29ce:	c1 2c       	mov	r12, r1
  while(1)
  {
  	transmitString_F(PSTR("\n\r\n\r> 0 : Exit the Menu"));
    29d0:	82 e8       	ldi	r24, 0x82	; 130
    29d2:	91 e0       	ldi	r25, 0x01	; 1
    29d4:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
  	transmitString_F(PSTR("\n\r> 1 : Display current Date/Time"));
    29d8:	80 e6       	ldi	r24, 0x60	; 96
    29da:	91 e0       	ldi	r25, 0x01	; 1
    29dc:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
  	transmitString_F(PSTR("\n\r> 2 : Update Date"));
    29e0:	8c e4       	ldi	r24, 0x4C	; 76
    29e2:	91 e0       	ldi	r25, 0x01	; 1
    29e4:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
  	transmitString_F(PSTR("\n\r> 3 : Update Time"));
    29e8:	88 e3       	ldi	r24, 0x38	; 56
    29ea:	91 e0       	ldi	r25, 0x01	; 1
    29ec:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
  	transmitString_F(PSTR("\n\r> 4 : Get file list"));
    29f0:	82 e2       	ldi	r24, 0x22	; 34
    29f2:	91 e0       	ldi	r25, 0x01	; 1
    29f4:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
  	transmitString_F(PSTR("\n\r> 5 : Read File"));
    29f8:	80 e1       	ldi	r24, 0x10	; 16
    29fa:	91 e0       	ldi	r25, 0x01	; 1
    29fc:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
  	transmitString_F(PSTR("\n\r> 6 : Delete File"));
    2a00:	8c ef       	ldi	r24, 0xFC	; 252
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>

  	transmitString_F(PSTR("\n\r\n\r> Enter the option:"));
    2a08:	84 ee       	ldi	r24, 0xE4	; 228
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
  	option = receiveByte();
    2a10:	0e 94 c9 02 	call	0x592	; 0x592 <_Z11receiveBytev>
    2a14:	08 2f       	mov	r16, r24
  	transmitByte(option);
    2a16:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>


	switch (option)
    2a1a:	40 2f       	mov	r20, r16
    2a1c:	50 e0       	ldi	r21, 0x00	; 0
    2a1e:	fa 01       	movw	r30, r20
    2a20:	f0 97       	sbiw	r30, 0x30	; 48
    2a22:	e7 30       	cpi	r30, 0x07	; 7
    2a24:	f1 05       	cpc	r31, r1
    2a26:	08 f0       	brcs	.+2      	; 0x2a2a <main+0x12a>
    2a28:	79 c0       	rjmp	.+242    	; 0x2b1c <main+0x21c>
    2a2a:	ef 5c       	subi	r30, 0xCF	; 207
    2a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2e:	0c 94 e4 17 	jmp	0x2fc8	; 0x2fc8 <__tablejump2__>
	{
		case '0':transmitString_F(PSTR("\n\rNormal operation started.."));
    2a32:	87 ec       	ldi	r24, 0xC7	; 199
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
		  		 goto STOP;
    2a3a:	3b c1       	rjmp	.+630    	; 0x2cb2 <main+0x3b2>

		case '1':RTC_displayDate();
    2a3c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_Z15RTC_displayDatev>
		  		 RTC_displayTime();
    2a40:	0e 94 8a 05 	call	0xb14	; 0xb14 <_Z15RTC_displayTimev>
		  		 break;
    2a44:	c5 cf       	rjmp	.-118    	; 0x29d0 <main+0xd0>

		case '2':RTC_updateDate();
    2a46:	0e 94 50 07 	call	0xea0	; 0xea0 <_Z14RTC_updateDatev>
		  		 break;
    2a4a:	c2 cf       	rjmp	.-124    	; 0x29d0 <main+0xd0>

		case '3':RTC_updateTime();
    2a4c:	0e 94 b8 06 	call	0xd70	; 0xd70 <_Z14RTC_updateTimev>
	      		 break;
    2a50:	bf cf       	rjmp	.-130    	; 0x29d0 <main+0xd0>

		case '4':TX_NEWLINE;
    2a52:	8d e0       	ldi	r24, 0x0D	; 13
    2a54:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
    2a58:	8a e0       	ldi	r24, 0x0A	; 10
    2a5a:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
  		  		 findFiles(GET_LIST,0);
    2a5e:	60 e0       	ldi	r22, 0x00	; 0
    2a60:	70 e0       	ldi	r23, 0x00	; 0
    2a62:	8c 2d       	mov	r24, r12
    2a64:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <_Z9findFileshPh>
          		 break;
    2a68:	b3 cf       	rjmp	.-154    	; 0x29d0 <main+0xd0>

		case '5':
		case '6':transmitString_F(PSTR("\n\rEnter file name: "));
    2a6a:	83 eb       	ldi	r24, 0xB3	; 179
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
    2a72:	fe 01       	movw	r30, r28
    2a74:	31 96       	adiw	r30, 0x01	; 1
          		 for(i=0; i<13; i++)
				 fileName[i] = 0x00;   //clearing any previously stored file name
    2a76:	11 92       	st	Z+, r1
  		  		 findFiles(GET_LIST,0);
          		 break;

		case '5':
		case '6':transmitString_F(PSTR("\n\rEnter file name: "));
          		 for(i=0; i<13; i++)
    2a78:	ee 15       	cp	r30, r14
    2a7a:	ff 05       	cpc	r31, r15
    2a7c:	e1 f7       	brne	.-8      	; 0x2a76 <main+0x176>
    2a7e:	dc 2c       	mov	r13, r12
    2a80:	01 c0       	rjmp	.+2      	; 0x2a84 <main+0x184>
	   					} 
	   					continue;     
	 				}
					if(data <0x20 || data > 0x7e) continue;  //check for valid English text character
					transmitByte(data);
            		fileName[i++] = data;
    2a82:	d9 2e       	mov	r13, r25
          		 for(i=0; i<13; i++)
				 fileName[i] = 0x00;   //clearing any previously stored file name
          		 i=0;
          		 while(1)
          		 {
            		data = receiveByte();
    2a84:	0e 94 c9 02 	call	0x592	; 0x592 <_Z11receiveBytev>
    2a88:	18 2f       	mov	r17, r24
            		if(data == 0x0d) break;  //'ENTER' key pressed
    2a8a:	8d 30       	cpi	r24, 0x0D	; 13
    2a8c:	29 f1       	breq	.+74     	; 0x2ad8 <main+0x1d8>
					if(data == 0x08)	//'Back Space' key pressed
    2a8e:	88 30       	cpi	r24, 0x08	; 8
    2a90:	69 f4       	brne	.+26     	; 0x2aac <main+0x1ac>
	 				{ 
	   					if(i != 0)
    2a92:	dd 20       	and	r13, r13
    2a94:	b9 f3       	breq	.-18     	; 0x2a84 <main+0x184>
	   					{ 
	     					transmitByte(data);
    2a96:	88 e0       	ldi	r24, 0x08	; 8
    2a98:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
							transmitByte(' '); 
    2a9c:	80 e2       	ldi	r24, 0x20	; 32
    2a9e:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
	     					transmitByte(data); 
    2aa2:	88 e0       	ldi	r24, 0x08	; 8
    2aa4:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
	     					i--; 
    2aa8:	da 94       	dec	r13
    2aaa:	ec cf       	rjmp	.-40     	; 0x2a84 <main+0x184>
	   					} 
	   					continue;     
	 				}
					if(data <0x20 || data > 0x7e) continue;  //check for valid English text character
    2aac:	90 ee       	ldi	r25, 0xE0	; 224
    2aae:	98 0f       	add	r25, r24
    2ab0:	9f 35       	cpi	r25, 0x5F	; 95
    2ab2:	40 f7       	brcc	.-48     	; 0x2a84 <main+0x184>
					transmitByte(data);
    2ab4:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
            		fileName[i++] = data;
    2ab8:	91 e0       	ldi	r25, 0x01	; 1
    2aba:	9d 0d       	add	r25, r13
    2abc:	e1 e0       	ldi	r30, 0x01	; 1
    2abe:	f0 e0       	ldi	r31, 0x00	; 0
    2ac0:	ec 0f       	add	r30, r28
    2ac2:	fd 1f       	adc	r31, r29
    2ac4:	ed 0d       	add	r30, r13
    2ac6:	f1 1d       	adc	r31, r1
    2ac8:	10 83       	st	Z, r17
            		if(i==13){transmitString_F(PSTR(" file name too long..")); break;}
    2aca:	9d 30       	cpi	r25, 0x0D	; 13
    2acc:	d1 f6       	brne	.-76     	; 0x2a82 <main+0x182>
    2ace:	8d e9       	ldi	r24, 0x9D	; 157
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
    2ad6:	7c cf       	rjmp	.-264    	; 0x29d0 <main+0xd0>
          		}
          		if(i>12) break;
    2ad8:	ec e0       	ldi	r30, 0x0C	; 12
    2ada:	ed 15       	cp	r30, r13
    2adc:	08 f4       	brcc	.+2      	; 0x2ae0 <main+0x1e0>
    2ade:	78 cf       	rjmp	.-272    	; 0x29d0 <main+0xd0>
       
	      		TX_NEWLINE;
    2ae0:	8d e0       	ldi	r24, 0x0D	; 13
    2ae2:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
    2ae6:	8a e0       	ldi	r24, 0x0A	; 10
    2ae8:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z12transmitByteh>
		  		if(option == '5') 
    2aec:	05 33       	cpi	r16, 0x35	; 53
    2aee:	71 f4       	brne	.+28     	; 0x2b0c <main+0x20c>
				{ 
					error = readFile( READ, fileName);
    2af0:	be 01       	movw	r22, r28
    2af2:	6f 5f       	subi	r22, 0xFF	; 255
    2af4:	7f 4f       	sbci	r23, 0xFF	; 255
    2af6:	8c 2d       	mov	r24, r12
    2af8:	0e 94 00 10 	call	0x2000	; 0x2000 <_Z8readFilehPh>
					if(error == 1) transmitString_F(PSTR("File does not exist.."));
    2afc:	81 30       	cpi	r24, 0x01	; 1
    2afe:	09 f0       	breq	.+2      	; 0x2b02 <main+0x202>
    2b00:	67 cf       	rjmp	.-306    	; 0x29d0 <main+0xd0>
    2b02:	87 e8       	ldi	r24, 0x87	; 135
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
    2b0a:	62 cf       	rjmp	.-316    	; 0x29d0 <main+0xd0>
				}
		  		if(option == '6') deleteFile(fileName);
    2b0c:	06 33       	cpi	r16, 0x36	; 54
    2b0e:	09 f0       	breq	.+2      	; 0x2b12 <main+0x212>
    2b10:	5f cf       	rjmp	.-322    	; 0x29d0 <main+0xd0>
    2b12:	ce 01       	movw	r24, r28
    2b14:	01 96       	adiw	r24, 0x01	; 1
    2b16:	0e 94 e7 10 	call	0x21ce	; 0x21ce <_Z10deleteFilePh>
    2b1a:	5a cf       	rjmp	.-332    	; 0x29d0 <main+0xd0>
          		break;

    	default:transmitString_F(PSTR("\n\r\n\r Invalid option!\n\r"));
    2b1c:	80 e7       	ldi	r24, 0x70	; 112
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z16transmitString_FPKc>
    2b24:	55 cf       	rjmp	.-342    	; 0x29d0 <main+0xd0>
  }

  
  while(1)
  { 
  	while(!KEY_PRESSED); 	//wait here for key-press, recording starts when key is pressed
    2b26:	9f 99       	sbic	0x13, 7	; 19
    2b28:	fe cf       	rjmp	.-4      	; 0x2b26 <main+0x226>
    2b2a:	ff ef       	ldi	r31, 0xFF	; 255
    2b2c:	29 ef       	ldi	r18, 0xF9	; 249
    2b2e:	30 e0       	ldi	r19, 0x00	; 0
    2b30:	f1 50       	subi	r31, 0x01	; 1
    2b32:	20 40       	sbci	r18, 0x00	; 0
    2b34:	30 40       	sbci	r19, 0x00	; 0
    2b36:	e1 f7       	brne	.-8      	; 0x2b30 <main+0x230>
    2b38:	00 c0       	rjmp	.+0      	; 0x2b3a <main+0x23a>
    2b3a:	00 00       	nop
  	_delay_ms(40);	   		//key debounce delay

  	if(!KEY_PRESSED) continue;
    2b3c:	9f 99       	sbic	0x13, 7	; 19
    2b3e:	f3 cf       	rjmp	.-26     	; 0x2b26 <main+0x226>

  	while(KEY_PRESSED);  	//wait here for key-depress
    2b40:	9f 9b       	sbis	0x13, 7	; 19
    2b42:	fe cf       	rjmp	.-4      	; 0x2b40 <main+0x240>
    2b44:	4f ef       	ldi	r20, 0xFF	; 255
    2b46:	89 ef       	ldi	r24, 0xF9	; 249
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	41 50       	subi	r20, 0x01	; 1
    2b4c:	80 40       	sbci	r24, 0x00	; 0
    2b4e:	90 40       	sbci	r25, 0x00	; 0
    2b50:	e1 f7       	brne	.-8      	; 0x2b4a <main+0x24a>
    2b52:	00 c0       	rjmp	.+0      	; 0x2b54 <main+0x254>
    2b54:	00 00       	nop
  	_delay_ms(40);	   		//key debounce delay

  
	RED_LED_ON;  //turn on red LED to indicate that recording has started
    2b56:	ae 9a       	sbi	0x15, 6	; 21
    2b58:	5e 01       	movw	r10, r28
    2b5a:	e9 e0       	ldi	r30, 0x09	; 9
    2b5c:	ae 0e       	add	r10, r30
    2b5e:	b1 1c       	adc	r11, r1
    2b60:	0f 2e       	mov	r0, r31
    2b62:	f4 e2       	ldi	r31, 0x24	; 36
    2b64:	ef 2e       	mov	r14, r31
    2b66:	f1 e0       	ldi	r31, 0x01	; 1
    2b68:	ff 2e       	mov	r15, r31
    2b6a:	f0 2d       	mov	r31, r0
    2b6c:	0f 2e       	mov	r0, r31
    2b6e:	fe e2       	ldi	r31, 0x2E	; 46
    2b70:	cf 2e       	mov	r12, r31
    2b72:	f1 e0       	ldi	r31, 0x01	; 1
    2b74:	df 2e       	mov	r13, r31
    2b76:	f0 2d       	mov	r31, r0
		//dataString is declared in FAT32.h
		//make sure dataString doesn't exceed its MAX_STRING_SIZE, defined in FAT32.h
		//Also, end the data string with '\r' & '\n' characters to maintain CSV format

		for(i=0; i<10; i++) dataString[i] = date[i];
		dataString[i++] = ',';
    2b78:	0f 2e       	mov	r0, r31
    2b7a:	f0 e8       	ldi	r31, 0x80	; 128
    2b7c:	6f 2e       	mov	r6, r31
    2b7e:	f0 e0       	ldi	r31, 0x00	; 0
    2b80:	7f 2e       	mov	r7, r31
    2b82:	f0 2d       	mov	r31, r0
    2b84:	0f 2e       	mov	r0, r31
    2b86:	fc e2       	ldi	r31, 0x2C	; 44
    2b88:	3f 2e       	mov	r3, r31
    2b8a:	f0 2d       	mov	r31, r0

		for(j=0;j<8; j++)  dataString[i++] = time[j];
		dataString[i++] = ',';
		
		readTemperature(0); //read temperature from adc channel-0
    2b8c:	21 2c       	mov	r2, r1
    2b8e:	0f 2e       	mov	r0, r31
    2b90:	fb e0       	ldi	r31, 0x0B	; 11
    2b92:	8f 2e       	mov	r8, r31
    2b94:	f1 e0       	ldi	r31, 0x01	; 1
    2b96:	9f 2e       	mov	r9, r31
    2b98:	f0 2d       	mov	r31, r0
  
	RED_LED_ON;  //turn on red LED to indicate that recording has started

	while(1)
	{
		error = RTC_getDate();
    2b9a:	0e 94 55 05 	call	0xaaa	; 0xaaa <_Z11RTC_getDatev>
		if(error) blinkRedLED();
    2b9e:	81 11       	cpse	r24, r1
    2ba0:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <_Z11blinkRedLEDv>
    2ba4:	de 01       	movw	r26, r28
    2ba6:	11 96       	adiw	r26, 0x01	; 1
    2ba8:	80 e0       	ldi	r24, 0x00	; 0

		j=0;
		for(i=0; i<8; i++)
		{
			fileName[i] = date[j++];
    2baa:	91 e0       	ldi	r25, 0x01	; 1
    2bac:	98 0f       	add	r25, r24
    2bae:	e8 2f       	mov	r30, r24
    2bb0:	f0 e0       	ldi	r31, 0x00	; 0
    2bb2:	ec 5d       	subi	r30, 0xDC	; 220
    2bb4:	fe 4f       	sbci	r31, 0xFE	; 254
    2bb6:	20 81       	ld	r18, Z
    2bb8:	2d 93       	st	X+, r18
			if(j==2 || j==5) j++;	//excluding the '/' character from date in the fileName
    2bba:	92 30       	cpi	r25, 0x02	; 2
    2bbc:	11 f0       	breq	.+4      	; 0x2bc2 <main+0x2c2>
    2bbe:	95 30       	cpi	r25, 0x05	; 5
    2bc0:	11 f4       	brne	.+4      	; 0x2bc6 <main+0x2c6>
    2bc2:	8e 5f       	subi	r24, 0xFE	; 254
    2bc4:	01 c0       	rjmp	.+2      	; 0x2bc8 <main+0x2c8>
		if(error) blinkRedLED();

		j=0;
		for(i=0; i<8; i++)
		{
			fileName[i] = date[j++];
    2bc6:	89 2f       	mov	r24, r25
	{
		error = RTC_getDate();
		if(error) blinkRedLED();

		j=0;
		for(i=0; i<8; i++)
    2bc8:	aa 15       	cp	r26, r10
    2bca:	bb 05       	cpc	r27, r11
    2bcc:	71 f7       	brne	.-36     	; 0x2baa <main+0x2aa>
    2bce:	83 c0       	rjmp	.+262    	; 0x2cd6 <main+0x3d6>
		fileName[9] = 'C';
		fileName[10] = 'S';
		fileName[11] = 'V';

		error = RTC_getTime();
    	if(error) blinkRedLED();
    2bd0:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <_Z11blinkRedLEDv>
    2bd4:	df 01       	movw	r26, r30
    2bd6:	ae 19       	sub	r26, r14
    2bd8:	bf 09       	sbc	r27, r15
		//From here onwards, gather data by appending strings in dataString
		//dataString is declared in FAT32.h
		//make sure dataString doesn't exceed its MAX_STRING_SIZE, defined in FAT32.h
		//Also, end the data string with '\r' & '\n' characters to maintain CSV format

		for(i=0; i<10; i++) dataString[i] = date[i];
    2bda:	81 91       	ld	r24, Z+
    2bdc:	a0 58       	subi	r26, 0x80	; 128
    2bde:	bf 4f       	sbci	r27, 0xFF	; 255
    2be0:	8c 93       	st	X, r24
    2be2:	ec 15       	cp	r30, r12
    2be4:	fd 05       	cpc	r31, r13
    2be6:	b1 f7       	brne	.-20     	; 0x2bd4 <main+0x2d4>
		dataString[i++] = ',';
    2be8:	f3 01       	movw	r30, r6
    2bea:	32 86       	std	Z+10, r3	; 0x0a
    2bec:	ef e2       	ldi	r30, 0x2F	; 47
    2bee:	f1 e0       	ldi	r31, 0x01	; 1
    2bf0:	8b e0       	ldi	r24, 0x0B	; 11
    2bf2:	90 e0       	ldi	r25, 0x00	; 0

		for(j=0;j<8; j++)  dataString[i++] = time[j];
    2bf4:	21 91       	ld	r18, Z+
    2bf6:	dc 01       	movw	r26, r24
    2bf8:	a0 58       	subi	r26, 0x80	; 128
    2bfa:	bf 4f       	sbci	r27, 0xFF	; 255
    2bfc:	2c 93       	st	X, r18
    2bfe:	01 96       	adiw	r24, 0x01	; 1
    2c00:	83 31       	cpi	r24, 0x13	; 19
    2c02:	91 05       	cpc	r25, r1
    2c04:	b9 f7       	brne	.-18     	; 0x2bf4 <main+0x2f4>
		dataString[i++] = ',';
    2c06:	f3 01       	movw	r30, r6
    2c08:	33 8a       	std	Z+19, r3	; 0x13
		
		readTemperature(0); //read temperature from adc channel-0
    2c0a:	80 e0       	ldi	r24, 0x00	; 0
    2c0c:	0e 94 be 08 	call	0x117c	; 0x117c <_Z15readTemperatureh>
    2c10:	e2 e1       	ldi	r30, 0x12	; 18
    2c12:	f1 e0       	ldi	r31, 0x01	; 1
    2c14:	04 e1       	ldi	r16, 0x14	; 20
    2c16:	12 2d       	mov	r17, r2
		for(j=0;j<7; j++)  dataString[i++] = temperature[j];
    2c18:	81 91       	ld	r24, Z+
    2c1a:	d8 01       	movw	r26, r16
    2c1c:	a0 58       	subi	r26, 0x80	; 128
    2c1e:	bf 4f       	sbci	r27, 0xFF	; 255
    2c20:	8c 93       	st	X, r24
    2c22:	0f 5f       	subi	r16, 0xFF	; 255
    2c24:	1f 4f       	sbci	r17, 0xFF	; 255
    2c26:	0b 31       	cpi	r16, 0x1B	; 27
    2c28:	11 05       	cpc	r17, r1
    2c2a:	b1 f7       	brne	.-20     	; 0x2c18 <main+0x318>
    2c2c:	44 24       	eor	r4, r4
    2c2e:	43 94       	inc	r4
    2c30:	55 24       	eor	r5, r5
    2c32:	53 94       	inc	r5
    2c34:	50 0e       	add	r5, r16
		

		for(channel=1; channel<8; channel++)  //read voltages from ADC channel 1 to 7
		{
			dataString[i++] = ',';
    2c36:	f8 01       	movw	r30, r16
    2c38:	e0 58       	subi	r30, 0x80	; 128
    2c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3c:	30 82       	st	Z, r3
			readVoltage(channel); 
    2c3e:	84 2d       	mov	r24, r4
    2c40:	0e 94 5f 09 	call	0x12be	; 0x12be <_Z11readVoltageh>
    2c44:	d4 01       	movw	r26, r8
    2c46:	98 e0       	ldi	r25, 0x08	; 8
    2c48:	90 0f       	add	r25, r16
			for(j=0;j<7; j++)  dataString[i++] = voltage[j];
    2c4a:	e5 2d       	mov	r30, r5
    2c4c:	f0 e0       	ldi	r31, 0x00	; 0
    2c4e:	8d 91       	ld	r24, X+
    2c50:	e0 58       	subi	r30, 0x80	; 128
    2c52:	ff 4f       	sbci	r31, 0xFF	; 255
    2c54:	80 83       	st	Z, r24
    2c56:	53 94       	inc	r5
    2c58:	95 11       	cpse	r25, r5
    2c5a:	f7 cf       	rjmp	.-18     	; 0x2c4a <main+0x34a>
		
		readTemperature(0); //read temperature from adc channel-0
		for(j=0;j<7; j++)  dataString[i++] = temperature[j];
		

		for(channel=1; channel<8; channel++)  //read voltages from ADC channel 1 to 7
    2c5c:	43 94       	inc	r4
    2c5e:	08 5f       	subi	r16, 0xF8	; 248
    2c60:	1f 4f       	sbci	r17, 0xFF	; 255
    2c62:	f8 e0       	ldi	r31, 0x08	; 8
    2c64:	4f 12       	cpse	r4, r31
    2c66:	e4 cf       	rjmp	.-56     	; 0x2c30 <main+0x330>
    2c68:	44 c0       	rjmp	.+136    	; 0x2cf2 <main+0x3f2>
		dataString[i++] = '\r';
		dataString[i] = '\n';    //always end the string with these two characters,
								 //before calling the writeFile function

		error = writeFile(fileName);
		if(error) blinkRedLED();
    2c6a:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <_Z11blinkRedLEDv>
    2c6e:	ef e1       	ldi	r30, 0x1F	; 31
    2c70:	fe e4       	ldi	r31, 0x4E	; 78
    2c72:	31 97       	sbiw	r30, 0x01	; 1
    2c74:	f1 f7       	brne	.-4      	; 0x2c72 <main+0x372>
    2c76:	00 c0       	rjmp	.+0      	; 0x2c78 <main+0x378>
    2c78:	00 00       	nop
		delay = INTERVAL / 10;
		for(k=0; k<delay; k++) 
		{
		 	_delay_ms(10);  //10ms delay in each loop
			
			if(KEY_PRESSED) 	//check for key-press
    2c7a:	9f 99       	sbic	0x13, 7	; 19
    2c7c:	17 c0       	rjmp	.+46     	; 0x2cac <main+0x3ac>
    2c7e:	ff ef       	ldi	r31, 0xFF	; 255
    2c80:	29 ef       	ldi	r18, 0xF9	; 249
    2c82:	30 e0       	ldi	r19, 0x00	; 0
    2c84:	f1 50       	subi	r31, 0x01	; 1
    2c86:	20 40       	sbci	r18, 0x00	; 0
    2c88:	30 40       	sbci	r19, 0x00	; 0
    2c8a:	e1 f7       	brne	.-8      	; 0x2c84 <main+0x384>
    2c8c:	00 c0       	rjmp	.+0      	; 0x2c8e <main+0x38e>
    2c8e:	00 00       	nop
  			{
				_delay_ms(40);	   		//key debounce delay
  				if(KEY_PRESSED) 
    2c90:	9f 99       	sbic	0x13, 7	; 19
    2c92:	0c c0       	rjmp	.+24     	; 0x2cac <main+0x3ac>
  				{
					while(KEY_PRESSED);  	//wait here for key-depress
    2c94:	9f 9b       	sbis	0x13, 7	; 19
    2c96:	fe cf       	rjmp	.-4      	; 0x2c94 <main+0x394>
    2c98:	4f ef       	ldi	r20, 0xFF	; 255
    2c9a:	89 ef       	ldi	r24, 0xF9	; 249
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	41 50       	subi	r20, 0x01	; 1
    2ca0:	80 40       	sbci	r24, 0x00	; 0
    2ca2:	90 40       	sbci	r25, 0x00	; 0
    2ca4:	e1 f7       	brne	.-8      	; 0x2c9e <main+0x39e>
    2ca6:	00 c0       	rjmp	.+0      	; 0x2ca8 <main+0x3a8>
    2ca8:	00 00       	nop
    2caa:	03 c0       	rjmp	.+6      	; 0x2cb2 <main+0x3b2>
    2cac:	01 97       	sbiw	r24, 0x01	; 1

		error = writeFile(fileName);
		if(error) blinkRedLED();

		delay = INTERVAL / 10;
		for(k=0; k<delay; k++) 
    2cae:	f9 f6       	brne	.-66     	; 0x2c6e <main+0x36e>
    2cb0:	74 cf       	rjmp	.-280    	; 0x2b9a <main+0x29a>
		}

	}//end of while(1)

	STOP: 
	RED_LED_OFF;  //recording stopped
    2cb2:	ae 98       	cbi	0x15, 6	; 21
    2cb4:	38 cf       	rjmp	.-400    	; 0x2b26 <main+0x226>
  	if(error == 2) transmitString_F(PSTR("Card Initialization failed.."));
  
  	blinkRedLED();
  }

  switch (cardType)
    2cb6:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <cardType>
    2cba:	82 30       	cpi	r24, 0x02	; 2
    2cbc:	09 f4       	brne	.+2      	; 0x2cc0 <main+0x3c0>
    2cbe:	60 ce       	rjmp	.-832    	; 0x2980 <main+0x80>
    2cc0:	83 30       	cpi	r24, 0x03	; 3
    2cc2:	09 f4       	brne	.+2      	; 0x2cc6 <main+0x3c6>
    2cc4:	62 ce       	rjmp	.-828    	; 0x298a <main+0x8a>
    2cc6:	81 30       	cpi	r24, 0x01	; 1
    2cc8:	09 f0       	breq	.+2      	; 0x2ccc <main+0x3cc>
    2cca:	64 ce       	rjmp	.-824    	; 0x2994 <main+0x94>
    2ccc:	54 ce       	rjmp	.-856    	; 0x2976 <main+0x76>
  	if(!error) break;
  }

  if(error)
  {
  	if(error == 1) transmitString_F(PSTR("SD card not detected.."));
    2cce:	81 30       	cpi	r24, 0x01	; 1
    2cd0:	09 f0       	breq	.+2      	; 0x2cd4 <main+0x3d4>
    2cd2:	49 ce       	rjmp	.-878    	; 0x2966 <main+0x66>
    2cd4:	43 ce       	rjmp	.-890    	; 0x295c <main+0x5c>
		{
			fileName[i] = date[j++];
			if(j==2 || j==5) j++;	//excluding the '/' character from date in the fileName
		}

		fileName[8] = '.';
    2cd6:	8e e2       	ldi	r24, 0x2E	; 46
    2cd8:	89 87       	std	Y+9, r24	; 0x09
		fileName[9] = 'C';
    2cda:	83 e4       	ldi	r24, 0x43	; 67
    2cdc:	8a 87       	std	Y+10, r24	; 0x0a
		fileName[10] = 'S';
    2cde:	83 e5       	ldi	r24, 0x53	; 83
    2ce0:	8b 87       	std	Y+11, r24	; 0x0b
		fileName[11] = 'V';
    2ce2:	86 e5       	ldi	r24, 0x56	; 86
    2ce4:	8c 87       	std	Y+12, r24	; 0x0c

		error = RTC_getTime();
    2ce6:	0e 94 22 05 	call	0xa44	; 0xa44 <_Z11RTC_getTimev>
    	if(error) blinkRedLED();
    2cea:	81 11       	cpse	r24, r1
    2cec:	71 cf       	rjmp	.-286    	; 0x2bd0 <main+0x2d0>
    2cee:	f7 01       	movw	r30, r14
    2cf0:	71 cf       	rjmp	.-286    	; 0x2bd4 <main+0x2d4>
			dataString[i++] = ',';
			readVoltage(channel); 
			for(j=0;j<7; j++)  dataString[i++] = voltage[j];
		}

		dataString[i++] = '\r';
    2cf2:	8d e0       	ldi	r24, 0x0D	; 13
    2cf4:	80 93 d3 00 	sts	0x00D3, r24	; 0x8000d3 <__data_end+0x53>
		dataString[i] = '\n';    //always end the string with these two characters,
    2cf8:	8a e0       	ldi	r24, 0x0A	; 10
    2cfa:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__data_end+0x54>
								 //before calling the writeFile function

		error = writeFile(fileName);
    2cfe:	ce 01       	movw	r24, r28
    2d00:	01 96       	adiw	r24, 0x01	; 1
    2d02:	0e 94 f5 10 	call	0x21ea	; 0x21ea <_Z9writeFilePh>
		if(error) blinkRedLED();
    2d06:	81 11       	cpse	r24, r1
    2d08:	b0 cf       	rjmp	.-160    	; 0x2c6a <main+0x36a>
    2d0a:	84 e6       	ldi	r24, 0x64	; 100
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	af cf       	rjmp	.-162    	; 0x2c6e <main+0x36e>

00002d10 <__fixunssfsi>:
    2d10:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <__fp_splitA>
    2d14:	88 f0       	brcs	.+34     	; 0x2d38 <__fixunssfsi+0x28>
    2d16:	9f 57       	subi	r25, 0x7F	; 127
    2d18:	98 f0       	brcs	.+38     	; 0x2d40 <__fixunssfsi+0x30>
    2d1a:	b9 2f       	mov	r27, r25
    2d1c:	99 27       	eor	r25, r25
    2d1e:	b7 51       	subi	r27, 0x17	; 23
    2d20:	b0 f0       	brcs	.+44     	; 0x2d4e <__fixunssfsi+0x3e>
    2d22:	e1 f0       	breq	.+56     	; 0x2d5c <__fixunssfsi+0x4c>
    2d24:	66 0f       	add	r22, r22
    2d26:	77 1f       	adc	r23, r23
    2d28:	88 1f       	adc	r24, r24
    2d2a:	99 1f       	adc	r25, r25
    2d2c:	1a f0       	brmi	.+6      	; 0x2d34 <__fixunssfsi+0x24>
    2d2e:	ba 95       	dec	r27
    2d30:	c9 f7       	brne	.-14     	; 0x2d24 <__fixunssfsi+0x14>
    2d32:	14 c0       	rjmp	.+40     	; 0x2d5c <__fixunssfsi+0x4c>
    2d34:	b1 30       	cpi	r27, 0x01	; 1
    2d36:	91 f0       	breq	.+36     	; 0x2d5c <__fixunssfsi+0x4c>
    2d38:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <__fp_zero>
    2d3c:	b1 e0       	ldi	r27, 0x01	; 1
    2d3e:	08 95       	ret
    2d40:	0c 94 16 17 	jmp	0x2e2c	; 0x2e2c <__fp_zero>
    2d44:	67 2f       	mov	r22, r23
    2d46:	78 2f       	mov	r23, r24
    2d48:	88 27       	eor	r24, r24
    2d4a:	b8 5f       	subi	r27, 0xF8	; 248
    2d4c:	39 f0       	breq	.+14     	; 0x2d5c <__fixunssfsi+0x4c>
    2d4e:	b9 3f       	cpi	r27, 0xF9	; 249
    2d50:	cc f3       	brlt	.-14     	; 0x2d44 <__fixunssfsi+0x34>
    2d52:	86 95       	lsr	r24
    2d54:	77 95       	ror	r23
    2d56:	67 95       	ror	r22
    2d58:	b3 95       	inc	r27
    2d5a:	d9 f7       	brne	.-10     	; 0x2d52 <__fixunssfsi+0x42>
    2d5c:	3e f4       	brtc	.+14     	; 0x2d6c <__fixunssfsi+0x5c>
    2d5e:	90 95       	com	r25
    2d60:	80 95       	com	r24
    2d62:	70 95       	com	r23
    2d64:	61 95       	neg	r22
    2d66:	7f 4f       	sbci	r23, 0xFF	; 255
    2d68:	8f 4f       	sbci	r24, 0xFF	; 255
    2d6a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d6c:	08 95       	ret

00002d6e <__floatunsisf>:
    2d6e:	e8 94       	clt
    2d70:	09 c0       	rjmp	.+18     	; 0x2d84 <__floatsisf+0x12>

00002d72 <__floatsisf>:
    2d72:	97 fb       	bst	r25, 7
    2d74:	3e f4       	brtc	.+14     	; 0x2d84 <__floatsisf+0x12>
    2d76:	90 95       	com	r25
    2d78:	80 95       	com	r24
    2d7a:	70 95       	com	r23
    2d7c:	61 95       	neg	r22
    2d7e:	7f 4f       	sbci	r23, 0xFF	; 255
    2d80:	8f 4f       	sbci	r24, 0xFF	; 255
    2d82:	9f 4f       	sbci	r25, 0xFF	; 255
    2d84:	99 23       	and	r25, r25
    2d86:	a9 f0       	breq	.+42     	; 0x2db2 <__floatsisf+0x40>
    2d88:	f9 2f       	mov	r31, r25
    2d8a:	96 e9       	ldi	r25, 0x96	; 150
    2d8c:	bb 27       	eor	r27, r27
    2d8e:	93 95       	inc	r25
    2d90:	f6 95       	lsr	r31
    2d92:	87 95       	ror	r24
    2d94:	77 95       	ror	r23
    2d96:	67 95       	ror	r22
    2d98:	b7 95       	ror	r27
    2d9a:	f1 11       	cpse	r31, r1
    2d9c:	f8 cf       	rjmp	.-16     	; 0x2d8e <__floatsisf+0x1c>
    2d9e:	fa f4       	brpl	.+62     	; 0x2dde <__floatsisf+0x6c>
    2da0:	bb 0f       	add	r27, r27
    2da2:	11 f4       	brne	.+4      	; 0x2da8 <__floatsisf+0x36>
    2da4:	60 ff       	sbrs	r22, 0
    2da6:	1b c0       	rjmp	.+54     	; 0x2dde <__floatsisf+0x6c>
    2da8:	6f 5f       	subi	r22, 0xFF	; 255
    2daa:	7f 4f       	sbci	r23, 0xFF	; 255
    2dac:	8f 4f       	sbci	r24, 0xFF	; 255
    2dae:	9f 4f       	sbci	r25, 0xFF	; 255
    2db0:	16 c0       	rjmp	.+44     	; 0x2dde <__floatsisf+0x6c>
    2db2:	88 23       	and	r24, r24
    2db4:	11 f0       	breq	.+4      	; 0x2dba <__floatsisf+0x48>
    2db6:	96 e9       	ldi	r25, 0x96	; 150
    2db8:	11 c0       	rjmp	.+34     	; 0x2ddc <__floatsisf+0x6a>
    2dba:	77 23       	and	r23, r23
    2dbc:	21 f0       	breq	.+8      	; 0x2dc6 <__floatsisf+0x54>
    2dbe:	9e e8       	ldi	r25, 0x8E	; 142
    2dc0:	87 2f       	mov	r24, r23
    2dc2:	76 2f       	mov	r23, r22
    2dc4:	05 c0       	rjmp	.+10     	; 0x2dd0 <__floatsisf+0x5e>
    2dc6:	66 23       	and	r22, r22
    2dc8:	71 f0       	breq	.+28     	; 0x2de6 <__floatsisf+0x74>
    2dca:	96 e8       	ldi	r25, 0x86	; 134
    2dcc:	86 2f       	mov	r24, r22
    2dce:	70 e0       	ldi	r23, 0x00	; 0
    2dd0:	60 e0       	ldi	r22, 0x00	; 0
    2dd2:	2a f0       	brmi	.+10     	; 0x2dde <__floatsisf+0x6c>
    2dd4:	9a 95       	dec	r25
    2dd6:	66 0f       	add	r22, r22
    2dd8:	77 1f       	adc	r23, r23
    2dda:	88 1f       	adc	r24, r24
    2ddc:	da f7       	brpl	.-10     	; 0x2dd4 <__floatsisf+0x62>
    2dde:	88 0f       	add	r24, r24
    2de0:	96 95       	lsr	r25
    2de2:	87 95       	ror	r24
    2de4:	97 f9       	bld	r25, 7
    2de6:	08 95       	ret

00002de8 <__fp_split3>:
    2de8:	57 fd       	sbrc	r21, 7
    2dea:	90 58       	subi	r25, 0x80	; 128
    2dec:	44 0f       	add	r20, r20
    2dee:	55 1f       	adc	r21, r21
    2df0:	59 f0       	breq	.+22     	; 0x2e08 <__fp_splitA+0x10>
    2df2:	5f 3f       	cpi	r21, 0xFF	; 255
    2df4:	71 f0       	breq	.+28     	; 0x2e12 <__fp_splitA+0x1a>
    2df6:	47 95       	ror	r20

00002df8 <__fp_splitA>:
    2df8:	88 0f       	add	r24, r24
    2dfa:	97 fb       	bst	r25, 7
    2dfc:	99 1f       	adc	r25, r25
    2dfe:	61 f0       	breq	.+24     	; 0x2e18 <__fp_splitA+0x20>
    2e00:	9f 3f       	cpi	r25, 0xFF	; 255
    2e02:	79 f0       	breq	.+30     	; 0x2e22 <__fp_splitA+0x2a>
    2e04:	87 95       	ror	r24
    2e06:	08 95       	ret
    2e08:	12 16       	cp	r1, r18
    2e0a:	13 06       	cpc	r1, r19
    2e0c:	14 06       	cpc	r1, r20
    2e0e:	55 1f       	adc	r21, r21
    2e10:	f2 cf       	rjmp	.-28     	; 0x2df6 <__fp_split3+0xe>
    2e12:	46 95       	lsr	r20
    2e14:	f1 df       	rcall	.-30     	; 0x2df8 <__fp_splitA>
    2e16:	08 c0       	rjmp	.+16     	; 0x2e28 <__fp_splitA+0x30>
    2e18:	16 16       	cp	r1, r22
    2e1a:	17 06       	cpc	r1, r23
    2e1c:	18 06       	cpc	r1, r24
    2e1e:	99 1f       	adc	r25, r25
    2e20:	f1 cf       	rjmp	.-30     	; 0x2e04 <__fp_splitA+0xc>
    2e22:	86 95       	lsr	r24
    2e24:	71 05       	cpc	r23, r1
    2e26:	61 05       	cpc	r22, r1
    2e28:	08 94       	sec
    2e2a:	08 95       	ret

00002e2c <__fp_zero>:
    2e2c:	e8 94       	clt

00002e2e <__fp_szero>:
    2e2e:	bb 27       	eor	r27, r27
    2e30:	66 27       	eor	r22, r22
    2e32:	77 27       	eor	r23, r23
    2e34:	cb 01       	movw	r24, r22
    2e36:	97 f9       	bld	r25, 7
    2e38:	08 95       	ret

00002e3a <__mulsf3>:
    2e3a:	0e 94 30 17 	call	0x2e60	; 0x2e60 <__mulsf3x>
    2e3e:	0c 94 a1 17 	jmp	0x2f42	; 0x2f42 <__fp_round>
    2e42:	0e 94 93 17 	call	0x2f26	; 0x2f26 <__fp_pscA>
    2e46:	38 f0       	brcs	.+14     	; 0x2e56 <__mulsf3+0x1c>
    2e48:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <__fp_pscB>
    2e4c:	20 f0       	brcs	.+8      	; 0x2e56 <__mulsf3+0x1c>
    2e4e:	95 23       	and	r25, r21
    2e50:	11 f0       	breq	.+4      	; 0x2e56 <__mulsf3+0x1c>
    2e52:	0c 94 8a 17 	jmp	0x2f14	; 0x2f14 <__fp_inf>
    2e56:	0c 94 90 17 	jmp	0x2f20	; 0x2f20 <__fp_nan>
    2e5a:	11 24       	eor	r1, r1
    2e5c:	0c 94 17 17 	jmp	0x2e2e	; 0x2e2e <__fp_szero>

00002e60 <__mulsf3x>:
    2e60:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <__fp_split3>
    2e64:	70 f3       	brcs	.-36     	; 0x2e42 <__mulsf3+0x8>

00002e66 <__mulsf3_pse>:
    2e66:	95 9f       	mul	r25, r21
    2e68:	c1 f3       	breq	.-16     	; 0x2e5a <__mulsf3+0x20>
    2e6a:	95 0f       	add	r25, r21
    2e6c:	50 e0       	ldi	r21, 0x00	; 0
    2e6e:	55 1f       	adc	r21, r21
    2e70:	62 9f       	mul	r22, r18
    2e72:	f0 01       	movw	r30, r0
    2e74:	72 9f       	mul	r23, r18
    2e76:	bb 27       	eor	r27, r27
    2e78:	f0 0d       	add	r31, r0
    2e7a:	b1 1d       	adc	r27, r1
    2e7c:	63 9f       	mul	r22, r19
    2e7e:	aa 27       	eor	r26, r26
    2e80:	f0 0d       	add	r31, r0
    2e82:	b1 1d       	adc	r27, r1
    2e84:	aa 1f       	adc	r26, r26
    2e86:	64 9f       	mul	r22, r20
    2e88:	66 27       	eor	r22, r22
    2e8a:	b0 0d       	add	r27, r0
    2e8c:	a1 1d       	adc	r26, r1
    2e8e:	66 1f       	adc	r22, r22
    2e90:	82 9f       	mul	r24, r18
    2e92:	22 27       	eor	r18, r18
    2e94:	b0 0d       	add	r27, r0
    2e96:	a1 1d       	adc	r26, r1
    2e98:	62 1f       	adc	r22, r18
    2e9a:	73 9f       	mul	r23, r19
    2e9c:	b0 0d       	add	r27, r0
    2e9e:	a1 1d       	adc	r26, r1
    2ea0:	62 1f       	adc	r22, r18
    2ea2:	83 9f       	mul	r24, r19
    2ea4:	a0 0d       	add	r26, r0
    2ea6:	61 1d       	adc	r22, r1
    2ea8:	22 1f       	adc	r18, r18
    2eaa:	74 9f       	mul	r23, r20
    2eac:	33 27       	eor	r19, r19
    2eae:	a0 0d       	add	r26, r0
    2eb0:	61 1d       	adc	r22, r1
    2eb2:	23 1f       	adc	r18, r19
    2eb4:	84 9f       	mul	r24, r20
    2eb6:	60 0d       	add	r22, r0
    2eb8:	21 1d       	adc	r18, r1
    2eba:	82 2f       	mov	r24, r18
    2ebc:	76 2f       	mov	r23, r22
    2ebe:	6a 2f       	mov	r22, r26
    2ec0:	11 24       	eor	r1, r1
    2ec2:	9f 57       	subi	r25, 0x7F	; 127
    2ec4:	50 40       	sbci	r21, 0x00	; 0
    2ec6:	9a f0       	brmi	.+38     	; 0x2eee <__mulsf3_pse+0x88>
    2ec8:	f1 f0       	breq	.+60     	; 0x2f06 <__mulsf3_pse+0xa0>
    2eca:	88 23       	and	r24, r24
    2ecc:	4a f0       	brmi	.+18     	; 0x2ee0 <__mulsf3_pse+0x7a>
    2ece:	ee 0f       	add	r30, r30
    2ed0:	ff 1f       	adc	r31, r31
    2ed2:	bb 1f       	adc	r27, r27
    2ed4:	66 1f       	adc	r22, r22
    2ed6:	77 1f       	adc	r23, r23
    2ed8:	88 1f       	adc	r24, r24
    2eda:	91 50       	subi	r25, 0x01	; 1
    2edc:	50 40       	sbci	r21, 0x00	; 0
    2ede:	a9 f7       	brne	.-22     	; 0x2eca <__mulsf3_pse+0x64>
    2ee0:	9e 3f       	cpi	r25, 0xFE	; 254
    2ee2:	51 05       	cpc	r21, r1
    2ee4:	80 f0       	brcs	.+32     	; 0x2f06 <__mulsf3_pse+0xa0>
    2ee6:	0c 94 8a 17 	jmp	0x2f14	; 0x2f14 <__fp_inf>
    2eea:	0c 94 17 17 	jmp	0x2e2e	; 0x2e2e <__fp_szero>
    2eee:	5f 3f       	cpi	r21, 0xFF	; 255
    2ef0:	e4 f3       	brlt	.-8      	; 0x2eea <__mulsf3_pse+0x84>
    2ef2:	98 3e       	cpi	r25, 0xE8	; 232
    2ef4:	d4 f3       	brlt	.-12     	; 0x2eea <__mulsf3_pse+0x84>
    2ef6:	86 95       	lsr	r24
    2ef8:	77 95       	ror	r23
    2efa:	67 95       	ror	r22
    2efc:	b7 95       	ror	r27
    2efe:	f7 95       	ror	r31
    2f00:	e7 95       	ror	r30
    2f02:	9f 5f       	subi	r25, 0xFF	; 255
    2f04:	c1 f7       	brne	.-16     	; 0x2ef6 <__mulsf3_pse+0x90>
    2f06:	fe 2b       	or	r31, r30
    2f08:	88 0f       	add	r24, r24
    2f0a:	91 1d       	adc	r25, r1
    2f0c:	96 95       	lsr	r25
    2f0e:	87 95       	ror	r24
    2f10:	97 f9       	bld	r25, 7
    2f12:	08 95       	ret

00002f14 <__fp_inf>:
    2f14:	97 f9       	bld	r25, 7
    2f16:	9f 67       	ori	r25, 0x7F	; 127
    2f18:	80 e8       	ldi	r24, 0x80	; 128
    2f1a:	70 e0       	ldi	r23, 0x00	; 0
    2f1c:	60 e0       	ldi	r22, 0x00	; 0
    2f1e:	08 95       	ret

00002f20 <__fp_nan>:
    2f20:	9f ef       	ldi	r25, 0xFF	; 255
    2f22:	80 ec       	ldi	r24, 0xC0	; 192
    2f24:	08 95       	ret

00002f26 <__fp_pscA>:
    2f26:	00 24       	eor	r0, r0
    2f28:	0a 94       	dec	r0
    2f2a:	16 16       	cp	r1, r22
    2f2c:	17 06       	cpc	r1, r23
    2f2e:	18 06       	cpc	r1, r24
    2f30:	09 06       	cpc	r0, r25
    2f32:	08 95       	ret

00002f34 <__fp_pscB>:
    2f34:	00 24       	eor	r0, r0
    2f36:	0a 94       	dec	r0
    2f38:	12 16       	cp	r1, r18
    2f3a:	13 06       	cpc	r1, r19
    2f3c:	14 06       	cpc	r1, r20
    2f3e:	05 06       	cpc	r0, r21
    2f40:	08 95       	ret

00002f42 <__fp_round>:
    2f42:	09 2e       	mov	r0, r25
    2f44:	03 94       	inc	r0
    2f46:	00 0c       	add	r0, r0
    2f48:	11 f4       	brne	.+4      	; 0x2f4e <__fp_round+0xc>
    2f4a:	88 23       	and	r24, r24
    2f4c:	52 f0       	brmi	.+20     	; 0x2f62 <__fp_round+0x20>
    2f4e:	bb 0f       	add	r27, r27
    2f50:	40 f4       	brcc	.+16     	; 0x2f62 <__fp_round+0x20>
    2f52:	bf 2b       	or	r27, r31
    2f54:	11 f4       	brne	.+4      	; 0x2f5a <__fp_round+0x18>
    2f56:	60 ff       	sbrs	r22, 0
    2f58:	04 c0       	rjmp	.+8      	; 0x2f62 <__fp_round+0x20>
    2f5a:	6f 5f       	subi	r22, 0xFF	; 255
    2f5c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f5e:	8f 4f       	sbci	r24, 0xFF	; 255
    2f60:	9f 4f       	sbci	r25, 0xFF	; 255
    2f62:	08 95       	ret

00002f64 <__mulsi3>:
    2f64:	db 01       	movw	r26, r22
    2f66:	8f 93       	push	r24
    2f68:	9f 93       	push	r25
    2f6a:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__muluhisi3>
    2f6e:	bf 91       	pop	r27
    2f70:	af 91       	pop	r26
    2f72:	a2 9f       	mul	r26, r18
    2f74:	80 0d       	add	r24, r0
    2f76:	91 1d       	adc	r25, r1
    2f78:	a3 9f       	mul	r26, r19
    2f7a:	90 0d       	add	r25, r0
    2f7c:	b2 9f       	mul	r27, r18
    2f7e:	90 0d       	add	r25, r0
    2f80:	11 24       	eor	r1, r1
    2f82:	08 95       	ret

00002f84 <__udivmodsi4>:
    2f84:	a1 e2       	ldi	r26, 0x21	; 33
    2f86:	1a 2e       	mov	r1, r26
    2f88:	aa 1b       	sub	r26, r26
    2f8a:	bb 1b       	sub	r27, r27
    2f8c:	fd 01       	movw	r30, r26
    2f8e:	0d c0       	rjmp	.+26     	; 0x2faa <__udivmodsi4_ep>

00002f90 <__udivmodsi4_loop>:
    2f90:	aa 1f       	adc	r26, r26
    2f92:	bb 1f       	adc	r27, r27
    2f94:	ee 1f       	adc	r30, r30
    2f96:	ff 1f       	adc	r31, r31
    2f98:	a2 17       	cp	r26, r18
    2f9a:	b3 07       	cpc	r27, r19
    2f9c:	e4 07       	cpc	r30, r20
    2f9e:	f5 07       	cpc	r31, r21
    2fa0:	20 f0       	brcs	.+8      	; 0x2faa <__udivmodsi4_ep>
    2fa2:	a2 1b       	sub	r26, r18
    2fa4:	b3 0b       	sbc	r27, r19
    2fa6:	e4 0b       	sbc	r30, r20
    2fa8:	f5 0b       	sbc	r31, r21

00002faa <__udivmodsi4_ep>:
    2faa:	66 1f       	adc	r22, r22
    2fac:	77 1f       	adc	r23, r23
    2fae:	88 1f       	adc	r24, r24
    2fb0:	99 1f       	adc	r25, r25
    2fb2:	1a 94       	dec	r1
    2fb4:	69 f7       	brne	.-38     	; 0x2f90 <__udivmodsi4_loop>
    2fb6:	60 95       	com	r22
    2fb8:	70 95       	com	r23
    2fba:	80 95       	com	r24
    2fbc:	90 95       	com	r25
    2fbe:	9b 01       	movw	r18, r22
    2fc0:	ac 01       	movw	r20, r24
    2fc2:	bd 01       	movw	r22, r26
    2fc4:	cf 01       	movw	r24, r30
    2fc6:	08 95       	ret

00002fc8 <__tablejump2__>:
    2fc8:	ee 0f       	add	r30, r30
    2fca:	ff 1f       	adc	r31, r31
    2fcc:	05 90       	lpm	r0, Z+
    2fce:	f4 91       	lpm	r31, Z
    2fd0:	e0 2d       	mov	r30, r0
    2fd2:	09 94       	ijmp

00002fd4 <__umulhisi3>:
    2fd4:	a2 9f       	mul	r26, r18
    2fd6:	b0 01       	movw	r22, r0
    2fd8:	b3 9f       	mul	r27, r19
    2fda:	c0 01       	movw	r24, r0
    2fdc:	a3 9f       	mul	r26, r19
    2fde:	70 0d       	add	r23, r0
    2fe0:	81 1d       	adc	r24, r1
    2fe2:	11 24       	eor	r1, r1
    2fe4:	91 1d       	adc	r25, r1
    2fe6:	b2 9f       	mul	r27, r18
    2fe8:	70 0d       	add	r23, r0
    2fea:	81 1d       	adc	r24, r1
    2fec:	11 24       	eor	r1, r1
    2fee:	91 1d       	adc	r25, r1
    2ff0:	08 95       	ret

00002ff2 <__muluhisi3>:
    2ff2:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__umulhisi3>
    2ff6:	a5 9f       	mul	r26, r21
    2ff8:	90 0d       	add	r25, r0
    2ffa:	b4 9f       	mul	r27, r20
    2ffc:	90 0d       	add	r25, r0
    2ffe:	a4 9f       	mul	r26, r20
    3000:	80 0d       	add	r24, r0
    3002:	91 1d       	adc	r25, r1
    3004:	11 24       	eor	r1, r1
    3006:	08 95       	ret

00003008 <_exit>:
    3008:	f8 94       	cli

0000300a <__stop_program>:
    300a:	ff cf       	rjmp	.-2      	; 0x300a <__stop_program>
