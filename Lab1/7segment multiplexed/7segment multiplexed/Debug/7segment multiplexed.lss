
7segment multiplexed.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000162  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00000162  000001f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800088  00800088  0000021e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000021e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006f5  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000606  00000000  00000000  000009a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d9  00000000  00000000  00000faf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00001288  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c1  00000000  00000000  000012d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  00001691  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000016da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e6       	ldi	r30, 0x62	; 98
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e8       	ldi	r26, 0x88	; 136
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 38       	cpi	r26, 0x8C	; 140
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 af 00 	jmp	0x15e	; 0x15e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
int count1=0;
int count2=0;

int main(void)
{  
	DDRC=0xFF;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	84 bb       	out	0x14, r24	; 20
	PORTC=0x00;
  96:	15 ba       	out	0x15, r1	; 21
        DDRB=0x03;
  98:	83 e0       	ldi	r24, 0x03	; 3
  9a:	87 bb       	out	0x17, r24	; 23
	PORTB=0x00;
  9c:	18 ba       	out	0x18, r1	; 24
	
	// CTC mode, prescaler=256
	TCCR1B=TCCR1B|(1<<3)|(1<<2);
  9e:	8e b5       	in	r24, 0x2e	; 46
  a0:	8c 60       	ori	r24, 0x0C	; 12
  a2:	8e bd       	out	0x2e, r24	; 46
	
	//Half a second
	OCR1AH=0x5B;    
  a4:	8b e5       	ldi	r24, 0x5B	; 91
  a6:	8b bd       	out	0x2b, r24	; 43
	OCR1AL=0xE8; 
  a8:	88 ee       	ldi	r24, 0xE8	; 232
  aa:	8a bd       	out	0x2a, r24	; 42
	
	sei(); //enable global interrupt
  ac:	78 94       	sei
	
	TIMSK=TIMSK|(1<<4); //enable output compA match interrupt
  ae:	89 b7       	in	r24, 0x39	; 57
  b0:	80 61       	ori	r24, 0x10	; 16
  b2:	89 bf       	out	0x39, r24	; 57
    /* Replace with your application code */
    while (1)
    {           //50% duty_cycle

		//Black segment(PB1)
		PORTB=0x01;
  b4:	21 e0       	ldi	r18, 0x01	; 1
		PORTC=segment1[count1];
		_delay_ms(10);
		
		//Blue segment(PB0)
		PORTB=0x02;
  b6:	92 e0       	ldi	r25, 0x02	; 2
    /* Replace with your application code */
    while (1)
    {           //50% duty_cycle

		//Black segment(PB1)
		PORTB=0x01;
  b8:	28 bb       	out	0x18, r18	; 24
		PORTC=segment1[count1];
  ba:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <count1>
  be:	f0 91 8b 00 	lds	r31, 0x008B	; 0x80008b <count1+0x1>
  c2:	ee 0f       	add	r30, r30
  c4:	ff 1f       	adc	r31, r31
  c6:	ec 58       	subi	r30, 0x8C	; 140
  c8:	ff 4f       	sbci	r31, 0xFF	; 255
  ca:	80 81       	ld	r24, Z
  cc:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	ef e2       	ldi	r30, 0x2F	; 47
  d0:	f5 e7       	ldi	r31, 0x75	; 117
  d2:	31 97       	sbiw	r30, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <main+0x40>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x46>
  d8:	00 00       	nop
		_delay_ms(10);
		
		//Blue segment(PB0)
		PORTB=0x02;
  da:	98 bb       	out	0x18, r25	; 24
		PORTC=segment2[count2];
  dc:	e0 91 88 00 	lds	r30, 0x0088	; 0x800088 <__data_end>
  e0:	f0 91 89 00 	lds	r31, 0x0089	; 0x800089 <__data_end+0x1>
  e4:	ee 0f       	add	r30, r30
  e6:	ff 1f       	adc	r31, r31
  e8:	e0 5a       	subi	r30, 0xA0	; 160
  ea:	ff 4f       	sbci	r31, 0xFF	; 255
  ec:	80 81       	ld	r24, Z
  ee:	85 bb       	out	0x15, r24	; 21
  f0:	ef e2       	ldi	r30, 0x2F	; 47
  f2:	f5 e7       	ldi	r31, 0x75	; 117
  f4:	31 97       	sbiw	r30, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <main+0x62>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x68>
  fa:	00 00       	nop
  fc:	dd cf       	rjmp	.-70     	; 0xb8 <main+0x26>

000000fe <__vector_6>:
    }
}

//Interrupt Service Routine
ISR(TIMER1_COMPA_vect)
{
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	8f 93       	push	r24
 10a:	9f 93       	push	r25
	//occurs every 0.5sec
	if (count1<9)
 10c:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <count1>
 110:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <count1+0x1>
 114:	89 30       	cpi	r24, 0x09	; 9
 116:	91 05       	cpc	r25, r1
 118:	34 f4       	brge	.+12     	; 0x126 <__vector_6+0x28>
	{
		count1++;
 11a:	01 96       	adiw	r24, 0x01	; 1
 11c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <count1+0x1>
 120:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <count1>
 124:	15 c0       	rjmp	.+42     	; 0x150 <__vector_6+0x52>
	}
	else
	{
		count1=0;
 126:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <count1+0x1>
 12a:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <count1>
		if (count2<9)
 12e:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
 132:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x1>
 136:	89 30       	cpi	r24, 0x09	; 9
 138:	91 05       	cpc	r25, r1
 13a:	34 f4       	brge	.+12     	; 0x148 <__vector_6+0x4a>
		{
			count2++;
 13c:	01 96       	adiw	r24, 0x01	; 1
 13e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__data_end+0x1>
 142:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
 146:	04 c0       	rjmp	.+8      	; 0x150 <__vector_6+0x52>
		}
		else
		{
			count2=0;
 148:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__data_end+0x1>
 14c:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__data_end>
		}
	}
}
 150:	9f 91       	pop	r25
 152:	8f 91       	pop	r24
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>
