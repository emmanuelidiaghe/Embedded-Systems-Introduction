
shift reg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000128  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000128  0000019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001a6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007a5  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000678  00000000  00000000  000009f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030b  00000000  00000000  00001071  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  0000137c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000426  00000000  00000000  000013fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000111  00000000  00000000  00001822  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001933  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e2       	ldi	r30, 0x28	; 40
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  7a:	0c 94 92 00 	jmp	0x124	; 0x124 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <_Z9HC595Initv>:

//Initialize HC595 System
void HC595Init()
{
	//Make the Data(DS), Shift clock (SH_CP), Store Clock (ST_CP) lines output
	HC595_DDR|=((1<<HC595_SH_CP_POS)|(1<<HC595_ST_CP_POS)|(1<<HC595_DS_POS));
  82:	87 b3       	in	r24, 0x17	; 23
  84:	87 60       	ori	r24, 0x07	; 7
  86:	87 bb       	out	0x17, r24	; 23
  88:	08 95       	ret

0000008a <_Z10HC595Pulsev>:
//Sends a clock pulse on SH_CP line
void HC595Pulse()
{
	//Pulse the Shift Clock

	HC595_PORT|=(1<<HC595_SH_CP_POS);//HIGH
  8a:	c1 9a       	sbi	0x18, 1	; 24

	HC595_PORT&=(~(1<<HC595_SH_CP_POS));//LOW
  8c:	c1 98       	cbi	0x18, 1	; 24
  8e:	08 95       	ret

00000090 <_Z10HC595Latchv>:

//Sends a clock pulse on ST_CP line
void HC595Latch()
{
	//Pulse the Store Clock
	HC595_PORT|=(1<<HC595_ST_CP_POS);//HIGH
  90:	c2 9a       	sbi	0x18, 2	; 24
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	98 2f       	mov	r25, r24
  96:	9a 95       	dec	r25
  98:	f1 f7       	brne	.-4      	; 0x96 <_Z10HC595Latchv+0x6>
	_delay_loop_1(1);

	HC595_PORT&=(~(1<<HC595_ST_CP_POS));//LOW
  9a:	c2 98       	cbi	0x18, 2	; 24
  9c:	8a 95       	dec	r24
  9e:	f1 f7       	brne	.-4      	; 0x9c <_Z10HC595Latchv+0xc>
  a0:	08 95       	ret

000000a2 <_Z10HC595Writeh>:
	and then latched. The byte is then available on
	output line Q0 to Q7 of the HC595 IC.

*/
void HC595Write(uint8_t data)
{
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	d8 2f       	mov	r29, r24
  a8:	c8 e0       	ldi	r28, 0x08	; 8
	//Order is MSB first
	for(uint8_t i=0;i<8;i++)
	{
		//Output the data on DS line according to the
		//Value of MSB
		if(data & 0b10000000)
  aa:	dd 23       	and	r29, r29
  ac:	14 f4       	brge	.+4      	; 0xb2 <_Z10HC595Writeh+0x10>
		{
			//MSB is 1 so output high
			HC595DataHigh();
  ae:	c0 9a       	sbi	0x18, 0	; 24
  b0:	01 c0       	rjmp	.+2      	; 0xb4 <_Z10HC595Writeh+0x12>
		}
		else
		{
			//MSB is 0 so output high
			HC595DataLow();
  b2:	c0 98       	cbi	0x18, 0	; 24
		}

		HC595Pulse();	//Pulse the Clock line
  b4:	0e 94 45 00 	call	0x8a	; 0x8a <_Z10HC595Pulsev>
		data=data<<1;	//Now bring next bit at MSB position
  b8:	dd 0f       	add	r29, r29
  ba:	c1 50       	subi	r28, 0x01	; 1
*/
void HC595Write(uint8_t data)
{
	//Send each 8 bits serially
	//Order is MSB first
	for(uint8_t i=0;i<8;i++)
  bc:	b1 f7       	brne	.-20     	; 0xaa <_Z10HC595Writeh+0x8>
		data=data<<1;	//Now bring next bit at MSB position
	}

	//Now all 8 bits have been transfered to shift register
	//Move them to output latch at one
	HC595Latch();
  be:	0e 94 48 00 	call	0x90	; 0x90 <_Z10HC595Latchv>
}
  c2:	df 91       	pop	r29
  c4:	cf 91       	pop	r28
  c6:	08 95       	ret

000000c8 <main>:
		_delay_ms(100);//_delay_loop_2(0);
	}
}*/

 int main()
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	2a 97       	sbiw	r28, 0x0a	; 10
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	f8 94       	cli
  d6:	de bf       	out	0x3e, r29	; 62
  d8:	0f be       	out	0x3f, r0	; 63
  da:	cd bf       	out	0x3d, r28	; 61
	uint8_t led_pattern[10]={63,6,91,79,102,109,125,7,127,111};
  dc:	8a e0       	ldi	r24, 0x0A	; 10
  de:	e0 e6       	ldi	r30, 0x60	; 96
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	de 01       	movw	r26, r28
  e4:	11 96       	adiw	r26, 0x01	; 1
  e6:	01 90       	ld	r0, Z+
  e8:	0d 92       	st	X+, r0
  ea:	8a 95       	dec	r24
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x1e>

	//Initialize HC595 system
	HC595Init();
  ee:	0e 94 41 00 	call	0x82	; 0x82 <_Z9HC595Initv>
  f2:	7e 01       	movw	r14, r28
  f4:	2b e0       	ldi	r18, 0x0B	; 11
  f6:	e2 0e       	add	r14, r18
  f8:	f1 1c       	adc	r15, r1
  fa:	8e 01       	movw	r16, r28
  fc:	0f 5f       	subi	r16, 0xFF	; 255
  fe:	1f 4f       	sbci	r17, 0xFF	; 255

	while(1)
	{
		for(uint8_t i=0;i<10;i++)
		{
			HC595Write(led_pattern[i]);	//Write the data to HC595
 100:	f8 01       	movw	r30, r16
 102:	81 91       	ld	r24, Z+
 104:	8f 01       	movw	r16, r30
 106:	0e 94 51 00 	call	0xa2	; 0xa2 <_Z10HC595Writeh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	ff e3       	ldi	r31, 0x3F	; 63
 10c:	2d e0       	ldi	r18, 0x0D	; 13
 10e:	83 e0       	ldi	r24, 0x03	; 3
 110:	f1 50       	subi	r31, 0x01	; 1
 112:	20 40       	sbci	r18, 0x00	; 0
 114:	80 40       	sbci	r24, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x48>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x52>
 11a:	00 00       	nop
	//Initialize HC595 system
	HC595Init();

	while(1)
	{
		for(uint8_t i=0;i<10;i++)
 11c:	0e 15       	cp	r16, r14
 11e:	1f 05       	cpc	r17, r15
 120:	79 f7       	brne	.-34     	; 0x100 <main+0x38>
 122:	eb cf       	rjmp	.-42     	; 0xfa <main+0x32>

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
